-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relation-mapping operators for nested relations
--   
--   An impelemntation of relation-mapping operators. Operators are used in
--   the <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-rop-nested
@version 0.160.0.0

module Koshucode.Baala.Rop.Nest.Message

-- | Not a nested relation
notNestRel :: [TermName] -> Head -> Ab a

module Koshucode.Baala.Rop.Nest.Flow
consDown :: (CRel c) => RopCons c
relmapDown :: (CRel c) => Intmed c -> TermName -> Relmap c
relkitDown :: (CRel c) => TermName -> RelkitFlow c
consUp :: (CRel c) => RopCons c
relmapUp :: (CRel c) => Intmed c -> TermName -> Relmap c
relkitUp :: (CRel c) => TermName -> RelkitFlow c
consChunk :: (Ord c, CRel c) => RopCons c
relmapChunk :: (Ord c, CRel c) => Intmed c -> [TermName] -> [TermName] -> Relmap c
relkitChunk :: (Ord c, CRel c) => [TermName] -> [TermName] -> RelkitFlow c

module Koshucode.Baala.Rop.Nest.Confl
consCopy :: RopCons c
consFor :: (CRel c) => RopCons c
relmapFor :: (CRel c) => Intmed c -> TermName -> Map (Relmap c)
relkitFor :: (CRel c) => TermName -> RelkitBinary c
consGroup :: (Ord c, CRel c) => RopCons c
relmapGroup :: (Ord c, CRel c) => Intmed c -> SharedTerms -> TermName -> Map (Relmap c)
relkitGroup :: (Ord c, CRel c) => SharedTerms -> TermName -> RelkitBinary c
consSlice :: (CRel c) => RopCons c
relmapSlice :: (CRel c) => Intmed c -> TermName -> Map (Relmap c)
relkitSlice :: (CRel c) => TermName -> RelkitBinary c
consSliceUp :: (CRel c) => RopCons c
relmapSliceUp :: (CRel c) => Intmed c -> Map (Relmap c)
relkitSliceUp :: (CRel c) => RelkitBinary c


-- | Derived operators for nested relations.
module Koshucode.Baala.Rop.Nest.Deriv
consOppGroup :: (Ord c, CRel c) => RopCons c
consJoinUp :: (Ord c) => RopCons c
relmapJoinUp :: (Ord c) => Intmed c -> [TermName] -> Relmap c
consPickGroup :: (Ord c, CRel c) => RopCons c
consNest :: (Ord c, CRel c) => RopCons c
relmapNest :: (Ord c, CRel c) => Intmed c -> (Bool, [TermName], TermName) -> Relmap c
consUngroup :: (Ord c, CRel c) => RopCons c
relmapUngroup :: (Ord c, CRel c) => Intmed c -> TermName -> Relmap c


-- | Relational operators for nested relations.
module Koshucode.Baala.Rop.Nest.Rop

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i>@chunk /N ... [-order /P ...\</i> @] Split input relation into
--   some chunks.</li>
--   <li><i><tt>copy N R</tt></i> Naming input relation as <tt>N</tt> in
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>down /N</tt></i> Enclose input relation in a term
--   <tt>/N</tt>.</li>
--   <li><i><tt>for /P R</tt></i> Convert nested relation <tt>/P</tt> by
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>group /N R</tt></i> Group tuples in <tt>R</tt> by input
--   relation.</li>
--   <li><i><tt>group-by /N R</tt></i> Group input relation by output of
--   <tt>R</tt>.</li>
--   <li><i><tt>hang /N -on /P ...</tt></i> Hang nested relation
--   <tt>/N</tt> on <tt>/P</tt> ....</li>
--   <li><i><tt>join-up /P ...</tt></i> Join <tt>/P</tt> ... and up the
--   result relation.</li>
--   <li><i><tt>nest /P ... -to /N</tt></i> Nest terms <tt>/P</tt> ... into
--   nested relation.</li>
--   <li><i><tt>unnest /P</tt></i> Unnest nested relation <tt>/P</tt>.</li>
--   <li><i>@slice /N [R\</i> <tt>] Add nested relation as output of relmap
--   </tt>R@.</li>
--   <li><i><tt>slice-up R</tt></i> Slice, nested map, and lift up.</li>
--   <li><i><tt>up /P</tt></i> Lift up nested relation.</li>
--   </ul>
ropsNest :: (CContent c) => [Rop c]


-- | Relmap operators for nested relations.
module Koshucode.Baala.Rop.Nest
