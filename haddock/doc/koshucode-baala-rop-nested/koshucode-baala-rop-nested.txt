-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relation-mapping operators for nested relations
--   
--   An impelemntation of relation-mapping operators. Operators are used in
--   the <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-rop-nested
@version 0.206.0.0


-- | Relmap operators concerning nested relation.
module Koshucode.Baala.Rop.Nest.Flow

-- | <b>down /N</b>
--   
--   Enclose input relation at term <tt>/N</tt>. In other words, relation
--   flows down to nested level.
consDown :: (CRel c) => RopCons c

-- | Create <tt>down</tt> relmap.
relmapDown :: (CRel c) => Intmed c -> TermName -> Relmap c

-- | Create <tt>down</tt> relkit.
relkitDown :: (CRel c) => TermName -> RelkitFlow c

-- | <b>up /P</b>
--   
--   Lift nested relation <tt>/P</tt> up to current flow.
consUp :: (CRel c) => RopCons c

-- | Create <tt>up</tt> relmap.
relmapUp :: (CRel c) => Intmed c -> TermName -> Relmap c

-- | Create <tt>up</tt> relkit.
relkitUp :: (CRel c) => TermName -> RelkitFlow c

-- | <b>chunk /N ... -order /P ...</b>
--   
--   Split input relation into multiple chunks named /N .... The input
--   relation is ordered by /P ....
consChunk :: (Ord c, CRel c) => RopCons c

-- | Create <tt>chunk</tt> relmap.
relmapChunk :: (Ord c, CRel c) => Intmed c -> [TermName] -> [TermName] -> Relmap c

-- | Create <tt>chunk</tt> relkit.
relkitChunk :: (Ord c, CRel c) => [TermName] -> [TermName] -> RelkitFlow c


-- | Confluent operators for nested relations.
module Koshucode.Baala.Rop.Nest.Confl

-- | <b>copy N R</b>
--   
--   Copy input relation and referenced by ^N in R.
--   
--   For example, <tt>down</tt> <tt>/r</tt> can be rewrite to <tt>copy r (
--   dee | slice /r ^r )</tt>.
consCopy :: RopCons c

-- | <b>for /P R</b>
--   
--   Map nested relation at /P by relmap R.
--   
--   The relamp <tt>for /r ( cut /c )</tt> removes term <tt>/c</tt> from a
--   nested relation at the term <tt>/r</tt>.
consFor :: (CRel c) => RopCons c

-- | Create <tt>for</tt> relmap.
relmapFor :: (CRel c) => Intmed c -> TermName -> Map (Relmap c)

-- | Create <tt>for</tt> relkit.
relkitFor :: (CRel c) => TermName -> RelkitBinary c

-- | <b>group R -to /N</b>
--   
--   Group relation from relmap <tt>R</tt> by input relation. Grouped
--   relations are added as content of term /N to each input tuples.
consGroup :: (Ord c, CRel c) => RopCons c

-- | Create <tt>group</tt> relmap.
relmapGroup :: (Ord c, CRel c) => Intmed c -> SharedTerms -> TermName -> Map (Relmap c)

-- | Create <tt>group</tt> relkit.
relkitGroup :: (Ord c, CRel c) => SharedTerms -> TermName -> RelkitBinary c

-- | <b>slice /N [R]</b>
--   
--   Slice input relation. Each slices have single tuple of input relation,
--   and added as content of term /N to each input tuples. If R is given,
--   slices are mapped by R. If input relation has a nested relation at
--   term /P, the relation can be referenced by ^/P in R.
consSlice :: (CRel c) => RopCons c

-- | Create <tt>slice</tt> relmap.
relmapSlice :: (CRel c) => Intmed c -> TermName -> Map (Relmap c)

-- | Create <tt>slice</tt> relkit.
relkitSlice :: (CRel c) => TermName -> RelkitBinary c

-- | <b>slice-up R</b>
consSliceUp :: (CRel c) => RopCons c

-- | Create <tt>slice-up</tt> relmap.
relmapSliceUp :: (CRel c) => Intmed c -> Map (Relmap c)

-- | Create <tt>slice-up</tt> relkit.
relkitSliceUp :: (CRel c) => RelkitBinary c


-- | Derived operators for nested relations.
module Koshucode.Baala.Rop.Nest.Deriv

-- | <b>opp-group R -to /N [-share /P ...]</b>
--   
--   Opposite operand version of <tt>group</tt> -- grouping relation by
--   relmap output.
consOppGroup :: (Ord c, CRel c) => RopCons c

-- | <b>self-group /P ... -to /N</b>
--   
--   Group input relation into the term /N per /P ....
consSelfGroup :: (Ord c, CRel c) => RopCons c

-- | <b>nest [~] /P ... -to /N</b>
consNest :: (Ord c, CRel c) => RopCons c

-- | Create <tt>self-group</tt> relmap.
relmapSelfGroup :: (Ord c, CRel c) => Intmed c -> (Bool, [TermName], TermName) -> Relmap c

-- | <b>ungroup /P</b>
--   
--   Lift up nested relation /P and meet with non-nested terms.
consUngroup :: (Ord c, CRel c) => RopCons c

-- | Create <tt>ungroup</tt> relmap.
relmapUngroup :: (Ord c, CRel c) => Intmed c -> TermName -> Relmap c

-- | <b>join-up /P ...</b>
--   
--   Join nested relations /P ... and up to output relation.
consJoinUp :: (Ord c) => RopCons c

-- | Create <tt>join-up</tt> relmap.
relmapJoinUp :: (Ord c) => Intmed c -> [TermName] -> Relmap c


-- | Relational operators for nested relations.
module Koshucode.Baala.Rop.Nest.Rops

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i>@chunk /N ... [-order /P ...\</i> @] Split input relation into
--   some chunks.</li>
--   <li><i><tt>copy N R</tt></i> Naming input relation as <tt>N</tt> in
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>down /N</tt></i> Enclose input relation in a term
--   <tt>/N</tt>.</li>
--   <li><i><tt>for /P R</tt></i> Convert nested relation <tt>/P</tt> by
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>group /N R</tt></i> Group tuples in <tt>R</tt> by input
--   relation.</li>
--   <li><i><tt>hang /N -on /P ...</tt></i> Hang nested relation
--   <tt>/N</tt> on <tt>/P</tt> ....</li>
--   <li><i>@slice /N [R\</i> <tt>] Add nested relation as output of relmap
--   </tt>R@.</li>
--   <li><i><tt>slice-up R</tt></i> Slice, nested map, and lift up.</li>
--   <li><i><tt>up /P</tt></i> Lift up nested relation.</li>
--   </ul>
ropsNest :: (CContent c) => [Rop c]


-- | Relmap operators for nested relations.
module Koshucode.Baala.Rop.Nest
