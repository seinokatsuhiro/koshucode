-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Preliminary library for Koshucode
--   
--   Preliminary library for Koshucode.
@package koshucode-baala-overture
@version 0.170.0.0


-- | Unicode general categories.
module Koshucode.Baala.Overture.Text.Unicode

-- | Major category of the Unicode general categories.
data MajorGeneralCategory

-- | Lu Ll Lt Lm Lo
UnicodeLetter :: MajorGeneralCategory

-- | Mn Mc Me
UnicodeMark :: MajorGeneralCategory

-- | Nd Nl No
UnicodeNumber :: MajorGeneralCategory

-- | Pc Pd Ps Pe Pi Pf Po
UnicodePunctuation :: MajorGeneralCategory

-- | Sm Sc Sk So
UnicodeSymbol :: MajorGeneralCategory

-- | Zs Zl Zp
UnicodeSeperator :: MajorGeneralCategory

-- | Cc Cf Cs Co Cn
UnicodeOther :: MajorGeneralCategory

-- | Major general category of character.
majorGeneralCategory :: Char -> MajorGeneralCategory

-- | Convert general category to major category.
toMajorGeneralCategory :: GeneralCategory -> MajorGeneralCategory

-- | Name of general category. This function returns one of
--   <tt>letter</tt>, <tt>mark</tt>, <tt>number</tt>, <tt>punct</tt>,
--   <tt>symbol</tt>, <tt>sep</tt>, or <tt>other</tt>.
generalCategoryName :: MajorGeneralCategory -> String

-- | Major-minor category symbols like <tt>Lu</tt>.
generalCategoryLetter :: GeneralCategory -> String

-- | One-letter representation of general category. This function returns
--   one of <tt>L</tt> (letter), <tt>M</tt> (mark), <tt>N</tt> (number),
--   <tt>P</tt> (punctuation), <tt>S</tt> (symbol), <tt>Z</tt> (seperator),
--   or <tt>C</tt> (other).
generalCategoryMajorLetter :: MajorGeneralCategory -> Char

-- | One-letter representation of minor general category.
generalCategoryMinorLetter :: GeneralCategory -> Char
instance GHC.Enum.Bounded Koshucode.Baala.Overture.Text.Unicode.MajorGeneralCategory
instance GHC.Classes.Ord Koshucode.Baala.Overture.Text.Unicode.MajorGeneralCategory
instance GHC.Classes.Eq Koshucode.Baala.Overture.Text.Unicode.MajorGeneralCategory
instance GHC.Show.Show Koshucode.Baala.Overture.Text.Unicode.MajorGeneralCategory


-- | Encode and decode integers.
module Koshucode.Baala.Overture.Text.Integer

-- | Decode decimal integer.
stringDec :: (Eq n, Num n) => String -> Maybe n

-- | Decode decimal integer as <a>Int</a>.
--   
--   <pre>
--   &gt;&gt;&gt; stringInt "12"
--   Just 12
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; stringInt "12.3"
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; stringInt "12345678901234567890"
--   Just (-6101065172474983726)
--   </pre>
stringInt :: String -> Maybe Int

-- | Decode decimal integer as <a>Integer</a>.
--   
--   <pre>
--   &gt;&gt;&gt; stringInteger "12345678901234567890"
--   Just 12345678901234567890
--   </pre>
stringInteger :: String -> Maybe Integer

-- | Decode hexadecimal digits.
stringHex :: (Eq n, Num n) => String -> Maybe n

-- | Decode hexadecimal digits as <a>Int</a>.
--   
--   <pre>
--   &gt;&gt;&gt; stringHexInt "0F"
--   Just 15
--   </pre>
stringHexInt :: String -> Maybe Int

-- | Decode hexadecimal digits as <a>Integer</a>.
--   
--   <pre>
--   &gt;&gt;&gt; stringHexInteger "0F"
--   Just 15
--   </pre>
stringHexInteger :: String -> Maybe Integer

-- | Encode integer to hexadecimal string.
--   
--   <pre>
--   &gt;&gt;&gt; intHexString 15
--   "f"
--   </pre>
intLowerHexString :: Int -> String

-- | Encode integer to hexadecimal string.
--   
--   <pre>
--   &gt;&gt;&gt; intUpperHexString 15
--   "F"
--   </pre>
intUpperHexString :: Int -> String

-- | Encode integer to custome-digit string.
--   
--   <pre>
--   &gt;&gt;&gt; integralCustomString "OI" &lt;$&gt; [0..8 :: Int]
--   ["O", "I", "IO", "II", "IOO", "IOI", "IIO", "III", "IOOO"]
--   </pre>
integralCustomString :: (Integral n) => String -> n -> String

-- | Encode integer to reckoning string.
--   
--   <pre>
--   &gt;&gt;&gt; intReckonString ['A'..'Z'] &lt;$&gt; [0, 1, 2, 25, 26, 27, 52, 53, 100, 1000, 5303449]
--   ["", "A", "B", "Y", "Z", "AA", "AZ", "BA", "CV", "ALL", "KOSHU"]
--   </pre>
integralReckonString :: (Integral n) => String -> n -> String


-- | Unicode general category.
module Koshucode.Baala.Overture.Text.Category

-- | List of letter categories (L).
categoryLetter :: [GeneralCategory]

-- | List of mark categories (M).
categoryMark :: [GeneralCategory]

-- | List of number categories (N).
categoryNumber :: [GeneralCategory]

-- | List of punctuation categories (P).
categoryPunctuation :: [GeneralCategory]

-- | List of symbol categories (S).
categorySymbol :: [GeneralCategory]

-- | List of separator categories (Z).
categorySeparator :: [GeneralCategory]

-- | List of other categories (C).
categoryOther :: [GeneralCategory]

-- | List of alphabetic categories (L + M).
categoryAlpha :: [GeneralCategory]

-- | List of textual-sign categories (P + S).
categorySign :: [GeneralCategory]

-- | List of open brackets (Ps + Pi).
categoryOpen :: [GeneralCategory]

-- | List of close brackets (Pe + Pf).
categoryClose :: [GeneralCategory]

-- | Lookup unicode general categories by its short name. Short name means
--   two-letter category name (e.g., <tt>"lu"</tt> for upper case letter,
--   <tt>"zs"</tt> for space), or one-letter category group (e.g.,
--   <tt>"l"</tt> for letter, <tt>"z"</tt> for separator).
--   
--   <pre>
--   &gt;&gt;&gt; categoryLookup "lu"
--   Right (fromList [UppercaseLetter])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; categoryLookup "n"
--   Right (fromList [DecimalNumber, LetterNumber, OtherNumber])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; categoryLookup "lx"
--   Left "lx"
--   </pre>
categoryLookup :: String -> Either String (Set GeneralCategory)


-- | Text name.
module Koshucode.Baala.Overture.Name.Text

-- | Text name.
type Name = Text

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name


-- | Integer or string name.
module Koshucode.Baala.Overture.Name.IntString

-- | String or integer name.
data Name
NameI :: Int -> Name
NameS :: String -> Name

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name
instance GHC.Classes.Ord Koshucode.Baala.Overture.Name.IntString.Name
instance GHC.Classes.Eq Koshucode.Baala.Overture.Name.IntString.Name
instance GHC.Show.Show Koshucode.Baala.Overture.Name.IntString.Name


-- | String name.
module Koshucode.Baala.Overture.Name.String

-- | String name.
type Name = String

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name


-- | Named function.
module Koshucode.Baala.Overture.Fn

-- | String name.
type Name = String

-- | Named function.
data Fn a b
Fn :: Name -> (a -> b) -> Fn a b

-- | Two-argument named function.
data Fn2 a b c
Fn2 :: Name -> (a -> b -> c) -> Fn2 a b c
instance Koshucode.Baala.Overture.Name.String.GetName (Koshucode.Baala.Overture.Fn.Fn a b)
instance GHC.Show.Show (Koshucode.Baala.Overture.Fn.Fn a b)
instance GHC.Classes.Eq (Koshucode.Baala.Overture.Fn.Fn a b)
instance GHC.Classes.Ord (Koshucode.Baala.Overture.Fn.Fn a b)
instance Koshucode.Baala.Overture.Name.String.GetName (Koshucode.Baala.Overture.Fn.Fn2 a b c)
instance GHC.Show.Show (Koshucode.Baala.Overture.Fn.Fn2 a b c)
instance GHC.Classes.Eq (Koshucode.Baala.Overture.Fn.Fn2 a b c)
instance GHC.Classes.Ord (Koshucode.Baala.Overture.Fn.Fn2 a b c)


-- | Derivied types.
module Koshucode.Baala.Overture.Type

-- | Homotype <a>Either</a>.
type Eith a = Either a a

-- | Extract <a>Eith</a> content.
--   
--   <pre>
--   &gt;&gt;&gt; uneith &lt;$&gt; [Left "L", Right "R"]
--   ["L", "R"]
--   </pre>
uneith :: Eith a -> a

-- | Map from something to same type.
type Map a = a -> a

-- | Map from something to list of something.
type ManyMap a = a -> [a]

-- | Map from string to string.
type StringMap = Map String

-- | Boolean-valued function, also called predicate.
type Test a = a -> Bool

-- | Boolean-valued function with 2 arguments.
type Test2 a b = a -> b -> Bool

-- | Type for binary operators.
type Bin a = a -> a -> a

-- | <a>Int</a> shorthand.
--   
--   <pre>
--   &gt;&gt;&gt; int 12
--   12
--   </pre>
--   
--   This is same as:
--   
--   <pre>
--   &gt;&gt;&gt; 12 :: Int
--   12
--   </pre>
int :: Map Int

-- | <a>Integer</a> shorthand.
--   
--   <pre>
--   &gt;&gt;&gt; integer 12
--   12
--   </pre>
--   
--   This is same as:
--   
--   <pre>
--   &gt;&gt;&gt; 12 :: Integer
--   12
--   </pre>
integer :: Map Integer


-- | String utility.
module Koshucode.Baala.Overture.Text.Utility

-- | Remove space and space-like characters from the beginning of string.
--   
--   <pre>
--   &gt;&gt;&gt; trimBegin "  abc  "
--   "abc  "
--   </pre>
trimBegin :: StringMap

-- | Remove space and space-like characters from the end of string.
--   
--   <pre>
--   &gt;&gt;&gt; trimEnd "  abc  "
--   "  abc"
--   </pre>
trimEnd :: StringMap

-- | Remove space and space-like characters from the beginning and end of
--   string.
--   
--   <pre>
--   &gt;&gt;&gt; trimBoth "  abc  "
--   "abc"
--   </pre>
trimBoth :: StringMap

-- | Add spaces to the left.
--   
--   <pre>
--   &gt;&gt;&gt; padBegin 10 "abc"
--   "       abc"
--   </pre>
padBegin :: Int -> StringMap

-- | Add spaces to the right.
--   
--   <pre>
--   &gt;&gt;&gt; padEnd 10 "abc"
--   "abc       "
--   </pre>
padEnd :: Int -> StringMap

-- | Add given character to the left.
--   
--   <pre>
--   &gt;&gt;&gt; padBeginWith '.' 10 "abc"
--   ".......abc"
--   </pre>
padBeginWith :: Char -> Int -> StringMap

-- | Add given character to the right.
padEndWith :: Char -> Int -> StringMap

-- | Calculate width of string.
stringWidth :: String -> Int

-- | Add space character if first character is non-space.
--   
--   <pre>
--   &gt;&gt;&gt; addSpace "aaa"
--   " aaa"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; addSpace " bbb"
--   " bbb"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; addSpace ""
--   ""
--   </pre>
addSpace :: StringMap

-- | Print showing value.
putShow :: (Show a) => a -> IO ()

-- | Print showing value with newline.
putShowLn :: (Show a) => a -> IO ()

-- | Print multiple lines.
putLines :: [String] -> IO ()

-- | Print multiple lines.
hPutLines :: Handle -> [String] -> IO ()

-- | Print empty line.
hPutEmptyLine :: Handle -> IO ()


-- | Bundle of text modules.
module Koshucode.Baala.Overture.Text


-- | Bundle of overture modules.
module Koshucode.Baala.Overture
