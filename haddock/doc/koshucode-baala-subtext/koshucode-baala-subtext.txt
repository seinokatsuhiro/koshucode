-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A text matching library
--   
--   Subtext provides text matching functionality with sequential,
--   alternative, and repetitive expressions. It collects submatches and
--   switch matching expression among multiple expressions.
@package koshucode-baala-subtext
@version 0.213.0.0


-- | Token for sieve pattern.
module Koshucode.Baala.Subtext.Sieve.Token

-- | Sieve token.
data SivToken t
SivText :: t -> SivToken t
SivKey :: SivKey -> SivToken t
SivOpen :: SivBracket -> SivToken t
SivClose :: SivBracket -> SivToken t

-- | Sieve bracket.
data SivBracket
SivGroup :: SivBracket
SivRepeat :: Int -> SivBracket
SivOption :: SivBracket

-- | Sieve keyword.
data SivKey

-- | <b>[ _ ]</b> Any single character.
SivAnyChar :: SivKey

-- | <b>[ * ]</b> Arbitrary-length any text.
SivAnyText :: SivKey

-- | <b>[ - ]</b> Character between two characters.
SivRange :: SivKey

-- | Convert textual value to sieve token list.
--   
--   <pre>
--   &gt;&gt;&gt; print O.&lt;#!&gt; sivTokens "foo{ba_}[0-9]baz_"
--   SivText "foo"
--   SivOpen (SivRepeat 0)
--   SivText "ba"
--   SivKey SivAnyChar
--   SivClose (SivRepeat 0)
--   SivOpen SivOption
--   SivText "0"
--   SivKey SivRange
--   SivText "9"
--   SivClose SivOption
--   SivText "baz_"
--   </pre>
sivTokens :: (Textual t) => t -> [SivToken t]
instance GHC.Classes.Ord t => GHC.Classes.Ord (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Show.Show t => GHC.Show.Show (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Classes.Ord Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Classes.Eq Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Show.Show Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Classes.Ord Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance GHC.Classes.Eq Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance GHC.Show.Show Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance Koshucode.Baala.Base.Abort.CodePos.GetCodePos (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)


-- | Lower and upper bound.
module Koshucode.Baala.Subtext.MinMax

-- | Lower and upper bound.
data MinMax

-- | Lower bound and unlimited upper bound
Min :: Int -> MinMax

-- | Lower and upper bound
MinMax :: Int -> Int -> MinMax

-- | Test lower bound.
--   
--   <pre>
--   &gt;&gt;&gt; atLeast 1 $ Min 0
--   False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; atLeast 1 $ Min 1
--   True
--   </pre>
atLeast :: Int -> MinMax -> Bool

-- | Test upper bound.
atMost :: Int -> MinMax -> Bool

-- | Compose nested min-max.
--   
--   <pre>
--   &gt;&gt;&gt; MinMax 2 4 `times` MinMax 3 5
--   MinMax 6 20
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; MinMax 2 4 `times` Min 3
--   Min 6
--   </pre>
times :: MinMax -> MinMax -> MinMax
instance GHC.Classes.Ord Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Classes.Eq Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Show.Show Koshucode.Baala.Subtext.MinMax.MinMax


-- | Subtext match expression.
module Koshucode.Baala.Subtext.Expr

-- | Subtext match expression.
data Expr as a

-- | Recursive expression
ERec :: (ExprRec as a) -> Expr as a

-- | Non-recursive expression
EBase :: (ExprBase as a) -> Expr as a

-- | Recursive expression.
data ExprRec as a

-- | Alternative match
EOr :: [Expr as a] -> ExprRec as a

-- | Sequential match
ESeq :: [Expr as a] -> ExprRec as a

-- | Additional condition
EAnd :: [Expr as a] -> ExprRec as a

-- | Inverted condition
ENot :: (Expr as a) -> ExprRec as a

-- | Repetitive match
ERep :: MinMax -> (Expr as a) -> ExprRec as a

-- | Find last match
ELast :: (Expr as a) -> ExprRec as a

-- | Submatch
ESub :: Name -> (Expr as a) -> ExprRec as a

-- | Modification matcher
EAs :: (FnAs as a) -> (Expr as a) -> ExprRec as a

-- | Change gathering setting
EGath :: Bool -> (Expr as a) -> ExprRec as a

-- | Non-recursive expression.
data ExprBase as a

-- | Element matcher
EElem :: (FnElem a) -> ExprBase as a

-- | Spanning (multi-element) matcher
ESpan :: (FnSpan as a) -> ExprBase as a

-- | Inter-element matcher
EInter :: (FnInter a) -> ExprBase as a

-- | Change to other expression
EChange :: Name -> ExprBase as a

-- | Immediate match/unmatch
EAlways :: Bool -> ExprBase as a

-- | Context-dependent match
EWhat :: ExprBase as a

-- | Function type for element matcher.
type FnElem a = Fn a Bool

-- | Function type for spanning matcher.
type FnSpan as a = Fn as (Maybe (as, as))

-- | Function type for inter-element matcher.
type FnInter a = Fn2 (Maybe a) (Maybe a) Bool

-- | Function type for modification matcher.
type FnAs as a = Fn as as
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.Expr as a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.Expr as a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.Expr as a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprRec as a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprRec as a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprRec as a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprBase as a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprBase as a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprBase as a)


-- | Basic operators.
module Koshucode.Baala.Subtext.Operator.Basic

-- | Element match.
elem :: Name -> (a -> Bool) -> Expr as a

-- | Match any element.
any :: Expr as a

-- | Match exactly the given element.
eq :: (Eq a) => a -> Expr as a

-- | Match element range.
to :: (Ord a) => a -> a -> Expr as a

-- | Match element in the given list.
list :: (Eq a) => [a] -> Expr as a

-- | Spanning match.
span :: Name -> (as -> Maybe (as, as)) -> Expr as a

-- | Match exactly the given sequence.
equal :: (List as a, Eq a) => as -> Expr as a

-- | Inter-element match.
inter :: Name -> (Maybe a -> Maybe a -> Bool) -> Expr as a

-- | Match at the beginning of sequence.
begin :: Expr as a

-- | Match at the end of sequence.
end :: Expr as a

-- | Match immediately.
succ :: Expr as a

-- | Unmatch immediately.
fail :: Expr as a

-- | Context-dependent match.
what :: Expr as a

-- | Change to other matcher.
change :: Name -> Expr as a


-- | Combinations and variations.
module Koshucode.Baala.Subtext.Operator.Combine

-- | Alternative match.
or :: [Expr as a] -> Expr as a

-- | Sequential match.
seq :: [Expr as a] -> Expr as a

-- | Additional condition.
and :: [Expr as a] -> Expr as a

-- | Inverted condition. If expression is zero-repeatable, stirp off the
--   repeatition operator, because zero-repetition can be matched any
--   input.
not :: Expr as a -> Expr as a

-- | Find last match.
last :: Expr as a -> Expr as a

-- | Any character except for given pattern.
anyNot :: Expr as a -> Expr as a

-- | Match but stay.
stay :: Expr as a -> Expr as a

-- | Turn off gathering match.
skip :: Expr as a -> Expr as a

-- | Turn on gathering match.
gather :: Expr as a -> Expr as a

-- | Named submatch.
sub :: Name -> Expr as a -> Expr as a

-- | Named submatch.
(#) :: Name -> Expr as a -> Expr as a

-- | Match with modification.
as :: FnAs as a -> Expr as a -> Expr as a

-- | Replace to given sequence.
asConst :: (List as a) => as -> Expr as a -> Expr as a

-- | Add segment to the beginning of matched sequence.
asPrepend :: (List as a) => as -> Expr as a -> Expr as a

-- | Add segment to the end of matched sequence.
asAppend :: (List as a) => as -> Expr as a -> Expr as a

-- | Add segments to the beginning and end of matched sequence.
asWrap :: (List as a) => as -> as -> Expr as a -> Expr as a


-- | Repetitive operators.
module Koshucode.Baala.Subtext.Operator.Repeat

-- | Repetition with min-max parameter.
repeat :: MinMax -> Expr as a -> Expr as a

-- | Extract min-max parameter.
repeatTimes :: Expr as a -> Maybe MinMax

-- | Extract internal expression.
repeatExpr :: Expr as a -> Maybe (Expr as a)

-- | Repetition with lower bound.
min :: Int -> Expr as a -> Expr as a

-- | Repetition upper bound.
max :: Int -> Expr as a -> Expr as a

-- | Repetition with lower and upper bound.
minMax :: Int -> Int -> Expr as a -> Expr as a

-- | Match zero or more times.
many :: Expr as a -> Expr as a

-- | Match one or more times.
many1 :: Expr as a -> Expr as a

-- | Match zero or one times.
maybe :: Expr as a -> Expr as a

-- | Many of any.
anySeq :: Expr as a

-- | Match before given expression.
before :: Expr as a -> Expr as a

-- | X-separated values.
sep :: Expr as a -> Expr as a -> Expr as a


-- | Operators for text match.
module Koshucode.Baala.Subtext.Operator.Char

-- | Subtext expression for character input.
type CharExpr t = Expr t Char

-- | Match some character in a list of characters.
char :: [Char] -> CharExpr t

-- | Match some word in a list of words from space-separated string.
word :: (Textual t) => t -> CharExpr t

-- | Match space character.
space :: CharExpr t

-- | Match zero-or-more space characters.
spaces :: CharExpr t

-- | Match one-or-more space characters.
spaces1 :: CharExpr t

-- | Match digit characters.
digit :: CharExpr t

-- | Match letter characters.
letter :: CharExpr t

-- | Match first 128 characters of Unicode character set.
ascii :: CharExpr t

-- | Match first 256 characters of Unicode character set.
latin1 :: CharExpr t

-- | Test unicode general category with category set.
categorySet :: Set GeneralCategory -> CharExpr t

-- | Test unicode general category with category list.
categoryList :: [GeneralCategory] -> CharExpr t

-- | Test unicode general category with short names. The argument string is
--   space-separated names. If unknown name is given, returns the name in
--   <a>Left</a> data.
category :: String -> Either String (CharExpr t)

-- | Convert matched text into lower case.
asLower :: (Textual t) => CharExpr t -> CharExpr t

-- | Convert matched text into upper case.
asUpper :: (Textual t) => CharExpr t -> CharExpr t


-- | Match operators.
module Koshucode.Baala.Subtext.Operator


-- | Bundle of expressions.
module Koshucode.Baala.Subtext.Bundle

-- | Bundle of named expressions.
data Bundle as a
Bundle :: [(Name, Expr as a)] -> Expr as a -> [NameDepth] -> Bundle as a
[bundleExpr] :: Bundle as a -> [(Name, Expr as a)]
[bundleStart] :: Bundle as a -> Expr as a
[bundleSubmatch] :: Bundle as a -> [NameDepth]

-- | Map version of expression bundle.
type BundleMap as a = Map Name (Expr as a)

-- | Submatch name and its depth level. Depth is incremented when entering
--   repeatable expressions. Submatch of non-zero depth is collected in
--   list.
type NameDepth = (Name, Int)

-- | Create bundle of subtext expressions.
bundle :: [(Name, Expr as a)] -> Bundle as a

-- | The start expression of bundle.
startExpr :: [(Name, Expr as a)] -> Expr as a
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Bundle.Bundle as a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Bundle.Bundle as a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Bundle.Bundle as a)


-- | Matching parameter.
module Koshucode.Baala.Subtext.Para

-- | Matching parameter.
data Para as a
Para :: BundleMap as a -> [Submatch as a] -> Bool -> Expr as a -> Int -> as -> Maybe a -> as -> Para as a

-- | Expression bundle
[paraBundle] :: Para as a -> BundleMap as a

-- | Submatches.
[paraRawSubs] :: Para as a -> [Submatch as a]

-- | Gather or skip match result
[paraGather] :: Para as a -> Bool

-- | Match expression
[paraExpr] :: Para as a -> Expr as a

-- | Position on input sequence
[paraPos] :: Para as a -> Int

-- | Input sequence
[paraInput] :: Para as a -> as

-- | Previous element
[paraPrev] :: Para as a -> Maybe a

-- | Match result
[paraRawOutput] :: Para as a -> as

-- | Submatch result, its name and matched sequence.
type Submatch as a = (Name, as)

-- | Create matching parameter from expression bundle and input sequence.
createPara :: (List as a) => Bundle as a -> as -> Para as a
instance (GHC.Classes.Ord as, GHC.Classes.Ord a) => GHC.Classes.Ord (Koshucode.Baala.Subtext.Para.Para as a)
instance (GHC.Classes.Eq as, GHC.Classes.Eq a) => GHC.Classes.Eq (Koshucode.Baala.Subtext.Para.Para as a)
instance (GHC.Show.Show as, GHC.Show.Show a) => GHC.Show.Show (Koshucode.Baala.Subtext.Para.Para as a)


-- | Matching procedure.
module Koshucode.Baala.Subtext.Match

-- | Function from input sequence to match result. When unmatched,
--   <a>Nothing</a> is returned.
type GeneralMatch as a = as -> Maybe (MatchResult as a)

-- | Character sequence version of <a>GeneralMatch</a>.
type CharMatch t = GeneralMatch t Char

-- | Main and submatches.
type MatchResult as a = (as, [Submatch as a])

-- | Apply match expression to input sequence.
matchExpr :: (List as a, Show a) => Expr as a -> GeneralMatch as a

-- | Apply expression bundle to input sequence.
matchBundle :: (List as a, Show a) => Bundle as a -> GeneralMatch as a


-- | Token tree for sieve pattern.
module Koshucode.Baala.Subtext.Sieve.Tree

-- | Sieve tree.
type SivTree t = CodeTree SivBracket SivToken t

-- | Parse sieve token list.
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ B.printTree O.# B.abortLeft (sivTrees $ S.sivTokens "foo{ba_}[0-9]baz_")
--   - SivText "foo"
--   &gt; SivRepeat 0 Just (SivOpen (SivRepeat 0), SivClose (SivRepeat 0))
--     - SivText "ba"
--     - SivKey SivAnyChar
--   &gt; SivOption Just (SivOpen SivOption, SivClose SivOption)
--     - SivText "0"
--     - SivKey SivRange
--     - SivText "9"
--   - SivText "baz_"
--   </pre>
sivTrees :: [SivToken t] -> Ab [SivTree t]

-- | Sieve expression.
type SivExpr = CharExpr String

-- | Convert to sieve expression.
class ToSivExpr a
toSivExpr :: ToSivExpr a => a -> Ab SivExpr

-- | Convert to sieve expression with replacement.
toSivExprOr :: (ToSivExpr a) => SivExpr -> a -> SivExpr

-- | Test sieve pattern matches text.
--   
--   <pre>
--   &gt;&gt;&gt; sivMatch "foo(*).k" O.&lt;#&gt; ["foo.k", "foo.hs", "foobar.k", "bar.k"]
--   Right [True, True, False]
--   </pre>
sivMatch :: (ToSivExpr siv) => siv -> String -> Ab Bool

-- | Test sieve pattern matches text.
sivMatchExpr :: SivExpr -> String -> Bool
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr Koshucode.Baala.Subtext.Sieve.Tree.SivExpr
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr [Koshucode.Baala.Subtext.Sieve.Token.SivToken GHC.Base.String]
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr GHC.Base.String


-- | Textual list mapping.
module Koshucode.Baala.Subtext.Sieve.Sivmap

-- | Mapping for textual lists.
data Sivmap t

-- | Identity
SivmapId :: Sivmap t

-- | Equality
SivmapEq :: t -> Sivmap t

-- | Keep by sieve pattern
SivmapKeep :: t -> SivExpr -> Sivmap t

-- | Omit by sieve pattern
SivmapOmit :: t -> SivExpr -> Sivmap t

-- | Associatoin of key and value
SivmapAssoc :: t -> t -> Sivmap t

-- | Sivmap chain
SivmapChain :: (Sivmap t) -> (Sivmap t) -> Sivmap t

-- | Identity mapping.
sivmapId :: Sivmap t

-- | Equal mapping.
sivmapEq :: t -> Sivmap t

-- | Filter by sieve pattern.
sivmapKeep :: (ToSivExpr t) => t -> Sivmap t

-- | Anti-filter by sieve pattern.
sivmapOmit :: (ToSivExpr t) => t -> Sivmap t

-- | Association mapping.
sivmapAssoc :: t -> t -> Sivmap t

-- | Mapping chain.
sivmapChain :: Bin (Sivmap t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)
instance GHC.Show.Show t => GHC.Show.Show (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)
instance GHC.Base.Functor Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap
instance GHC.Base.Monoid (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)


-- | Sieve pattern.
module Koshucode.Baala.Subtext.Sieve


-- | A text matching library.
module Koshucode.Baala.Subtext
