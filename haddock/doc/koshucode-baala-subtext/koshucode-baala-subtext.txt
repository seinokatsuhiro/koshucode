-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A text matching library
--   
--   Subtext provides text matching functionality with sequential,
--   alternative, and repetitive expressions. It collects submatches and
--   switch matching expression among multiple expressions.
@package koshucode-baala-subtext
@version 0.158.0.0


-- | Text name.
module Koshucode.Baala.Subtext.Name.Text

-- | Text name.
type Name = Text

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name


-- | Integer or string name.
module Koshucode.Baala.Subtext.Name.IntString

-- | String or integer name.
data Name
NameI :: Int -> Name
NameS :: String -> Name

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name
instance GHC.Classes.Ord Koshucode.Baala.Subtext.Name.IntString.Name
instance GHC.Classes.Eq Koshucode.Baala.Subtext.Name.IntString.Name
instance GHC.Show.Show Koshucode.Baala.Subtext.Name.IntString.Name


-- | String name.
module Koshucode.Baala.Subtext.Name.String

-- | String name.
type Name = String

-- | Class for types which has name.
class GetName a
getName :: GetName a => a -> Name


-- | Lower and upper bound.
module Koshucode.Baala.Subtext.MinMax

-- | Lower and upper bound.
data MinMax

-- | Lower bound
Min :: Int -> MinMax

-- | Lower and upper bound
MinMax :: Int -> Int -> MinMax

-- | Test lower bound.
atLeast :: Int -> MinMax -> Bool

-- | Test upper bound.
atMost :: Int -> MinMax -> Bool
instance GHC.Classes.Ord Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Classes.Eq Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Show.Show Koshucode.Baala.Subtext.MinMax.MinMax


-- | Named function.
module Koshucode.Baala.Subtext.Fn

-- | String name.
type Name = String

-- | Named function.
data Fn a b
Fn :: Name -> (a -> b) -> Fn a b

-- | Two-argument named function.
data Fn2 a b c
Fn2 :: Name -> (a -> b -> c) -> Fn2 a b c
instance Koshucode.Baala.Subtext.Name.String.GetName (Koshucode.Baala.Subtext.Fn.Fn a b)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Fn.Fn a b)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Fn.Fn a b)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Fn.Fn a b)
instance Koshucode.Baala.Subtext.Name.String.GetName (Koshucode.Baala.Subtext.Fn.Fn2 a b c)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Fn.Fn2 a b c)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Fn.Fn2 a b c)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Fn.Fn2 a b c)


-- | Subtext match expression.
module Koshucode.Baala.Subtext.Expr

-- | Subtext match expression.
data Expr a

-- | Recursive expression
ERec :: (ExprRec a) -> Expr a

-- | Non-recursive expression
EBase :: (ExprBase a) -> Expr a

-- | Recursive expression.
data ExprRec a

-- | Alternative match
EOr :: [Expr a] -> ExprRec a

-- | Sequential match
ESeq :: [Expr a] -> ExprRec a

-- | Additional condition
EAnd :: [Expr a] -> ExprRec a

-- | Inverted condition
ENot :: (Expr a) -> ExprRec a

-- | Repetitive match
ERep :: MinMax -> (Expr a) -> ExprRec a

-- | Find last match
ELast :: (Expr a) -> ExprRec a

-- | Submatch
ESub :: Name -> (Expr a) -> ExprRec a

-- | Change gathering setting
EGath :: Bool -> (Expr a) -> ExprRec a

-- | Match but not consume input
EPeek :: (Expr a) -> ExprRec a

-- | Non-recursive expression.
data ExprBase a

-- | Element matcher
EElem :: (FnElem a) -> ExprBase a

-- | Spanning (multi-element) matcher
ESpan :: (FnSpan a) -> ExprBase a

-- | Inter-element matcher
EInter :: (FnInter a) -> ExprBase a

-- | Change to other expression
EChange :: Name -> ExprBase a

-- | Immediate match/unmatch
EAlways :: Bool -> ExprBase a

-- | Context-dependent match
EWhat :: ExprBase a

-- | Function type for element matcher.
type FnElem a = Fn a Bool

-- | Function type for spanning matcher.
type FnSpan a = Fn [a] (Maybe ([a], [a]))

-- | Function type for inter-element matcher.
type FnInter a = Fn2 (Maybe a) (Maybe a) Bool
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprBase a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprBase a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprBase a)


-- | Basic operators.
module Koshucode.Baala.Subtext.Operator.Basic

-- | Element match.
elem :: Name -> (a -> Bool) -> Expr a

-- | Match any element.
any :: Expr a

-- | Match exactly the given element.
eq :: (Eq a) => a -> Expr a

-- | Match element range.
to :: (Ord a) => a -> a -> Expr a

-- | Match element in the given list.
list :: (Eq a) => [a] -> Expr a

-- | Spanning match.
span :: Name -> ([a] -> Maybe ([a], [a])) -> Expr a

-- | Match exactly the given sequence.
equal :: (Eq a) => [a] -> Expr a

-- | Inter-element match.
inter :: Name -> (Maybe a -> Maybe a -> Bool) -> Expr a

-- | Match at the beginning of sequence.
begin :: Expr a

-- | Match at the end of sequence.
end :: Expr a

-- | Match immediately.
succ :: Expr a

-- | Unmatch immediately.
fail :: Expr a

-- | Context-dependent match.
what :: Expr a

-- | Change to other matcher.
change :: Name -> Expr a


-- | Combinations and variations.
module Koshucode.Baala.Subtext.Operator.Combine

-- | Alternative match.
or :: [Expr a] -> Expr a

-- | Sequential match.
seq :: [Expr a] -> Expr a

-- | Additional condition.
and :: [Expr a] -> Expr a

-- | Inverted condition.
not :: Expr a -> Expr a

-- | Find last match.
last :: Expr a -> Expr a

-- | Any character except for given pattern.
anyNot :: Expr a -> Expr a

-- | Match but stay.
peek :: Expr a -> Expr a

-- | Turn off gathering match.
skip :: Expr a -> Expr a

-- | Turn on gathering match.
gather :: Expr a -> Expr a

-- | Named submatch.
sub :: Name -> Expr a -> Expr a

-- | Named submatch.
(#) :: Name -> Expr a -> Expr a


-- | Repetitive operators.
module Koshucode.Baala.Subtext.Operator.Repeat

-- | Repetition with lower bound.
min :: Int -> Expr a -> Expr a

-- | Repetition upper bound.
max :: Int -> Expr a -> Expr a

-- | Repetition with lower and upper bound.
minMax :: Int -> Int -> Expr a -> Expr a

-- | Match zero or more times.
many :: Expr a -> Expr a

-- | Match one or more times.
many1 :: Expr a -> Expr a

-- | Match zero or one times.
maybe :: Expr a -> Expr a

-- | Match before given expression.
before :: Expr a -> Expr a

-- | X-separated values.
sep :: Expr a -> Expr a -> Expr a


-- | Operators for text match.
module Koshucode.Baala.Subtext.Operator.Char

-- | Match some character in a list of characters.
char :: [Char] -> Expr Char

-- | Match some word in a list of words from space-separated string.
word :: String -> Expr Char

-- | Match space character.
space :: Expr Char

-- | Match zero-or-more space characters.
spaces :: Expr Char

-- | Match one-or-more space characters.
spaces1 :: Expr Char

-- | Match digit characters.
digit :: Expr Char

-- | Match letter characters.
letter :: Expr Char


-- | Match operators.
module Koshucode.Baala.Subtext.Operator


-- | Bundle of expressions.
module Koshucode.Baala.Subtext.Bundle

-- | Bundle of named expressions.
data Bundle a
Bundle :: [(Name, Expr a)] -> Expr a -> [NameDepth] -> Bundle a
[bundleExpr] :: Bundle a -> [(Name, Expr a)]
[bundleStart] :: Bundle a -> Expr a
[bundleSubmatch] :: Bundle a -> [NameDepth]

-- | Map version of expression bundle.
type BundleMap a = Map Name (Expr a)

-- | Submatch name and its depth level. Depth is incremented when entering
--   repeatable expressions. Submatch of non-zero depth is collected in
--   list.
type NameDepth = (Name, Int)

-- | Create bundle of subtext expressions.
bundle :: [(Name, Expr a)] -> Bundle a

-- | The start expression of bundle.
startExpr :: [(Name, Expr a)] -> Expr a
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Bundle.Bundle a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Bundle.Bundle a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Bundle.Bundle a)


-- | Matching parameter.
module Koshucode.Baala.Subtext.Para

-- | Matching parameter.
data Para a
Para :: BundleMap a -> [Submatch a] -> Bool -> Expr a -> Int -> [a] -> Maybe a -> [a] -> Para a

-- | Expression bundle
[paraBundle] :: Para a -> BundleMap a

-- | Submatches.
[paraRawSubs] :: Para a -> [Submatch a]

-- | Gather or skip match result
[paraGather] :: Para a -> Bool

-- | Match expression
[paraExpr] :: Para a -> Expr a

-- | Position on input sequence
[paraPos] :: Para a -> Int

-- | Input sequence
[paraInput] :: Para a -> [a]

-- | Previous element
[paraPrev] :: Para a -> Maybe a

-- | Match result
[paraRawOutput] :: Para a -> [a]

-- | Submatch result, its name and matched sequence.
type Submatch a = (Name, [a])

-- | Create matching parameter from expression bundle and input sequence.
createPara :: Bundle a -> [a] -> Para a
instance GHC.Classes.Ord a => GHC.Classes.Ord (Koshucode.Baala.Subtext.Para.Para a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Koshucode.Baala.Subtext.Para.Para a)
instance GHC.Show.Show a => GHC.Show.Show (Koshucode.Baala.Subtext.Para.Para a)


-- | Matching procedure.
module Koshucode.Baala.Subtext.Match

-- | Function from input sequence to match result. When unmatched,
--   <a>Nothing</a> is returned.
type GeneralMatch a = [a] -> Maybe (MatchResult a)

-- | Character sequence (string) version of <a>GeneralMatch</a>.
type CharMatch = GeneralMatch Char

-- | Main and submatches.
type MatchResult a = ([a], [Submatch a])

-- | Apply match expression to input sequence.
matchExpr :: (Show a) => Expr a -> GeneralMatch a

-- | Apply expression bundle to input sequence.
matchBundle :: (Show a) => Bundle a -> GeneralMatch a


-- | A text matching library.
module Koshucode.Baala.Subtext
