-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A text matching library
--   
--   Subtext provides text matching functionality with sequential,
--   alternative, and repetitive expressions. It collects submatches and
--   switch matching expression among multiple expressions.
@package koshucode-baala-subtext
@version 0.209.0.0


-- | Token for sieve pattern.
module Koshucode.Baala.Subtext.Sieve.Token

-- | Sieve token.
data SivToken t
SivText :: t -> SivToken t
SivKey :: SivKey -> SivToken t
SivOpen :: SivBracket -> SivToken t
SivClose :: SivBracket -> SivToken t

-- | Sieve bracket.
data SivBracket
SivGroup :: SivBracket
SivRepeat :: Int -> SivBracket
SivOption :: SivBracket

-- | Sieve keyword.
data SivKey

-- | <b>[ _ ]</b> Any single character.
SivAnyChar :: SivKey

-- | <b>[ * ]</b> Arbitrary-length any text.
SivAnyText :: SivKey

-- | <b>[ - ]</b> Character between two characters.
SivRange :: SivKey

-- | Convert textual value to sieve token list.
--   
--   <pre>
--   &gt;&gt;&gt; print O.&lt;#!&gt; sivTokens "foo{ba_}[0-9]baz_"
--   SivText "foo"
--   SivOpen (SivRepeat 0)
--   SivText "ba"
--   SivKey SivAnyChar
--   SivClose (SivRepeat 0)
--   SivOpen SivOption
--   SivText "0"
--   SivKey SivRange
--   SivText "9"
--   SivClose SivOption
--   SivText "baz_"
--   </pre>
sivTokens :: (Textual t) => t -> [SivToken t]
instance GHC.Classes.Ord t => GHC.Classes.Ord (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Show.Show t => GHC.Show.Show (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)
instance GHC.Classes.Ord Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Classes.Eq Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Show.Show Koshucode.Baala.Subtext.Sieve.Token.SivKey
instance GHC.Classes.Ord Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance GHC.Classes.Eq Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance GHC.Show.Show Koshucode.Baala.Subtext.Sieve.Token.SivBracket
instance Koshucode.Baala.Base.Abort.CodePos.GetCodePos (Koshucode.Baala.Subtext.Sieve.Token.SivToken t)


-- | Lower and upper bound.
module Koshucode.Baala.Subtext.MinMax

-- | Lower and upper bound.
data MinMax

-- | Lower bound and unlimited upper bound
Min :: Int -> MinMax

-- | Lower and upper bound
MinMax :: Int -> Int -> MinMax

-- | Test lower bound.
--   
--   <pre>
--   &gt;&gt;&gt; atLeast 1 $ Min 0
--   False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; atLeast 1 $ Min 1
--   True
--   </pre>
atLeast :: Int -> MinMax -> Bool

-- | Test upper bound.
atMost :: Int -> MinMax -> Bool

-- | Compose nested min-max.
--   
--   <pre>
--   &gt;&gt;&gt; MinMax 2 4 `times` MinMax 3 5
--   MinMax 6 20
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; MinMax 2 4 `times` Min 3
--   Min 6
--   </pre>
times :: MinMax -> MinMax -> MinMax
instance GHC.Classes.Ord Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Classes.Eq Koshucode.Baala.Subtext.MinMax.MinMax
instance GHC.Show.Show Koshucode.Baala.Subtext.MinMax.MinMax


-- | Subtext match expression.
module Koshucode.Baala.Subtext.Expr

-- | Subtext match expression.
data Expr a

-- | Recursive expression
ERec :: (ExprRec a) -> Expr a

-- | Non-recursive expression
EBase :: (ExprBase a) -> Expr a

-- | Recursive expression.
data ExprRec a

-- | Alternative match
EOr :: [Expr a] -> ExprRec a

-- | Sequential match
ESeq :: [Expr a] -> ExprRec a

-- | Additional condition
EAnd :: [Expr a] -> ExprRec a

-- | Inverted condition
ENot :: (Expr a) -> ExprRec a

-- | Repetitive match
ERep :: MinMax -> (Expr a) -> ExprRec a

-- | Find last match
ELast :: (Expr a) -> ExprRec a

-- | Submatch
ESub :: Name -> (Expr a) -> ExprRec a

-- | Modification matcher
EAs :: (FnAs a) -> (Expr a) -> ExprRec a

-- | Change gathering setting
EGath :: Bool -> (Expr a) -> ExprRec a

-- | Non-recursive expression.
data ExprBase a

-- | Element matcher
EElem :: (FnElem a) -> ExprBase a

-- | Spanning (multi-element) matcher
ESpan :: (FnSpan a) -> ExprBase a

-- | Inter-element matcher
EInter :: (FnInter a) -> ExprBase a

-- | Change to other expression
EChange :: Name -> ExprBase a

-- | Immediate match/unmatch
EAlways :: Bool -> ExprBase a

-- | Context-dependent match
EWhat :: ExprBase a

-- | Function type for element matcher.
type FnElem a = Fn a Bool

-- | Function type for spanning matcher.
type FnSpan a = Fn [a] (Maybe ([a], [a]))

-- | Function type for inter-element matcher.
type FnInter a = Fn2 (Maybe a) (Maybe a) Bool

-- | Function type for modification matcher.
type FnAs a = Fn [a] [a]
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.Expr a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprRec a)
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Expr.ExprBase a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Expr.ExprBase a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Expr.ExprBase a)


-- | Basic operators.
module Koshucode.Baala.Subtext.Operator.Basic

-- | Element match.
elem :: Name -> (a -> Bool) -> Expr a

-- | Match any element.
any :: Expr a

-- | Match exactly the given element.
eq :: (Eq a) => a -> Expr a

-- | Match element range.
to :: (Ord a) => a -> a -> Expr a

-- | Match element in the given list.
list :: (Eq a) => [a] -> Expr a

-- | Spanning match.
span :: Name -> ([a] -> Maybe ([a], [a])) -> Expr a

-- | Match exactly the given sequence.
equal :: (Eq a) => [a] -> Expr a

-- | Inter-element match.
inter :: Name -> (Maybe a -> Maybe a -> Bool) -> Expr a

-- | Match at the beginning of sequence.
begin :: Expr a

-- | Match at the end of sequence.
end :: Expr a

-- | Match immediately.
succ :: Expr a

-- | Unmatch immediately.
fail :: Expr a

-- | Context-dependent match.
what :: Expr a

-- | Change to other matcher.
change :: Name -> Expr a


-- | Combinations and variations.
module Koshucode.Baala.Subtext.Operator.Combine

-- | Alternative match.
or :: [Expr a] -> Expr a

-- | Sequential match.
seq :: [Expr a] -> Expr a

-- | Additional condition.
and :: [Expr a] -> Expr a

-- | Inverted condition. If expression is zero-repeatable, stirp off the
--   repeatition operator, because zero-repetition can be matched any
--   input.
not :: Expr a -> Expr a

-- | Find last match.
last :: Expr a -> Expr a

-- | Any character except for given pattern.
anyNot :: Expr a -> Expr a

-- | Match but stay.
stay :: Expr a -> Expr a

-- | Turn off gathering match.
skip :: Expr a -> Expr a

-- | Turn on gathering match.
gather :: Expr a -> Expr a

-- | Named submatch.
sub :: Name -> Expr a -> Expr a

-- | Named submatch.
(#) :: Name -> Expr a -> Expr a

-- | Match with modification.
as :: FnAs a -> Expr a -> Expr a

-- | Replace to given sequence.
asConst :: [a] -> Expr a -> Expr a

-- | Add segment to the beginning of matched sequence.
asPrepend :: [a] -> Expr a -> Expr a

-- | Add segment to the end of matched sequence.
asAppend :: [a] -> Expr a -> Expr a

-- | Add segments to the beginning and end of matched sequence.
asWrap :: [a] -> [a] -> Expr a -> Expr a


-- | Repetitive operators.
module Koshucode.Baala.Subtext.Operator.Repeat

-- | Repetition with min-max parameter.
repeat :: MinMax -> Expr a -> Expr a

-- | Extract min-max parameter.
repeatTimes :: Expr a -> Maybe MinMax

-- | Extract internal expression.
repeatExpr :: Expr a -> Maybe (Expr a)

-- | Repetition with lower bound.
min :: Int -> Expr a -> Expr a

-- | Repetition upper bound.
max :: Int -> Expr a -> Expr a

-- | Repetition with lower and upper bound.
minMax :: Int -> Int -> Expr a -> Expr a

-- | Match zero or more times.
many :: Expr a -> Expr a

-- | Match one or more times.
many1 :: Expr a -> Expr a

-- | Match zero or one times.
maybe :: Expr a -> Expr a

-- | Many of any.
anySeq :: Expr a

-- | Match before given expression.
before :: Expr a -> Expr a

-- | X-separated values.
sep :: Expr a -> Expr a -> Expr a


-- | Operators for text match.
module Koshucode.Baala.Subtext.Operator.Char

-- | Subtext expression for character input.
type CharExpr = Expr Char

-- | Match some character in a list of characters.
char :: [Char] -> CharExpr

-- | Match some word in a list of words from space-separated string.
word :: String -> CharExpr

-- | Match space character.
space :: CharExpr

-- | Match zero-or-more space characters.
spaces :: CharExpr

-- | Match one-or-more space characters.
spaces1 :: CharExpr

-- | Match digit characters.
digit :: CharExpr

-- | Match letter characters.
letter :: CharExpr

-- | Match first 128 characters of Unicode character set.
ascii :: CharExpr

-- | Match first 256 characters of Unicode character set.
latin1 :: CharExpr

-- | Test unicode general category with category set.
categorySet :: Set GeneralCategory -> CharExpr

-- | Test unicode general category with category list.
categoryList :: [GeneralCategory] -> CharExpr

-- | Test unicode general category with short names. The argument string is
--   space-separated names. If unknown name is given, returns the name in
--   <a>Left</a> data.
category :: String -> Either String CharExpr

-- | Convert matched text into lower case.
asLower :: CharExpr -> CharExpr

-- | Convert matched text into upper case.
asUpper :: CharExpr -> CharExpr


-- | Match operators.
module Koshucode.Baala.Subtext.Operator


-- | Bundle of expressions.
module Koshucode.Baala.Subtext.Bundle

-- | Bundle of named expressions.
data Bundle a
Bundle :: [(Name, Expr a)] -> Expr a -> [NameDepth] -> Bundle a
[bundleExpr] :: Bundle a -> [(Name, Expr a)]
[bundleStart] :: Bundle a -> Expr a
[bundleSubmatch] :: Bundle a -> [NameDepth]

-- | Map version of expression bundle.
type BundleMap a = Map Name (Expr a)

-- | Submatch name and its depth level. Depth is incremented when entering
--   repeatable expressions. Submatch of non-zero depth is collected in
--   list.
type NameDepth = (Name, Int)

-- | Create bundle of subtext expressions.
bundle :: [(Name, Expr a)] -> Bundle a

-- | The start expression of bundle.
startExpr :: [(Name, Expr a)] -> Expr a
instance GHC.Classes.Ord (Koshucode.Baala.Subtext.Bundle.Bundle a)
instance GHC.Classes.Eq (Koshucode.Baala.Subtext.Bundle.Bundle a)
instance GHC.Show.Show (Koshucode.Baala.Subtext.Bundle.Bundle a)


-- | Matching parameter.
module Koshucode.Baala.Subtext.Para

-- | Matching parameter.
data Para a
Para :: BundleMap a -> [Submatch a] -> Bool -> Expr a -> Int -> [a] -> Maybe a -> [a] -> Para a

-- | Expression bundle
[paraBundle] :: Para a -> BundleMap a

-- | Submatches.
[paraRawSubs] :: Para a -> [Submatch a]

-- | Gather or skip match result
[paraGather] :: Para a -> Bool

-- | Match expression
[paraExpr] :: Para a -> Expr a

-- | Position on input sequence
[paraPos] :: Para a -> Int

-- | Input sequence
[paraInput] :: Para a -> [a]

-- | Previous element
[paraPrev] :: Para a -> Maybe a

-- | Match result
[paraRawOutput] :: Para a -> [a]

-- | Submatch result, its name and matched sequence.
type Submatch a = (Name, [a])

-- | Create matching parameter from expression bundle and input sequence.
createPara :: Bundle a -> [a] -> Para a
instance GHC.Classes.Ord a => GHC.Classes.Ord (Koshucode.Baala.Subtext.Para.Para a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Koshucode.Baala.Subtext.Para.Para a)
instance GHC.Show.Show a => GHC.Show.Show (Koshucode.Baala.Subtext.Para.Para a)


-- | Matching procedure.
module Koshucode.Baala.Subtext.Match

-- | Function from input sequence to match result. When unmatched,
--   <a>Nothing</a> is returned.
type GeneralMatch a = [a] -> Maybe (MatchResult a)

-- | Character sequence (string) version of <a>GeneralMatch</a>.
type CharMatch = GeneralMatch Char

-- | Main and submatches.
type MatchResult a = ([a], [Submatch a])

-- | Apply match expression to input sequence.
matchExpr :: (Show a) => Expr a -> GeneralMatch a

-- | Apply expression bundle to input sequence.
matchBundle :: (Show a) => Bundle a -> GeneralMatch a


-- | Token tree for sieve pattern.
module Koshucode.Baala.Subtext.Sieve.Tree

-- | Sieve tree.
type SivTree t = CodeTree SivBracket SivToken t

-- | Parse sieve token list.
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ B.printTree O.# B.abortLeft (sivTrees $ S.sivTokens "foo{ba_}[0-9]baz_")
--   - SivText "foo"
--   &gt; SivRepeat 0 Just (SivOpen (SivRepeat 0), SivClose (SivRepeat 0))
--     - SivText "ba"
--     - SivKey SivAnyChar
--   &gt; SivOption Just (SivOpen SivOption, SivClose SivOption)
--     - SivText "0"
--     - SivKey SivRange
--     - SivText "9"
--   - SivText "baz_"
--   </pre>
sivTrees :: [SivToken t] -> Ab [SivTree t]

-- | Sieve expression.
type SivExpr = CharExpr

-- | Convert to sieve expression.
class ToSivExpr a
toSivExpr :: ToSivExpr a => a -> Ab SivExpr

-- | Convert to sieve expression with replacement.
toSivExprOr :: (ToSivExpr a) => SivExpr -> a -> SivExpr

-- | Test sieve pattern matches text.
--   
--   <pre>
--   &gt;&gt;&gt; sivMatch "foo(*).k" O.&lt;#&gt; ["foo.k", "foo.hs", "foobar.k", "bar.k"]
--   Right [True, True, False]
--   </pre>
sivMatch :: (ToSivExpr siv) => siv -> String -> Ab Bool

-- | Test sieve pattern matches text.
sivMatchExpr :: SivExpr -> String -> Bool
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr Koshucode.Baala.Subtext.Sieve.Tree.SivExpr
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr [Koshucode.Baala.Subtext.Sieve.Token.SivToken GHC.Base.String]
instance Koshucode.Baala.Subtext.Sieve.Tree.ToSivExpr GHC.Base.String


-- | Textual list mapping.
module Koshucode.Baala.Subtext.Sieve.Sivmap

-- | Mapping for textual lists.
data Sivmap t

-- | Identity
SivmapId :: Sivmap t

-- | Equality
SivmapEq :: t -> Sivmap t

-- | Keep by sieve pattern
SivmapKeep :: t -> SivExpr -> Sivmap t

-- | Omit by sieve pattern
SivmapOmit :: t -> SivExpr -> Sivmap t

-- | Associatoin of key and value
SivmapAssoc :: t -> t -> Sivmap t

-- | Sivmap chain
SivmapChain :: (Sivmap t) -> (Sivmap t) -> Sivmap t

-- | Identity mapping.
sivmapId :: Sivmap t

-- | Equal mapping.
sivmapEq :: t -> Sivmap t

-- | Filter by sieve pattern.
sivmapKeep :: (ToSivExpr t) => t -> Sivmap t

-- | Anti-filter by sieve pattern.
sivmapOmit :: (ToSivExpr t) => t -> Sivmap t

-- | Association mapping.
sivmapAssoc :: t -> t -> Sivmap t

-- | Mapping chain.
sivmapChain :: Bin (Sivmap t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)
instance GHC.Show.Show t => GHC.Show.Show (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)
instance GHC.Base.Monoid (Koshucode.Baala.Subtext.Sieve.Sivmap.Sivmap t)


-- | Sieve pattern.
module Koshucode.Baala.Subtext.Sieve


-- | A text matching library.
module Koshucode.Baala.Subtext
