-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Facility for implementing relation-mapping operators
--   
--   Facility for implementing relation-mapping operators
@package koshucode-baala-rop
@version 0.193.0.0


-- | Message list.
module Koshucode.Baala.Rop.Base.Message

-- | <ul>
--   <li><i>check-term failed</i></li>
--   </ul>
checkTerm :: String -> [TermName] -> Head -> Ab a

-- | <ul>
--   <li><i>Duplicate term names</i> Duplicate ... in the terms ...</li>
--   </ul>
dupTerm :: (GetTermNames t) => t -> Ab a

-- | <ul>
--   <li><i>Require new term names</i> Present ... in the terms ...</li>
--   </ul>
reqNewTerm :: (GetTermNames t) => TermPicker c -> t -> Ab a

-- | <ul>
--   <li><i>Uneven terms</i> <i>N</i> and <i>N</i> terms</li>
--   </ul>
unevenTerms :: (GetTermNames t1, GetTermNames t2) => t1 -> t2 -> Ab a

-- | <ul>
--   <li><i>Unmatch shared terms</i></li>
--   </ul>
unmatchShare :: [TermName] -> [TermName] -> Ab a

-- | <ul>
--   <li><i>Require Boolean</i></li>
--   </ul>
reqBool :: Ab a

-- | <ul>
--   <li><i>Require collection</i></li>
--   </ul>
reqCollection :: Ab a

-- | <ul>
--   <li><i>Require data interpretation</i></li>
--   </ul>
reqInterp :: Ab a

-- | <ul>
--   <li><i>Require relation</i></li>
--   </ul>
reqRel :: Ab a

-- | <ul>
--   <li><i>Require no relmaps</i></li>
--   <li><i>Require one relmap</i></li>
--   <li><i>Require <i>N</i> relmaps</i></li>
--   </ul>
reqRelmap :: Int -> Ab a

-- | <ul>
--   <li><i>Require unary function</i></li>
--   </ul>
reqUnaryFn :: Ab a

-- | <ul>
--   <li><i>Dump content expression</i></li>
--   </ul>
dumpCox :: (Show c) => c -> Ab a

-- | <ul>
--   <li><i>Dump relation</i></li>
--   </ul>
dumpRel :: (CRel c, MixEncode c) => Rel c -> Ab a

-- | <ul>
--   <li><i>Dump token trees</i></li>
--   </ul>
dumpTrees :: [Tree] -> Ab a

-- | <ul>
--   <li><i>Attribute not found</i></li>
--   </ul>
noAttr :: String -> Ab a

-- | <ul>
--   <li><i>Not implemented</i></li>
--   </ul>
notImpl :: Ab a

-- | <ul>
--   <li><i>Different headings</i> /T ..., /T ...</li>
--   </ul>
diffHead :: [Head] -> Ab a

-- | <ul>
--   <li><i>Not a nested relation</i></li>
--   </ul>
notNestRel :: (GetTermNames t) => t -> Head -> Ab a


-- | Get parameters of relmap operator.
module Koshucode.Baala.Rop.Base.Get.Get

-- | Type for getting something from relmap intermidiate data.
type RopGet a c = Intmed c  Intermediate relmap -> String  Parameter name, e.g., @\"-term\"@ -> Ab a  Parameter value

-- | Get trees from relmap parameter. This is the most basic getter because
--   relmap parameters are syntactically represented as tree list.
getTrees :: RopGet [Tree] c

-- | Get relmap parameter and convert using function.
getWith :: ([Tree] -> b) -> RopGet b c

-- | Get relmap parameter and convert using abortable function.
getWithAb :: ([Tree] -> Ab b) -> RopGet b c

-- | Get tree from relmap parameter.
getTree :: RopGet Tree c

-- | Get trees delimited by colon.
getTreesByColon :: RopGet [[Tree]] c

-- | Test usage tag.
getTag :: Intmed c -> ParaTag -> Bool

-- | Get usage tags.
getTags :: Intmed c -> [ParaTag]

-- | Get <tt>True</tt> when parameter is given, <tt>False</tt> otherwise.
getSwitch :: RopGet Bool c

-- | Get parameter whenever given or not.
getMaybe :: RopGet a c -> RopGet (Maybe a) c

-- | Get optional parameter with default value.
getOpt :: a -> RopGet a c -> RopGet a c

-- | Get word.
--   
--   <pre>
--   consXxx :: RopCons c
--   consXxx med = do
--     sign &lt;- getWord med "-sign"
--     ...
--   </pre>
getWord :: RopGet String c


-- | Attribute getters: Extract attribute from use of relmap.
module Koshucode.Baala.Rop.Base.Get.Rel

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord c) =&gt; RopCons c
--   consMeet med = do
--     m &lt;- getRelmap med "-relmap"
--     Right $ relmapMeet med m
--   </pre>
getRelmap :: RopGet (Relmap c) c

-- | Get optional relmap.
getOptRelmap :: Relmap c -> RopGet (Relmap c) c

-- | Get a term name from named attribute.
getTerm :: RopGet TermName c

-- | Get two term names.
getTerm2 :: RopGet (TermName, TermName) c

-- | Get optional term name.
getMaybeTerm :: RopGet (Maybe TermName) c

-- | Get list of term names from named attribute.
getTerms :: RopGet [TermName] c

-- | Get term names and complement sign (<tt>~</tt>) .
getTermsCo :: RopGet (Bool, [TermName]) c

-- | Get list of term-name pairs from named attribute.
getTermPairs :: RopGet [TermName2] c

-- | Get term names groups delimited by colons.
getTermsColon :: RopGet [[TermName]] c

-- | Get list of tree terms.
getTreesTerms :: RopGet [Term [Tree]] c


-- | Content expressions in relmap attributes.
module Koshucode.Baala.Rop.Base.Get.Cox

-- | Get relmap parameter as calculated content.
getContent :: (CContent c) => RopGet c c

-- | Get relmap parameter as list of calculated contents.
getContents :: (CContent c) => RopGet [c] c

-- | Get relmap parameter as filler content, i.e., given content or empty.
getFiller :: (CContent c) => RopGet c c

-- | Get decimal integer content.
getInt :: (CContent c) => RopGet DecimalInteger c

-- | Get list of content terms.
getNamedContentTerms :: (CContent c) => RopGet [Term c] c

-- | Get list of content terms.
getOptContentTerms :: (CContent c) => (TermName -> c) -> RopGet [Term c] c

-- | Get required single content expression.
getCox :: (CContent c) => RopGet (Cox c) c

-- | Get optional single content expression.
getMaybeCox :: (CContent c) => RopGet (MaybeCox c) c

-- | Get optional content expression with default content.
getOptCox :: (CContent c) => c -> RopGet (Cox c) c

-- | Get list of content expression terms. Empty terms are filled with
--   empty contents, e.g., <b>/a</b> <b>/b</b> <i>E</i> is equivalent to
--   <b>/a</b> () <b>/b</b> <i>E</i>.
getCoxTerms :: (CContent c) => RopGet [Term (Cox c)] c

-- | Get list of content expression terms. Empty terms are filled with its
--   term name. e.g., <b>/a</b> <b>/b</b> <i>E</i> is equivalent to
--   <b>/a</b> '/a <b>/b</b> <i>E</i>.
getNamedCoxTerms :: (CContent c) => RopGet [Term (Cox c)] c

-- | Get list of content expression terms. Contents of empty terms can be
--   generated using its term name.
getOptCoxTerms :: (CContent c) => (TermName -> c) -> RopGet [Term (Cox c)] c

-- | Get <tt>-where</tt> parameter as operator set.
getWhere :: (CContent c) => RopGet (CopSet c) c


-- | Definition of relmap operators.
module Koshucode.Baala.Rop.Base.Define

-- | Make implementations of relmap operators.
rops :: RopGroup -> [(RopCons c, [(AttrUsage, String)])] -> [Rop c]

-- | Add aliases of relmap operator.
ropAlias :: [(RopName, RopName)] -> Map [Rop c]

-- | New term check.
--   
--   <ul>
--   <li>Target terms are not present in input terms, e.g., abort if
--   targets are <b>/a</b> and inputs are <b>/a /b</b>.</li>
--   <li>Target terms are not duplicated, e.g., abort if targets are <b>/a
--   /a</b> and inputs are <b>/a /b</b>.</li>
--   </ul>
newCheck :: TermPicker c -> MapAb a

-- | Term presence check.
--   
--   <ul>
--   <li>Terget terms are present in input terms, e.g., abort if targets
--   are <b>/c</b> and inputs are <b>/a /b</b>.</li>
--   <li>Target terms are not duplicated, e.g., abort if targets are <b>/a
--   /a</b> and inputs are <b>/a /b</b>.</li>
--   </ul>
preCheck :: TermPicker c -> MapAb a


-- | Built-in relmap operator.
module Koshucode.Baala.Rop.Base.Rops

-- | Built-in relmap operators.
ropsBuiltin :: [Rop c]

-- | <ul>
--   <li><i>id</i> Identity relmap, i.e., output just input relation.</li>
--   </ul>
consId :: RopCons c

-- | Create <tt>id</tt> relmap.
relmapId :: Intmed c -> Relmap c

-- | <ul>
--   <li><i><i>R</i> | <i>S</i></i> Append two relmaps.</li>
--   </ul>
consAppend :: RopCons c

-- | Placeholder for unimplemented operator.
consXxx :: RopCons c


-- | Builtin relmap operator.
module Koshucode.Baala.Rop.Base
