-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relation-mapping operators with content calculations
--   
--   An impelemntation of relation-mapping operators that use term-content
--   calculations. These operators are used in the <tt>koshu</tt>
--   calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-rop-cox
@version 0.160.0.0


-- | Conversion geographic point from the plane rectangular coordinates
--   <tt>/n</tt> <tt>/x</tt> <tt>/y</tt> to the geographic coordinates
--   <tt>/latitude</tt> <tt>/longtitude</tt>. This program is based on the
--   method described in <i>Kazushige KAWASE, 2011,</i> <i>A More Concise
--   Method of Calculation for the Coordinate</i> <i>Conversion between
--   Geographic and Plane Rectangular</i> <i>Coordinates on the
--   Gauss-KruÌˆger Projection,</i> <i>Bulletin of the Geospatial
--   Information Authority of Japan, 121</i>.
module Koshucode.Baala.Rop.Cox.GeoDatumJp
type GeoPoint = (Double, Double)
convDegree :: Int -> GeoPoint -> GeoPoint
convRadian :: Int -> GeoPoint -> GeoPoint

module Koshucode.Baala.Rop.Cox.Message

module Koshucode.Baala.Rop.Cox.Get

-- | Get relmap attribute as single cox.
getCox :: (CContent c) => RopGet c (Cox c)
getMaybeCox :: (CContent c) => RopGet c (Maybe (Cox c))
getOptionCox :: (CContent c) => c -> RopGet c (Cox c)

-- | Get relmap attribute as cox list with term name.
getTermCoxes :: (CContent c) => RopGet c [NamedCox c]

-- | Get relmap attribute as cox list with name.
getNamedCoxes :: (CContent c) => RopGet c [NamedCox c]
getWhere :: (CContent c) => RopGet c (CopSet c)

-- | Get relmap attribute as calculated content.
getContent :: (CContent c) => RopGet c c

-- | Get relmap attribute as list of calculated contents.
getContents :: (CContent c) => RopGet c [c]

-- | Get relmap attribute as optional content.
getOptContent :: (CContent c) => c -> RopGet c c

-- | Get relmap attribute as filler content, i.e., given content or empty.
getFiller :: (CContent c) => RopGet c c
getInt :: (CContent c) => RopGet c DecimalInteger

module Koshucode.Baala.Rop.Cox.Range

-- | Implementation of relational operators.
ropsCoxRange :: (CContent c) => [Rop c]
type RangeAttr c = (TermName, CopSet c, Cox c, Cox c)
consRange :: (CContent c) => RopCons c
relmapRange :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relmapRangeYear :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeYear :: (CContent c) => RangeAttr c -> RelkitFlow c
relmapRangeMonth :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeMonth :: (CContent c) => RangeAttr c -> RelkitFlow c
relmapRangeDay :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeDay :: (CContent c) => RangeAttr c -> RelkitFlow c
relmapRangeHour :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeHour :: (CContent c) => RangeAttr c -> RelkitFlow c
relmapRangeMinute :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeMinute :: (CContent c) => RangeAttr c -> RelkitFlow c
relmapRangeSecond :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c
relkitRangeSecond :: (CContent c) => RangeAttr c -> RelkitFlow c

module Koshucode.Baala.Rop.Cox.Gadget

-- | Implementation of relational operators.
ropsCoxGadget :: (CContent c) => [Rop c]
consNumber :: (Ord c, CContent c) => RopCons c
relmapNumber :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c
relkitNumber :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c
consRank :: (Ord c, CContent c) => RopCons c
relmapGapRank :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c
relkitGapRank :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c
relmapDenseRank :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c
relkitDenseRank :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c
consRepeat :: (Ord c, CContent c) => RopCons c

module Koshucode.Baala.Rop.Cox.Filter

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>keep E</tt></i> Keep tuples <tt>E</tt> equals true.</li>
--   <li><i><tt>omit E</tt></i> Omit tuples <tt>E</tt> equals true.</li>
--   </ul>
ropsCoxFilter :: (CContent c) => [Rop c]
consFilter :: (CContent c) => Bool -> RopCons c
relmapFilter :: (CContent c) => Intmed c -> (Bool, CopSet c, Cox c) -> Relmap c
relkitFilter :: (CContent c) => (Bool, CopSet c, Cox c) -> RelkitFlow c
consContain :: (CContent c) => RopCons c
relmapContain :: (Eq c) => Intmed c -> c -> Relmap c
relkitContain :: (Eq c) => c -> RelkitFlow c
consOmitAll :: RopCons c
relmapOmitAll :: Intmed c -> Relmap c

module Koshucode.Baala.Rop.Cox.Empty

-- | Relmap operators that handles empties.
--   
--   <ul>
--   <li><i><tt>both R</tt></i></li>
--   <li><i><tt>maybe R</tt></i> Meet input and given relation. It keeps
--   input tuples of which counterparts are totally negated.</li>
--   </ul>
ropsCoxEmpty :: (CContent c) => [Rop c]
consBoth :: (CContent c) => RopCons c
relmapBoth :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)

-- | Construct maybe relmap.
consMaybe :: (CContent c) => RopCons c

-- | Maybe relmap.
relmapMaybe :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)

-- | Calculate maybe relmap.
relkitMaybe :: (Ord c, CRel c) => SharedTerms -> c -> RelkitBinary c

-- | Construct relmap for relational composition.
--   
--   <pre>
--   &gt;&gt;&gt; a | compose-maybe b
--   </pre>
consComposeMaybe :: (CContent c) => RopCons c

-- | Relational composition.
relmapComposeMaybe :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)

module Koshucode.Baala.Rop.Cox.Calc

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>add /N E ...</tt></i> Add terms of name <tt>/N</tt> and
--   content <tt>E</tt> ...</li>
--   </ul>
ropsCoxCalc :: (CContent c) => [Rop c]
consAdd :: (CContent c) => RopCons c
relmapAdd :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
consSubst :: (CContent c) => RopCons c
relmapSubst :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
consFill :: (CContent c) => RopCons c
relmapFill :: (CContent c) => Intmed c -> ([TermName], CopSet c, Cox c) -> Relmap c
consReplace :: (CContent c) => RopCons c
consReplaceAll :: (CContent c) => RopCons c
relmapReplaceAll :: (CContent c) => Intmed c -> (CopSet c, Cox c, Cox c) -> Relmap c
consSplit :: (CContent c) => RopCons c
relmapSplit :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
relkitSplit :: (CContent c) => (CopSet c, [NamedCox c]) -> RelkitFlow c
consUnary :: (CContent c) => RopCons c
relmapUnary :: (CContent c) => Intmed c -> (TermName, [c]) -> Relmap c

module Koshucode.Baala.Rop.Cox.Accessor

-- | Implementation of relational operators.
ropsCoxAccessor :: (CContent c) => [Rop c]
relmapClock :: (CContent c) => Intmed c -> (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> Relmap c
relkitClock :: (CContent c) => (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> RelkitFlow c
relmapClockGet :: (CContent c) => Intmed c -> (CopSet c, Cox c, [Maybe TermName]) -> Relmap c
relkitClockGet :: (CContent c) => (CopSet c, Cox c, [Maybe TermName]) -> RelkitFlow c
relmapClockAlter :: (CContent c) => Intmed c -> (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> Relmap c
relkitClockAlter :: (CContent c) => (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> RelkitFlow c

module Koshucode.Baala.Rop.Cox.Bundle
ropsCox :: (CContent c) => [Rop c]


-- | Operators in Koshucode.
module Koshucode.Baala.Rop.Cox
