-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relation-mapping operators with content calculations
--   
--   An impelemntation of relation-mapping operators that use term-content
--   calculations. These operators are used in the <tt>koshu</tt>
--   calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-rop-cox
@version 0.168.0.0


-- | Conversion geographic point from the plane rectangular coordinates
--   <tt>/n</tt> <tt>/x</tt> <tt>/y</tt> to the geographic coordinates
--   <tt>/latitude</tt> <tt>/longtitude</tt>. This program is based on the
--   method described in <i>Kazushige KAWASE, 2011,</i> <i>A More Concise
--   Method of Calculation for the Coordinate</i> <i>Conversion between
--   Geographic and Plane Rectangular</i> <i>Coordinates on the
--   Gauss-KruÌˆger Projection,</i> <i>Bulletin of the Geospatial
--   Information Authority of Japan, 121</i>.
module Koshucode.Baala.Rop.Cox.GeoDatumJp
type GeoPoint = (Double, Double)
convDegree :: Int -> GeoPoint -> GeoPoint
convRadian :: Int -> GeoPoint -> GeoPoint


-- | Message list.
module Koshucode.Baala.Rop.Cox.Message

module Koshucode.Baala.Rop.Cox.Get

-- | Get relmap attribute as single cox.
getCox :: (CContent c) => RopGet c (Cox c)
getMaybeCox :: (CContent c) => RopGet c (Maybe (Cox c))
getOptionCox :: (CContent c) => c -> RopGet c (Cox c)

-- | Get relmap attribute as cox list with term name.
getTermCoxes :: (CContent c) => RopGet c [NamedCox c]

-- | Get relmap attribute as cox list with name.
getNamedCoxes :: (CContent c) => RopGet c [NamedCox c]
getWhere :: (CContent c) => RopGet c (CopSet c)

-- | Get relmap attribute as calculated content.
getContent :: (CContent c) => RopGet c c

-- | Get relmap attribute as list of calculated contents.
getContents :: (CContent c) => RopGet c [c]

-- | Get relmap attribute as optional content.
getOptContent :: (CContent c) => c -> RopGet c c

-- | Get relmap attribute as filler content, i.e., given content or empty.
getFiller :: (CContent c) => RopGet c c
getInt :: (CContent c) => RopGet c DecimalInteger


-- | Generate range of contents.
module Koshucode.Baala.Rop.Cox.Range

-- | Implementation of relational operators.
ropsCoxRange :: (CContent c) => [Rop c]

-- | Attribute for range operators.
type RangeAttr c = (TermName, CopSet c, Cox c, Cox c)

-- | <b>range /N -from E -to E</b>
consRange :: (CContent c) => RopCons c

-- | Create <tt>range</tt> relmap.
relmapRange :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-year</tt> relmap.
relmapRangeYear :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-year</tt> relkit.
relkitRangeYear :: (CContent c) => RangeAttr c -> RelkitFlow c

-- | Create <tt>range-month</tt> relmap.
relmapRangeMonth :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-month</tt> relkit.
relkitRangeMonth :: (CContent c) => RangeAttr c -> RelkitFlow c

-- | Create <tt>range-day</tt> relmap.
relmapRangeDay :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-day</tt> relkit.
relkitRangeDay :: (CContent c) => RangeAttr c -> RelkitFlow c

-- | Create <tt>range-hour</tt> relmap.
relmapRangeHour :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-hour</tt> relkit.
relkitRangeHour :: (CContent c) => RangeAttr c -> RelkitFlow c

-- | Create <tt>range-minute</tt> relmap.
relmapRangeMinute :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-minute</tt> relkit.
relkitRangeMinute :: (CContent c) => RangeAttr c -> RelkitFlow c

-- | Create <tt>range-second</tt> relmap.
relmapRangeSecond :: (CContent c) => Intmed c -> RangeAttr c -> Relmap c

-- | Create <tt>range-second</tt> relkit.
relkitRangeSecond :: (CContent c) => RangeAttr c -> RelkitFlow c


-- | Gadgets with content calculation.
module Koshucode.Baala.Rop.Cox.Gadget

-- | Implementation of relational operators.
ropsCoxGadget :: (CContent c) => [Rop c]

-- | <b>const E</b>
--   
--   Output the constant relation E. Especially, <tt>const {= [] =}</tt> is
--   equivalent to <tt>dee</tt>, <tt>const {= =}</tt> is equivalent to
--   <tt>dum</tt>.
consConst :: (CContent c) => RopCons c

-- | Create <tt>const</tt> relmap.
relmapConst :: Intmed c -> Rel c -> Relmap c

-- | Create <tt>const</tt> relkit.
relkitConst :: Rel c -> RelkitFlow c

-- | <b>number /N -from I -order /P ...</b>
consNumber :: (Ord c, CContent c) => RopCons c

-- | Create <tt>number</tt> relmap.
relmapNumber :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c

-- | Create <tt>number</tt> relkit.
relkitNumber :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c

-- | <ul>
--   <li><i>rank /N -from I -order /P ...</i> Calculate standard
--   competition ranking (like 1224).</li>
--   <li><i>rank /N -dense -from I -order /P...</i> Calculate dense ranking
--   (like 1223).</li>
--   </ul>
consRank :: (Ord c, CContent c) => RopCons c

-- | Create <tt>rank</tt> relmap.
relmapGapRank :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c

-- | Create <tt>rank</tt> relkit.
relkitGapRank :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c

-- | Create <tt>rank -dense</tt> relmap.
relmapDenseRank :: (CDec c, Ord c) => Intmed c -> (TermName, [SignedTermName], Int) -> Relmap c

-- | Create <tt>rank -dense</tt> relkit.
relkitDenseRank :: (Ord c, CDec c) => (TermName, [SignedTermName], Int) -> RelkitFlow c

-- | <b>repeat I R</b>
consRepeat :: (Ord c, CContent c) => RopCons c


-- | Relation filter.
module Koshucode.Baala.Rop.Cox.Filter

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>keep E</tt></i> Keep tuples <tt>E</tt> equals true.</li>
--   <li><i><tt>omit E</tt></i> Omit tuples <tt>E</tt> equals true.</li>
--   </ul>
ropsCoxFilter :: (CContent c) => [Rop c]

-- | <ul>
--   <li><i>keep E</i> Keep tuples which expression E is true.</li>
--   <li><i>omit E</i> Omit tuples which expression E is true. <tt>omit
--   E</tt> is equivalent to <tt>keep not E</tt>.</li>
--   </ul>
consFilter :: (CContent c) => Bool -> RopCons c

-- | Create <tt>keep</tt> and <tt>omit</tt> relmap.
relmapFilter :: (CContent c) => Intmed c -> (Bool, CopSet c, Cox c) -> Relmap c

-- | Create <tt>keep</tt> and <tt>omit</tt> relkit.
relkitFilter :: (CContent c) => (Bool, CopSet c, Cox c) -> RelkitFlow c

-- | <b>contain E</b>
--   
--   Keep tuples in which some terms has content E.
consContain :: (CContent c) => RopCons c

-- | Create <tt>contain</tt> relmap.
relmapContain :: (Eq c) => Intmed c -> c -> Relmap c

-- | Create <tt>contain</tt> relkit.
relkitContain :: (Eq c) => c -> RelkitFlow c

-- | <b>omit-all</b>
--   
--   Throw away all tuples.
consOmitAll :: RopCons c

-- | Create <tt>omit-all</tt> relmap.
relmapOmitAll :: Intmed c -> Relmap c


-- | Relational compositions whose contents are maybe the empty.
module Koshucode.Baala.Rop.Cox.Empty

-- | Relmap operators that handles empties.
--   
--   <ul>
--   <li><i><tt>both R</tt></i></li>
--   <li><i><tt>maybe R</tt></i> Meet input and given relation. It keeps
--   input tuples of which counterparts are totally negated.</li>
--   </ul>
ropsCoxEmpty :: (CContent c) => [Rop c]

-- | <b>both R -share /P ... -fill E</b>
consBoth :: (CContent c) => RopCons c

-- | Create <tt>both</tt> relmap.
relmapBoth :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)

-- | Construct maybe relmap.
consMaybe :: (CContent c) => RopCons c

-- | Create <tt>maybe</tt> relmap.
relmapMaybe :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)

-- | Create <tt>maybe</tt> relkit.
relkitMaybe :: (Ord c, CRel c) => SharedTerms -> c -> RelkitBinary c

-- | <b>compose-maybe</b>
consComposeMaybe :: (CContent c) => RopCons c

-- | Create <tt>compose-maybe</tt> relmap.
relmapComposeMaybe :: (Ord c, CRel c) => Intmed c -> SharedTerms -> c -> Map (Relmap c)


-- | Relmap operator with content calculation.
module Koshucode.Baala.Rop.Cox.Calc

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>add /N E ...</tt></i> Add terms of name <tt>/N</tt> and
--   content <tt>E</tt> ...</li>
--   </ul>
ropsCoxCalc :: (CContent c) => [Rop c]

-- | <b>add /N E ...</b>
--   
--   Add new terms /N which has the result of E.
consAdd :: (CContent c) => RopCons c

-- | Create <tt>add</tt> relmap.
relmapAdd :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c

-- | <b>alt /P E ...</b>
--   
--   Change present terms /P whose content is altered to the result of E.
consAlt :: (CContent c) => RopCons c

-- | Create <tt>alt</tt> relmap.
relmapAlt :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c

-- | <b>fill /P ... -with E</b>
--   
--   Fill terms /P ... with the result of E.
consFill :: (CContent c) => RopCons c

-- | Create <tt>fill</tt> relmap.
relmapFill :: (CContent c) => Intmed c -> ([TermName], CopSet c, Cox c) -> Relmap c

-- | <b>map /P ... -by F</b>
consReplace :: (CContent c) => RopCons c

-- | <b>replace-all -from E -to E</b>
consReplaceAll :: (CContent c) => RopCons c

-- | Create <tt>replace-all</tt> relmap.
relmapReplaceAll :: (CContent c) => Intmed c -> (CopSet c, Cox c, Cox c) -> Relmap c

-- | <b>split /N E ...</b>
--   
--   Split input relation by the boolean functions E ..., and add terms /N
--   ... which has the splitted relations.
consSplit :: (CContent c) => RopCons c

-- | Create <tt>split</tt> relmap.
relmapSplit :: (CContent c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c

-- | Create <tt>split</tt> relkit.
relkitSplit :: (CContent c) => (CopSet c, [NamedCox c]) -> RelkitFlow c

-- | <b>unary /N E : ...</b>
consUnary :: (CContent c) => RopCons c

-- | Create <tt>unary</tt> relmap.
relmapUnary :: (CContent c) => Intmed c -> (TermName, [c]) -> Relmap c


-- | Accessor relmap operators.
module Koshucode.Baala.Rop.Cox.Accessor

-- | Implementation of relational operators.
ropsCoxAccessor :: (CContent c) => [Rop c]

-- | Create <tt>clock</tt> relmap.
relmapClock :: (CContent c) => Intmed c -> (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> Relmap c

-- | Create <tt>clock</tt> relkit.
relkitClock :: (CContent c) => (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> RelkitFlow c

-- | Create <tt>clock-get</tt> relmap.
relmapClockGet :: (CContent c) => Intmed c -> (CopSet c, Cox c, [Maybe TermName]) -> Relmap c

-- | Create <tt>clock-get</tt> relkit.
relkitClockGet :: (CContent c) => (CopSet c, Cox c, [Maybe TermName]) -> RelkitFlow c

-- | Create <tt>clock-alter</tt> relmap.
relmapClockAlter :: (CContent c) => Intmed c -> (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> Relmap c

-- | Create <tt>clock-alter</tt> relkit.
relkitClockAlter :: (CContent c) => (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> RelkitFlow c


-- | Relational operators with content calculation.
module Koshucode.Baala.Rop.Cox.Bundle

-- | Relational operators with content calculation.
ropsCox :: (CContent c) => [Rop c]


-- | Operators in Koshucode.
module Koshucode.Baala.Rop.Cox
