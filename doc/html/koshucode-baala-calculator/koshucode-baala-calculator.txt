-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A portable relational calculator
--   
--   This is a portable relational calculator. Relational data and
--   calculations are written in koshucode. This packages contains
--   <a>koshu</a> command. <a>koshu</a> reads koshucode data, calculates
--   it, and writes the result.
@package koshucode-baala-calculator
@version 0.118.0.0

module Koshucode.Baala.Toolkit.Library.Version
version :: Version
versionString :: String


-- | Simple functions for parsing command-line options. This module is
--   based on <a>System.Console.GetOpt</a>.
module Koshucode.Baala.Toolkit.Library.SimpleOption

-- | Single letter options, like <tt>h</tt> of <tt>-h</tt>.
type ShortOption = Char

-- | Long name options, like <tt>help</tt> of <tt>--help</tt>.
type LongOption = String

-- | Simple option.
type SimpleOption = SimpleOption' LongOption

-- | Option list of simple option descriptions.
type SimpleOptions = [SimpleOptionDescr]
type SimpleOptionDescr = OptDescr SimpleOption
data SimpleOption' a

-- | Describe option for flag (switch) type.
flag :: [ShortOption] -> [LongOption] -> String -> SimpleOptionDescr

-- | Describe option with optional one parameter.
opt :: [ShortOption] -> [LongOption] -> String -> String -> SimpleOptionDescr

-- | Describe option with required one parameter.
req :: [ShortOption] -> [LongOption] -> String -> String -> SimpleOptionDescr

-- | Get flag of flag-type option.
getFlag :: [SimpleOption] -> LongOption -> Bool

-- | Get parameter list of opt-type option.
getOpt :: [SimpleOption] -> LongOption -> [String]

-- | Get parameter list of req-type option.
getReq :: [SimpleOption] -> LongOption -> [String]

-- | Predefined <tt>-h</tt> or <tt>--help</tt> option.
help :: SimpleOptionDescr

-- | Predefined <tt>-V</tt> or <tt>--version</tt> option.
version :: SimpleOptionDescr

-- | Print help message.
printHelp :: [String] -> SimpleOptions -> IO ()
helpMessage :: [String] -> SimpleOptions -> String

-- | Provides one possible concrete representation for <a>Version</a>. For
--   a version with <a>versionBranch</a> <tt>= [1,2,3]</tt> and
--   <a>versionTags</a> <tt>= ["tag1","tag2"]</tt>, the output will be
--   <tt>1.2.3-tag1-tag2</tt>.
showVersion :: Version -> String

-- | Result of parsing command-line parameters, consist of (1) error
--   message or (2) options and non-option parameters.
type ParseResult' opt = Either [String] ([opt], [String])

-- | String-type parse result.
type ParseResult = ParseResult' SimpleOption

-- | Parse parameters.
parse :: SimpleOptions -> [String] -> ParseResult

-- | Parse command-line parameters.
parseCommand :: SimpleOptions -> IO ParseResult
instance Show a => Show (SimpleOption' a)
instance Eq a => Eq (SimpleOption' a)
instance Ord a => Ord (SimpleOption' a)

module Koshucode.Baala.Toolkit.Library.Run

-- | Read and union sections from files, and run the section.
runFiles :: (CContent c, ToJSON c) => Global c -> [IOPoint] -> IO ExitCode
getProxies :: IO [(String, Maybe String)]
theContent :: CContent c => String -> [Named c] -> Maybe c

module Koshucode.Baala.Toolkit.Library.Exit
prelude :: IO (String, [String])

-- | Print message and exit on 0.
putSuccess :: String -> IO a

-- | Print error message and exit on 1.
putFailure :: String -> IO a
currentEncodings :: IO String
exit :: Int -> IO a


-- | Koshu filter program.
module Koshucode.Baala.Toolkit.Main.KoshuFilter
koshuFilter :: CContent c => Global c -> (Resource c -> IO Int) -> IO Int
instance Show Option
instance Eq Option

module Koshucode.Baala.Toolkit.Library.Element

-- | Retrive constituents of sections.
resourceElem :: CContent c => Resource c -> [Judge c]


-- | A portable relational calculator.
module Koshucode.Baala.Toolkit.Main.KoshuMain

-- | The main function for <tt>koshu</tt> command. See <a>vanillaRops</a>
--   for default argument.
koshuMain :: (CContent c, ToJSON c) => Global c -> IO ExitCode
instance Show (Param c)
