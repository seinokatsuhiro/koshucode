-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A notational system for relational model
--   
--   Koshucode is a notation for people and computers who read, write, and
--   calculate relational data. This library provides functions for
--   handling koshucode on computers.
@package koshucode-baala-core
@version 0.32.0.0

module Koshucode.Baala.Core.Section.Clausify
data ClauseSource
ClauseSource :: [Token] -> [CodeLine] -> ClauseSource

-- | Source tokens of clause
clauseTokens :: ClauseSource -> [Token]

-- | Source lines of clause
clauseLines :: ClauseSource -> [CodeLine]

-- | Convert token list into list of token clauses
clausify :: [CodeLine] -> [ClauseSource]

-- | Split operand into named group. Non quoted words beginning with
--   hyphen, e.g., <tt>-x</tt>, are name of group.
--   
--   <pre>
--   &gt;&gt;&gt; operandGroup $ tokenTrees $ tokens "a b -x c 'd' -y e"
--   [("",   [TreeL (Word 0 "a"), TreeL (Word 0 "b")]),
--    ("-x", [TreeL (Word 0 "c"), TreeL (Word 1 "d")]),
--    ("-y", [TreeL (Word 0 "e")])]
--   </pre>
operandGroup :: [TokenTree] -> [Named [TokenTree]]
instance Typeable ClauseSource
instance Show ClauseSource
instance Data ClauseSource

module Koshucode.Baala.Core.Relmap.HalfRelmap

-- | Intermediate data that represents use of relational operator.
--   
--   <a>HalfRelmap</a> is constructed from list of <a>TokenTree</a>, and
--   (full) <tt>Relmap</tt> is constructed from <a>HalfRelmap</a>.
data HalfRelmap
HalfRelmap :: [String] -> [CodeLine] -> String -> [Named [TokenTree]] -> [HalfRelmap] -> HalfRelmap

-- | Usages description
halfUsage :: HalfRelmap -> [String]

-- | Source information
halfLines :: HalfRelmap -> [CodeLine]

-- | Operator name of relmap operation
halfOperator :: HalfRelmap -> String

-- | Operand of relmap operation
halfOperand :: HalfRelmap -> [Named [TokenTree]]

-- | Subrelmaps in the operand
halfSubmap :: HalfRelmap -> [HalfRelmap]
instance Typeable HalfRelmap
instance Show HalfRelmap
instance Data HalfRelmap
instance Pretty HalfRelmap


-- | Data structures for relation-to-relation mappings
module Koshucode.Baala.Core.Relmap.Relmap

-- | Relation-to-relation mapping. A <a>Relmap</a> is correspond to a use
--   of relational operator.
data Relmap v

-- | Retrieve a relation from a dataset
RelmapSource :: HalfRelmap -> String -> [String] -> Relmap v

-- | Constant relation
RelmapConst :: HalfRelmap -> String -> (Rel v) -> Relmap v

-- | Equavalent relmap
RelmapAlias :: HalfRelmap -> (Relmap v) -> Relmap v

-- | Relmap that maps relations to a relation
RelmapCalc :: HalfRelmap -> String -> (RelmapSub v) -> [Relmap v] -> Relmap v

-- | Connect two relmaps
RelmapAppend :: (Relmap v) -> (Relmap v) -> Relmap v

-- | Relmap reference
RelmapName :: HalfRelmap -> String -> Relmap v

-- | Function of relmap.
type RelmapSub v = [Rel v] -> Rel v -> AbOr (Rel v)

-- | List of <a>RelmapSource</a>
relmapSourceList :: Relmap v -> [Relmap v]

-- | List of name in <a>RelmapName</a>
relmapNameList :: Relmap v -> [String]

-- | Expand <a>RelmapAppend</a> to list of <a>Relmap</a>
relmapAppendList :: Relmap v -> [Relmap v]

-- | Link relmaps by its name.
relmapLinker :: [Named (Relmap v)] -> Relmap v -> Relmap v
instance Pretty (Relmap v)
instance Name (Relmap v)
instance Monoid (Relmap v)
instance Show (Relmap v)


-- | Data structure for mapping relation to judges
module Koshucode.Baala.Core.Relmap.Assert

-- | Assertion of affirming or denying relation. It consists of logical
--   quality, relsign, and relmap.
--   
--   See also <a>Judge</a>
data Assert v
Assert :: Bool -> Relsign -> Relmap v -> Assert v

-- | Logical quality
assertQuality :: Assert v -> Bool

-- | Sign of relation
assertRelsign :: Assert v -> Relsign

-- | Relmap
assertRelmap :: Assert v -> Relmap v

-- | Apply function to relamp in assert.
assertMap :: Map (Relmap v) -> Map (Assert v)

-- | Make affirmed assertion.
affirm :: Relsign -> Relmap v -> Assert v

-- | Make denied assertion.
deny :: Relsign -> Relmap v -> Assert v
instance Show (Assert v)
instance Pretty (Assert v)

module Koshucode.Baala.Core.Relmap.Implement

-- | Implementation of relmap operator.
data Rop c
Rop :: String -> String -> RopParser -> RopCons c -> [String] -> Rop c

-- | Operator name
ropName :: Rop c -> String

-- | Operator group
ropGroup :: Rop c -> String

-- | Operand parser
ropParser :: Rop c -> RopParser

-- | Constructor of operator
ropCons :: Rop c -> RopCons c

-- | Usage of operator
ropUsage :: Rop c -> [String]

-- | Parser for operand of relational operator. This parsers docompose
--   operand trees, and give a name to suboperand.
type RopParser = [TokenTree] -> [Named [TokenTree]]
type RopParser' = [Named [TokenTree]] -> [Named [TokenTree]]

-- | Constructor of relational operator <a>Relmap</a>. <a>Relmap</a> is
--   constructed from <a>HalfRelmap</a> and subrelmaps in it.
type RopCons c = RopUse c -> AbortOr (Relmap c)

-- | Use of operator
data RopUse c
RopUse :: HalfRelmap -> [Relmap c] -> RopUse c

-- | Syntactic data of operator use
ropHalf :: RopUse c -> HalfRelmap

-- | Subrelmaps
ropSubmap :: RopUse c -> [Relmap c]

-- | Retrieve relation from dataset.
relmapSource :: RopUse c -> String -> [String] -> (Relmap c)

-- | Constant relmap.
relmapConst :: RopUse c -> String -> Rel c -> Relmap c

-- | Alias relmap.
relmapAlias :: RopUse c -> Relmap c -> Relmap c

-- | Make a non-confluent relmap.
relmapCalc :: RopUse c -> String -> RelmapSub c -> Relmap c

-- | Make a confluent relmap.
relmapConfl :: RopUse c -> String -> RelmapSub c -> [Relmap c] -> Relmap c
instance Show (RopUse c)


-- | <a>Relmap</a> construction.
module Koshucode.Baala.Core.Relmap.Construct

-- | Make half and full relmap constructors.
relmapCons :: [Rop c] -> (RelmapCons c)

-- | Half and full relmap constructor
data RelmapCons c
RelmapCons :: RelmapHalfCons -> RelmapFullCons c -> RelmapCons c
consHalf :: RelmapCons c -> RelmapHalfCons
consFull :: RelmapCons c -> RelmapFullCons c

-- | First step of constructing relmap, make <a>HalfRelmap</a> from use of
--   relational operator.
type RelmapHalfCons = [CodeLine] -> [TokenTree] -> HalfRelmap

-- | Second step of constructing relmap, make <a>Relmap</a> from contents
--   of <a>HalfRelmap</a>.
type RelmapFullCons c = HalfRelmap -> AbortOr (Relmap c)
instance Show (RelmapCons c)


-- | Term calcutation.
module Koshucode.Baala.Core.Content.Operator

-- | Content expressions.
data Cox c

-- | Literal content.
CoxLit :: c -> Cox c

-- | Operator invocation.
CoxApp :: (Cop c) -> [Cox c] -> Cox c

-- | Term reference. Term names <tt>[String]</tt> and positions
--   <tt>[Int]</tt>. <tt>formCox</tt> makes positions empty,
--   <tt>posCox</tt> fills it.
CoxTerm :: [String] -> [Int] -> Cox c

-- | Term content operator.
data Cop c
CopLit :: String -> (CopLitF c) -> Cop c
CopLazy :: String -> (CopLazyF c) -> Cop c
CopEager :: String -> (CopEagerF c) -> Cop c
type CopLitF c = [TokenTree] -> AbOr c
type CopLazyF c = [Cox c] -> AbOr c
type CopEagerF c = [c] -> AbOr c

-- | Type for finding term content operator.
type FindCop c = String -> Maybe (Cop c)
namedLit :: String -> CopLitF c -> (String, Cop c)
namedEager :: String -> CopEagerF c -> (String, Cop c)
namedLazy :: String -> CopLazyF c -> (String, Cop c)
instance Show c => Show (Cox c)
instance Show (Cop c)

module Koshucode.Baala.Core.Content.Decimal

-- | Make <tt>a</tt> from a string.
type LitString a = AbMap2 String a
type LitDecimal = LitString (Int, Int, Bool)
litDecimal :: LitDecimal

module Koshucode.Baala.Core.Content.Class
class PrimContent c
class (Ord c, Pretty c, CBool c, CText c, CInt c, CList c, CNil c, CSet c, CTermset c, CRel c) => CContent c where joinContent = foldr appendContent nil typename c | isBool c = "boolean" | isText c = "text" | isInt c = "int" | isList c = "list" | isNil c = "nil" | isSet c = "set" | isTermset c = "termset" | isRel c = "relation" | otherwise = "unknown"
appendContent :: CContent c => c -> c -> c
joinContent :: CContent c => [c] -> c
typename :: CContent c => c -> String

-- | Delete empty list (<a>null</a>) from content list.
nonNullFilter :: Map [[a]]

-- | Delete <a>nil</a> from content list.
nonNilFilter :: CNil c => Map [c]
class PrimContent c => CBool c
putBool :: CBool c => Bool -> c
getBool :: CBool c => c -> Bool
isBool :: CBool c => c -> Bool
class PrimContent c => CInt c
putInt :: CInt c => Int -> c
getInt :: CInt c => c -> Int
isInt :: CInt c => c -> Bool
class PrimContent c => CText c
putText :: CText c => String -> c
getText :: CText c => c -> String
isText :: CText c => c -> Bool
class PrimContent c => CList c
putList :: CList c => [c] -> c
getList :: CList c => c -> [c]
isList :: CList c => c -> Bool

-- | Types that can be nil
class PrimContent c => CNil c
nil :: CNil c => c
isNil :: CNil c => c -> Bool
class PrimContent c => CSet c
putSet :: CSet c => [c] -> c
getSet :: CSet c => c -> [c]
isSet :: CSet c => c -> Bool
class PrimContent c => CTermset c
putTermset :: CTermset c => [Named c] -> c
getTermset :: CTermset c => c -> [Named c]
isTermset :: CTermset c => c -> Bool
class PrimContent c => CRel c
putRel :: CRel c => Rel c -> c
getRel :: CRel c => c -> Rel c
isRel :: CRel c => c -> Bool


-- | Literalizer: Make literal contents from token tree.
module Koshucode.Baala.Core.Content.Literalize

-- | Make <tt>a</tt> from list of token trees.
type LitTrees a = AbMap2 [TokenTree] a

-- | Make <tt>a</tt> from a token tree.
type LitTree a = AbMap2 TokenTree a
type LitOperators c = [Named (LitTree c -> LitTrees c)]

-- | Transform <a>TokenTree</a> into internal form of term content.
litContentBy :: CContent c => LitOperators c -> LitTree c

-- | Collect term name and content.
litTermset :: CContent c => LitTree c -> LitTrees [Named c]


-- | Literalizer: Make literal contents from token tree.
module Koshucode.Baala.Core.Content.Extension
litContent :: CContent c => LitTree c
litOperators :: CContent c => LitOperators c
litJudge :: CContent c => Bool -> Relsign -> LitTrees (Judge c)


-- | Term calcutation.
module Koshucode.Baala.Core.Content.Expression

-- | Construct content expression.
formCox :: CContent c => FindCop c -> TokenTree -> AbOr (Cox c)
type PosCox c = Relhead -> AbOr (Cox c)

-- | Put term positions for actural heading.
posCox :: Cox c -> PosCox c

-- | Calculate content expression.
runCox :: (CList c, CRel c) => [c] -> Cox c -> AbOr c
runCoxH :: (CRel c, CList c) => Relhead -> [c] -> (PosCox c) -> AbOr c


-- | Content
module Koshucode.Baala.Core.Content


-- | Dataset as a set of judges.
--   
--   Dataset is like a bridge of judges and relations. We can get a
--   relation from a dataset, that dataset is build from judges.
module Koshucode.Baala.Core.Relmap.Dataset

-- | Dataset is a set of judges.
data Dataset v

-- | Dataset that has no judges
emptyDataset :: Dataset v

-- | Gather judges into a dataset
dataset :: [Judge v] -> Dataset v

-- | Add judges to dataset.
addJudges :: [Judge v] -> Dataset v -> Dataset v

-- | Select relation from dataset. If a giving term is not in judges,
--   <a>CNil</a> sign is used.
selectRelation :: (Ord v, CNil v) => Dataset v -> Relsign -> [String] -> Rel v


-- | Running relational calculation.
module Koshucode.Baala.Core.Relmap.Run

-- | Calculate assertion list.
runAssertJudges :: (Ord v, CNil v) => [Assert v] -> [Judge v] -> AbortOr [Judge v]

-- | Calculate assertion list.
runAssertDataset :: (Ord v, CNil v) => [Assert v] -> Dataset v -> AbortOr [Judge v]


-- | Relation-to-relation mapping.
module Koshucode.Baala.Core.Relmap


-- | Data structure for relational calculations. There are three types of
--   section: (1) <i>editing sections</i> that output judges and read other
--   sections, (2) <i>library sections</i> that make relmaps reusable, (3)
--   <i>data sections</i> that provide data.
module Koshucode.Baala.Core.Section.Section
data Section v
Section :: Maybe String -> [Section v] -> [String] -> [Assert v] -> [Named (Relmap v)] -> [Judge v] -> RelmapCons v -> Section v

-- | Section name
sectionName :: Section v -> Maybe String

-- | Importing section
sectionImport :: Section v -> [Section v]

-- | Exporting relmap names
sectionExport :: Section v -> [String]

-- | Assertions of relmaps
sectionAssert :: Section v -> [Assert v]

-- | Relmaps and its name
sectionRelmap :: Section v -> [Named (Relmap v)]

-- | Here data
sectionJudge :: Section v -> [Judge v]

-- | Readers and writers for this section
sectionCons :: Section v -> RelmapCons v

-- | Select assertions like <a>sectionAssert</a>. It returns relmap-liked
--   assertions. We can run these assertions using <a>runAssertJudges</a>.
sectionLinkedAssert :: Section v -> [Assert v]

-- | Section that has no contents.
makeEmptySection :: RelmapCons v -> Section v

-- | Section that has no contents.
emptySection :: Section v

-- | Section that has only here data.
dataSection :: [Judge v] -> Section v
instance Show v => Show (Section v)
instance (Ord v, Pretty v) => Pretty (Section v)

module Koshucode.Baala.Core.Section.SectionUnion
sectionUnion :: Section v -> Section v -> Section v
sectionUse :: Section v -> Section v -> Section v
instance Monoid (Section v)


-- | Intermidiate structure between <a>String</a> and <a>Section</a>.
module Koshucode.Baala.Core.Section.Clause
data Clause

-- | Section name
CSection :: ClauseSource -> (Maybe String) -> Clause

-- | Importing section name
CImport :: ClauseSource -> [Token] -> (Maybe Clause) -> Clause

-- | Exporting relmap name
CExport :: ClauseSource -> String -> Clause

-- | Relmap and its name
CRelmap :: ClauseSource -> String -> HalfRelmap -> Clause

-- | Not include HalfRelmap
TRelmap :: ClauseSource -> String -> [TokenTree] -> Clause

-- | Assertions of relmaps
CAssert :: ClauseSource -> Bool -> String -> HalfRelmap -> Clause

-- | Not include HalfRelmap
TAssert :: ClauseSource -> Bool -> String -> [TokenTree] -> Clause

-- | Judge
CJudge :: ClauseSource -> Bool -> String -> [Token] -> Clause

-- | Caluse comment
CComment :: ClauseSource -> Clause

-- | Unknown clause
CUnknown :: ClauseSource -> Clause

-- | Name of clause type. e.g., <tt>"Relmap"</tt>, <tt>"Assert"</tt>.
clauseTypeText :: Clause -> String

-- | Source code information of clause.
clauseSource :: Clause -> ClauseSource

-- | Convert token list into clause list. Result clause list does not
--   contain <a>CRelmap</a> and <a>CAssert</a>. Instead of them,
--   <a>TRelmap</a> and <a>TAssert</a> are contained. This function does
--   not depend on <a>RelmapHalfCons</a>.
--   
--   <pre>
--   &gt;&gt;&gt; consPreclause $ tokens "a : source A /x /y"
--   [TRelmap [CodeLine 1 "a : source A /x /y"]
--            "a" [TreeL (Word 0 "source"),
--                 TreeL (Word 0 "A"),
--                 TreeL (TermN ["/x"]),
--                 TreeL (TermN ["/y"])]]
--   </pre>
consPreclause :: [CodeLine] -> [Clause]

-- | Construct <a>Clause</a> list from <a>Token</a> list. This is a first
--   step of constructing <a>Section</a>.
consClause :: RelmapHalfCons -> [CodeLine] -> [Clause]

-- | Second step of constructing <a>Section</a>.
consSection :: CContent v => RelmapFullCons v -> [Clause] -> AbortOr (Section v)
instance Typeable Clause
instance Show Clause
instance Data Clause

module Koshucode.Baala.Core.Section.Quoter

-- | Make quasiquoter for <tt>[koshu| ... |]</tt>.
koshuQuoter :: RelmapHalfCons -> ExpQ -> QuasiQuoter
data QuasiQuoter :: *

module Koshucode.Baala.Core.Section.SectionIO

-- | Read section from text.
sectionRead :: CContent v => Section v -> String -> AbortOr (Section v)

-- | Read section from file.
sectionFile :: CContent v => Section v -> FilePath -> IO (AbortOr (Section v))

-- | Run section. Output section has judges calculated from assertions in
--   input section.
runSection :: CContent v => Section v -> AbortOr (Section v)

-- | Run section and output judges.
runSectionIO :: CContent v => Section v -> IO ()
hRunSectionIO :: CContent v => Handle -> Section v -> IO ()


-- | Runtime structure for calculations written in Koshucode.
--   <a>Section</a> is bundle of calculation stuff.
module Koshucode.Baala.Core.Section

module Koshucode.Baala.Core
