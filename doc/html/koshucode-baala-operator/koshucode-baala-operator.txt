-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relational operators in Koshucode
--   
--   An impelemntation of relational operators. Operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-operator
@version 0.48.0.0


-- | Content operators.
module Koshucode.Baala.Op.Content.Order
copsOrder :: (CBool c, Eq c, Ord c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.Logic
copsLogic :: (CBool c, CNil c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.List
copsList :: CContent c => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.Arith
copsArith :: (CDec c, CList c, CText c) => [Cop c]


-- | Parsing list of terms.
module Koshucode.Baala.Op.Builtin.Term

-- | Extract a term name.
termname :: TokenTree -> Ab Termname

-- | Extract a list of term names.
--   
--   <pre>
--   &gt;&gt;&gt; termnames . B.tt $ "/a /b /c"
--   Right ["/a", "/b", "/c"]
--   </pre>
termnames :: [TokenTree] -> Ab [Termname]

-- | Extract a list of name-and-name pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termnamePairs . B.tt $ "/a /x /b /y"
--   Right [("/a", "/x"), ("/b", "/y")]
--   </pre>
termnamePairs :: [TokenTree] -> Ab [(Termname, Termname)]

-- | Extract a list of name-and-tree pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termTreePairs . B.tt $ "/a 'A3 /b 10 /c"
--   Right [ ("/a", TreeL (TWord 3 1 "A3"))
--         , ("/b", TreeL (TWord 7 0 "10"))
--         , ("/c", TreeB 1 []) ]
--   </pre>
termTreePairs :: [TokenTree] -> Ab [Named TokenTree]


-- | Built-in relmap operator.
module Koshucode.Baala.Op.Builtin.Rop

-- | Built-in relmap operator.
builtinRops :: [Rop c]

-- | Make implementations of relation-mapping operators.
ropList :: String -> [(String, RopCons c, RopOperandSorter)] -> [Rop c]


-- | Extract suboperand from use of relmap
module Koshucode.Baala.Op.Builtin.Get
type RopGet c b = RopUse c -> String -> Ab b
getMaybe :: RopGet c b -> RopGet c (Maybe b)
getOption :: b -> RopGet c b -> RopGet c b
getTrees :: RopGet c [TokenTree]
getWordTrees :: RopGet c [Named TokenTree]

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord c) =&gt; RopCons c
--   consMeet u = do
--     m &lt;- getRelmap u
--     Right $ relmapMeet u m
--   </pre>
getRelmap :: RopUse c -> Ab (Relmap c)

-- | Get relmaps from operator use.
getRelmaps :: RopUse c -> Ab [Relmap c]

-- | Get a term name from named operand.
getTerm :: RopGet c Termname

-- | Get list of term names from named operand.
getTerms :: RopGet c [Termname]

-- | Get list of term-name pairs from named operand.
getTermPairs :: RopGet c [(Termname, Termname)]
getTermTrees :: RopGet c [Named TokenTree]
getSwitch :: RopUse c -> String -> Ab Bool

-- | Get word from named operand.
--   
--   <pre>
--   consXxx :: RopCons c
--   consXxx u = do
--     sign &lt;- getWord u "-sign"
--     ...
--   </pre>
getWord :: RopGet c String
getInt :: RopGet c Int


-- | Content formula.
module Koshucode.Baala.Op.Type

-- | Vanilla type
data VContent

-- | Boolean type
VBool :: Bool -> VContent

-- | String type
VText :: String -> VContent

-- | Decimal number type
VDec :: Decimal -> VContent

-- | Sign of no ordinary type
VNil :: VContent

-- | List type (objective collection)
VList :: [VContent] -> VContent

-- | Set type (informative collection)
VSet :: [VContent] -> VContent

-- | Termset type (set of terms)
VTermset :: [Named VContent] -> VContent

-- | Relation type
VRel :: (Rel VContent) -> VContent
type VCop = CopFun VContent
instance Show VContent
instance CRel VContent
instance CTermset VContent
instance CSet VContent
instance CNil VContent
instance CList VContent
instance CText VContent
instance CDec VContent
instance CBool VContent
instance Pretty VContent
instance CContent VContent
instance PrimContent VContent
instance Ord VContent
instance Eq VContent


-- | Builtin relational operator.
module Koshucode.Baala.Op.Builtin

module Koshucode.Baala.Op.Minimal.Origin
consSource :: RopCons c
consId :: RopCons c

-- | Identity mapping, i.e., do nothing.
relmapId :: RopUse c -> Relmap c
consEmpty :: RopCons c
relmapEmpty :: RopUse c -> Relmap c
consContents :: Ord c => RopCons c
relmapContents :: Ord c => RopUse c -> Termname -> Relmap c
consReldee :: RopCons c
consReldum :: RopCons c

module Koshucode.Baala.Op.Minimal.Term
consPick :: Ord c => RopCons c
relmapPick :: Ord c => RopUse c -> [Termname] -> Relmap c
consCut :: Ord c => RopCons c
relmapCut :: Ord c => RopUse c -> [Termname] -> Relmap c
consRename :: RopCons c
relmapRename :: RopUse c -> [(Termname, Termname)] -> Relmap c


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Op.Minimal.Tropashko
consMeet :: Ord c => RopCons c

-- | Meet two relations.
relmapMeet :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Meet two relations.
relkitMeet :: Ord c => RelkitBinary c
consJoin :: Ord c => RopCons c

-- | Join two relations.
relmapJoin :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Join two relations.
relkitJoin :: RelkitBinary c


-- | Restrict by relmap
module Koshucode.Baala.Op.Minimal.Restrict
consSome :: Ord c => RopCons c
relmapSome :: Ord c => RopUse c -> Map (Relmap c)
relkitSome :: Ord c => RelkitBinary c
consNone :: Ord c => RopCons c
relmapNone :: Ord c => RopUse c -> Map (Relmap c)
relkitNone :: Ord c => RelkitBinary c
consSub :: Ord c => RopCons c
relmapSub :: Ord c => RopUse c -> Map (Relmap c)
relkitSub :: Ord c => RelkitBinary c
consEqual :: Ord c => RopCons c
relmapEqual :: Ord c => RopUse c -> Map (Relmap c)
relkitEqual :: Ord c => RelkitBinary c


-- | Minimal implementations of relmap operators.
module Koshucode.Baala.Op.Minimal.Rop

-- | Minimal implementations of relmap operators.
minimalRops :: Ord c => [Rop c]


-- | Minimal relation-mapping operators
module Koshucode.Baala.Op.Minimal

module Koshucode.Baala.Op.Vanilla.Confl
consMaybe :: (Ord c, CNil c) => RopCons c
relmapMaybe :: (Ord c, CNil c) => RopUse c -> Map (Relmap c)
relkitMaybe :: (Ord c, CNil c) => RelkitBinary c
consFull :: (Ord c, CNil c) => RopCons c

-- | like SQL's full join
relmapFull :: (Ord c, CNil c) => RopUse c -> Relmap c -> Relmap c -> Relmap c
relkitFull :: (Ord c, CNil c) => Relkit c -> RelkitBinary c
consGroup :: (Ord c, CRel c) => RopCons c
relmapGroup :: (Ord c, CRel c) => RopUse c -> String -> Map (Relmap c)

-- | Grouping relation.
relkitGroup :: (Ord c, CRel c) => String -> RelkitBinary c
consIf :: Ord c => RopCons c
relmapIf :: Ord c => RopUse c -> [Relmap c] -> Relmap c
relkitIf :: Ord c => RelkitConfl c
consWhen :: Ord c => RopCons c
consUnless :: Ord c => RopCons c
consFix :: Ord c => RopCons c
consFixJoin :: Ord c => RopCons c


-- | Relmap operators using term-content expressions.
module Koshucode.Baala.Op.Vanilla.Cox
consAdd :: CContent c => RopCons c
relmapAdd :: (CList c, CRel c, Pretty c) => RopUse c -> ([Cop c], [NamedCox c], [NamedCox c]) -> Relmap c
relkitAdd :: (CList c, CRel c, Pretty c) => ([Cop c], [NamedCox c], [NamedCox c]) -> RelkitCalc c
consFilter :: CContent c => Bool -> RopCons c
relmapFilter :: (CList c, CRel c, CBool c, Pretty c) => RopUse c -> (Bool, [Cop c], [NamedCox c], Cox c) -> Relmap c
relkitFilter :: (CList c, CRel c, CBool c, Pretty c) => (Bool, [Cop c], [NamedCox c], Cox c) -> RelkitCalc c

module Koshucode.Baala.Op.Vanilla.Flow
consEnclose :: CRel c => RopCons c
relmapEnclose :: CRel c => RopUse c -> Termname -> Relmap c

-- | Enclose the current relation in a term.
relkitEnclose :: CRel c => Termname -> RelkitCalc c
consMember :: (Ord c, CSet c, CList c) => RopCons c
relmapMember :: (Ord c, CSet c, CList c) => RopUse c -> Termname2 -> Relmap c
relkitMember :: (Ord c, CSet c, CList c) => Termname2 -> RelkitCalc c
consRange :: CDec c => RopCons c
relmapRange :: CDec c => RopUse c -> (Termname, Int, Int) -> Relmap c
consRdf :: RopCons c
consSize :: CDec c => RopCons c
relmapSize :: CDec c => RopUse c -> Termname -> Relmap c

-- | Cardinality
relkitSize :: CDec c => Termname -> RelkitCalc c

module Koshucode.Baala.Op.Vanilla.Naming
consPrefix :: RopCons c
relmapPrefix :: RopUse c -> String -> [String] -> Relmap c

-- | Add prefix to specified terms.
relkitPrefix :: String -> [String] -> RelkitCalc c
consUnprefix :: RopCons c
relmapUnprefix :: RopUse c -> String -> Relmap c

-- | Remove prefix
relkitUnprefix :: String -> RelkitCalc c
consPrefixChange :: RopCons c
relmapPrefixChange :: RopUse c -> (String, String) -> Relmap c

-- | Change prefix
relkitPrefixChange :: (String, String) -> RelkitCalc c

module Koshucode.Baala.Op.Vanilla.Check
consCheckTerm :: RopCons c
relmapCheckTermJust :: RopUse c -> [Termname] -> Relmap c
relmapCheckTermHas :: RopUse c -> [Termname] -> Relmap c
relmapCheckTermBut :: RopUse c -> [Termname] -> Relmap c
relkitCheckTermJust :: [Termname] -> RelkitCalc c
relkitCheckTermHas :: [Termname] -> RelkitCalc c
relkitCheckTermBut :: [Termname] -> RelkitCalc c
consDuplicate :: Ord c => RopCons c
relmapDuplicate :: Ord c => RopUse c -> [Termname] -> Relmap c

-- | Get typename.
consTypename :: CContent c => RopCons c

module Koshucode.Baala.Op.Vanilla.Global
consDo :: Ord c => RopCons c
consKoshuCop :: CContent c => RopCons c
relkitKoshuCop :: CContent c => Termname -> RelkitGlobal c
consKoshuCopInfix :: CContent c => RopCons c
relkitKoshuCopInfix :: CContent c => (Termname, Maybe Termname, Maybe Termname) -> RelkitGlobal c
consKoshuRop :: CContent c => RopCons c
relkitKoshuRop :: CContent c => Termname -> RelkitGlobal c
consKoshuVersion :: CContent c => RopCons c
relkitKoshuVersion :: CContent c => Termname -> Global c -> Maybe Relhead -> Ab (Relkit c)

module Koshucode.Baala.Op.Vanilla.Order
consNumber :: (Ord c, CDec c) => RopCons c
relmapNumber :: (CDec c, Ord c) => RopUse c -> (Termname, [Termname]) -> Relmap c
relkitNumber :: (Ord c, CDec c) => (Termname, [Termname]) -> RelkitCalc c
consRank :: (Ord c, CDec c) => RopCons c
relmapGapRank :: (CDec c, Ord c) => RopUse c -> (Termname, [Termname]) -> Relmap c
relkitGapRank :: (Ord c, CDec c) => (Termname, [Termname]) -> RelkitCalc c
relmapDenseRank :: (CDec c, Ord c) => RopUse c -> (Termname, [Termname]) -> Relmap c
relkitDenseRank :: (Ord c, CDec c) => (Termname, [Termname]) -> RelkitCalc c


-- | Vanilla relational operators.
module Koshucode.Baala.Op.Vanilla.Rops

-- | Implementation of relational operators.
vanillaRops :: CContent c => [Rop c]

module Koshucode.Baala.Op.Vanilla


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Op.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter


-- | Term-content operators.
module Koshucode.Baala.Op.Content.Cops
vanillaGlobal :: CContent c => Global c

-- | Term-content operators and its height table.
vanillaCops :: CContent c => ([Cop c], [Named InfixHeight])


-- | Term-content operators.
module Koshucode.Baala.Op.Content


-- | Operators in Koshucode.
module Koshucode.Baala.Op
