-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relational operators in Koshucode
--   
--   This is a library for processing relational data. Relational
--   expressions are written in Koshucode. Koshucode is a notation for both
--   of descriptions and calculations of data.
@package koshucode-baala-operator
@version 0.11.0.0


-- | Term values
module Koshucode.Baala.Vanilla.Value.Val

-- | Type for values
data Val

-- | String value
Stringv :: String -> Val

-- | Integer value
Intv :: Int -> Val

-- | Boolean value
Boolv :: Bool -> Val

-- | List of values
Listv :: [Val] -> Val

-- | Relational value
Relv :: (Rel Val) -> Val

-- | Sign of no ordinary values
Nov :: Val
stringv :: String -> Val
intv :: Int -> Val
listv :: [Val] -> Val
relv :: Rel Val -> Val
nov :: Val
binv :: (Int -> Int -> Int) -> Val -> Val -> Val
toInt :: Val -> Int
toString :: Val -> String
valRangeMinMax :: Val -> Val -> [Val]
instance Show Val
instance Eq Val
instance Ord Val
instance Value Val
instance Pretty Val
instance Nil Val
instance RelValue Val
instance ListValue Val
instance StringValue Val
instance IntValue Val
instance BoolValue Val


-- | Relation on type <a>Val</a>
module Koshucode.Baala.Vanilla.Value.Relval
terms :: [String] -> [Relterm]
unionUpTerm :: Name a => [String] -> [a] -> [Relterm]

module Koshucode.Baala.Vanilla.Calc.Ripen
calcRipen :: Ripen Token Val

-- | Convert infix form to prefix form
calcBinary :: TokenTree -> TokenTree

module Koshucode.Baala.Vanilla.Calc

-- | Prepare calculation. <tt>makeCalc</tt> <i>H E</i> is a calculator from
--   an expression <i>E</i> on a head <i>H</i>. Terms in <i>E</i> must be
--   terms in <i>H</i>. If not in <i>H</i>, an error is reported.
makeCalc :: Relhead -> TokenTree -> Calc Val

-- | Prepare named calculators
makeHeadCalcs :: Relhead -> [TokenTree] -> (Relhead, [Calc Val])


-- | Relational mappers
module Koshucode.Baala.Vanilla.Relmap.Calc

-- | Make relmap function for <tt>hold</tt> operator.
holdBody :: (Val -> Val -> Bool) -> TokenTree -> a -> RelmapFun Val

-- | Make relmap function for <tt>val</tt> operator.
valBody :: [TokenTree] -> a -> RelmapFun Val

-- | Keep leading tuples.
limit :: Ord v => HalfRelmap -> Int -> String -> Relmap v


-- | Unary relational mappers
module Koshucode.Baala.Minimal.Relmap.Unary
project :: Ord v => ([Int] -> Livmap2 v) -> [String] -> a -> RelmapFun v

-- | Throw away all tuples in a relation.
relEmpty :: Rel v -> Rel v
relmapEmpty :: HalfRelmap -> Relmap v

-- | Change name of terms.
renameNP :: [(String, String)] -> a -> RelmapFun v

-- | Add prefix to terms
prefix :: String -> Relmap v

-- | Remove prefix
unprefix :: String -> Relmap v

-- | Change prefix
prefixChange :: String -> Relmap v

-- | Enclose the current relation in a term.
enclose :: RelValue v => String -> Relmap v

-- | Current term configuration.
conf :: StringValue v => String -> Relmap v

-- | Current cardinality.
size :: IntValue v => String -> Relmap v


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Minimal.Relmap.Tropashko

-- | Meet two relations.
relMeet :: Ord v => Rel v -> Rel v -> Rel v

-- | Join two relations.
relJoin :: Ord v => Rel v -> Rel v -> Rel v

-- | Meet two relations.
relmapMeet :: Ord v => HalfRelmap -> Relmap v -> Relmap v

-- | Join two relations.
relmapJoin :: Ord v => HalfRelmap -> Relmap v -> Relmap v


-- | Class for operand patterns
module Koshucode.Baala.Minimal.Relmap.Pattern

-- | Class for operand pattern.
class OperandPattern p where operandParser p = operandParser' p . operandGroup operandParser' _ = id operandUsage _ = []
operandParser :: OperandPattern p => p -> OperandParser
operandParser' :: OperandPattern p => p -> OperandParser'
operandUsage :: OperandPattern p => p -> [String]

-- | Make relmap implementations.
relmaps :: OperandPattern p => [(String, p, OperatorCons v)] -> [RelmapImplement v]


-- | Operand patterns
module Koshucode.Baala.Minimal.Relmap.Operand

-- | <a>OperandPattern</a> for minimal operators
data MinimalOperand

-- | No operand
LikeEmpty :: MinimalOperand

-- | Relmap and maybe shared terms
LikeMeet :: MinimalOperand

-- | List of present terms
LikePick :: MinimalOperand

-- | List of new term and present term. <tt>-term</tt> pairs of new and
--   present terms
LikeRename :: MinimalOperand

-- | Relsign and list of terms. <tt>-sign</tt> relsign <tt>-term</tt> term
--   names
LikeSource :: MinimalOperand
likePick :: OperandParser'
likeMeet :: OperandParser'
likeRename :: OperandParser'
likeSource :: OperandParser'
instance Show MinimalOperand
instance Eq MinimalOperand
instance Enum MinimalOperand
instance OperandPattern MinimalOperand


-- | OperandGet
module Koshucode.Baala.Minimal.Relmap.Get
type OperandGet a = [Named [TokenTree]] -> String -> AbortOr a

-- | Abortable <a>head</a>
getHead :: [a] -> AbortOr a

-- | Get word from named operand.
getWord :: OperandGet String

-- | Get list of term names from named operand.
getTerms :: OperandGet [String]

-- | Get list of term-name pairs from named operand.
getTermPairs :: OperandGet [(String, String)]


-- | Minimal implementations of relmaps
module Koshucode.Baala.Minimal.Relmap.Implement

-- | Minimal implementations of relmaps
minimalRelmaps :: Ord v => [RelmapImplement v]

-- | Change term names
relmapRename :: HalfRelmap -> [(String, String)] -> (Relmap v)


-- | Confluent relational mapping
module Koshucode.Baala.Minimal.Relmap.Confl

-- | Hanging relation, like grouping.
hang :: (Ord v, RelValue v) => HalfRelmap -> String -> Relmap v -> Relmap v
selfhang :: a
relmapSome :: Ord v => HalfRelmap -> Relmap v -> Relmap v
relmapMinus :: Ord v => HalfRelmap -> Relmap v -> Relmap v
relSome :: Ord v => Rel v -> Rel v -> Rel v
relMinus :: Ord v => Rel v -> Rel v -> Rel v


-- | Relational mappings
module Koshucode.Baala.Minimal.Relmap


-- | Minimal relational operators
module Koshucode.Baala.Minimal

module Koshucode.Baala.Vanilla.Relmap.Operand

-- | <a>OperandPattern</a> for relational operations.
data VanillaOperand

-- | Boolean expression
LikeHold :: VanillaOperand

-- | List of new term and expression
LikeVal :: VanillaOperand

-- | Relmap and maybe shared terms
LikeMeet :: VanillaOperand

-- | Relsign and list of terms
LikeSource :: VanillaOperand
instance Show VanillaOperand
instance Eq VanillaOperand
instance Enum VanillaOperand
instance OperandPattern VanillaOperand

module Koshucode.Baala.Vanilla.Relmap.Implement

-- | Implementation of relational operators.
vanillaRelmaps :: [RelmapImplement Val]

-- | like SQL's left join
relMaybe :: (Ord v, Nil v) => Rel v -> Rel v -> Rel v


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Vanilla.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter

module Koshucode.Baala.Vanilla
