-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relational operators in Koshucode
--   
--   An impelemntation of relational operators. Operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-operator
@version 0.32.0.0

module Koshucode.Baala.Vanilla.Order
data OrderCap v
Asc :: v -> OrderCap v
Desc :: v -> OrderCap v
orders :: String -> [OrderCap [Char]]
sortByName :: (Ord v, Eq n) => [OrderCap n] -> [n] -> Map [[v]]
instance Show v => Show (OrderCap v)
instance Eq v => Eq (OrderCap v)
instance Ord v => Ord (OrderCap v)


-- | Term content.
module Koshucode.Baala.Vanilla.Type.Content

-- | Type for values.
data VContent

-- | String type
VText :: String -> VContent

-- | Integer type
VInt :: Int -> VContent

-- | Boolean type
VBool :: Bool -> VContent

-- | List type
VList :: [VContent] -> VContent

-- | Set type
VSet :: [VContent] -> VContent

-- | List of terms
VTermset :: [Named VContent] -> VContent

-- | Relation type
VRel :: (Rel VContent) -> VContent

-- | Sign of no ordinary type
VNil :: VContent
binv :: (Int -> Int -> Int) -> VContent -> Map VContent
toInt :: VContent -> Int
toString :: VContent -> String
valRangeMinMax :: VContent -> VContent -> [VContent]
instance Show VContent
instance Eq VContent
instance Ord VContent
instance CContent VContent
instance Pretty VContent
instance CRel VContent
instance CTermset VContent
instance CSet VContent
instance CNil VContent
instance CList VContent
instance CText VContent
instance CInt VContent
instance CBool VContent
instance PrimContent VContent


-- | Relation on type <tt>Val</tt>
module Koshucode.Baala.Vanilla.Type.Relval
terms :: [String] -> [Relterm]
unionUpTerm :: Name a => [String] -> [a] -> [Relterm]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Arith
copArith :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.List
copList :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Literal
copLiteral :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Logic
copLogic :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Order
copOrder :: [Named (Cop VContent)]


-- | Content formula.
module Koshucode.Baala.Vanilla.Cop
vanillaContent :: RopUse VContent -> TokenTree -> AbortOr (PosCox VContent)
vanillaNamedContent :: RopUse VContent -> Named TokenTree -> AbortOr (Named (PosCox VContent))
vanillaNamedContents :: RopUse VContent -> [Named TokenTree] -> AbortOr [Named (PosCox VContent)]


-- | Parsing list of terms.
module Koshucode.Baala.Builtin.Term

-- | Extract a list of term names.
--   
--   <pre>
--   &gt;&gt;&gt; termnames . tokenTrees . tokens $ "/a /b /c"
--   Right ["/a", "/b", "/c"]
--   </pre>
termnames :: [TokenTree] -> AbortOr [String]
termname2 :: [TokenTree] -> AbortOr (String, String)

-- | Extract a list of name-and-name pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termnamePairs . tokenTrees . tokens $ "/a /x /b /y"
--   Right [("/a", "/x"), ("/b", "/y")]
--   </pre>
termnamePairs :: [TokenTree] -> AbortOr [(String, String)]

-- | Extract a list of name-and-tree pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termTreePairs . tokenTrees . tokens $ "/a 'A3' /b 10"
--   Right [("/a", TreeL (TWord 3 1 "A3")),
--          ("/b", TreeL (TWord 7 0 "10"))]
--   </pre>
termTreePairs :: [TokenTree] -> AbortOr [Named TokenTree]


-- | Class for operand patterns
module Koshucode.Baala.Builtin.Pattern

-- | Class for operand pattern.
class OpPattern p where opParser p = opParser' p . operandGroup opParser' _ = id
opParser :: OpPattern p => p -> RopParser
opParser' :: OpPattern p => p -> RopParser'
opPart :: OpPattern p => p -> [String]
opUsage :: OpPattern p => p -> [String]

-- | Make implementations of relational operators.
operators :: OpPattern p => String -> [(String, p, RopCons v)] -> [Rop v]


-- | Extract suboperand
module Koshucode.Baala.Builtin.Get

-- | Abortable <a>head</a>
getHead :: [a] -> AbortOr a
type OpGet v a = RopUse v -> String -> AbortOr a
getTree :: OpGet v TokenTree
getTrees :: OpGet v [TokenTree]

-- | Get word from named operand.
--   
--   <pre>
--   consXxx :: RopCons v
--   consXxx use = do
--     sign &lt;- getWord use "-sign"
--     ...
--   </pre>
getWord :: OpGet v String
getInt :: OpGet v Int

-- | Get a term name from named operand.
getTerm :: OpGet v String

-- | Get list of term names from named operand.
getTerms :: OpGet v [String]
getTermPair :: OpGet v (Named String)

-- | Get list of term-name pairs from named operand.
getTermPairs :: OpGet v [Named String]
getTermTrees :: OpGet v [Named TokenTree]

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord v) =&gt; RopCons v
--   consMeet use = do
--     m &lt;- getRelmap use
--     Right $ relmapMeet use m
--   </pre>
getRelmap :: RopUse v -> AbortOr (Relmap v)

-- | Get relmaps from operator use.
getRelmaps :: RopUse v -> AbortOr [Relmap v]


-- | Kit for implementing relational operators
module Koshucode.Baala.Builtin

-- | <a>OpPattern</a> for builtin operators.
data BuiltinOperand

-- | no operand
LikeId :: BuiltinOperand
builtinRops :: Ord c => [Rop c]
instance Show BuiltinOperand
instance Eq BuiltinOperand
instance Enum BuiltinOperand
instance OpPattern BuiltinOperand


-- | Operand patterns
module Koshucode.Baala.Minimal.Operand

-- | <a>OpPattern</a> for minimal operators
data MinimalOperand

-- | no operand
LikeId :: MinimalOperand

-- | { <tt>-relmap</tt> } relmap [ <tt>-share</tt> /name ... ]
LikeMeet :: MinimalOperand

-- | { <tt>-term</tt> } /name ...
LikePick :: MinimalOperand

-- | { <tt>-term</tt> } /new /old ...
LikeRename :: MinimalOperand

-- | { <tt>-sign</tt> } relsign { <tt>-term</tt> } /name ...
LikeSource :: MinimalOperand
likePick :: RopParser'
likeMeet :: RopParser'
likeRename :: RopParser'
likeSource :: RopParser'
instance Show MinimalOperand
instance Eq MinimalOperand
instance Enum MinimalOperand
instance OpPattern MinimalOperand


-- | Restrict by relation
module Koshucode.Baala.Minimal.Restrict
ropConsSome :: Ord c => RopCons c
relmapSome :: Ord c => RopUse c -> Map (Relmap c)
relSome :: Ord c => Rel c -> AbMap (Rel c)
ropConsMinus :: Ord c => RopCons c
relmapMinus :: Ord c => RopUse c -> Map (Relmap c)
relMinus :: Ord c => Rel c -> AbMap (Rel c)


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Minimal.Tropashko
ropConsMeet :: Ord c => RopCons c

-- | Meet two relations.
relmapMeet :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Meet two relations.
relMeet :: Ord c => Rel c -> Rel c -> AbOr (Rel c)
ropConsJoin :: Ord c => RopCons c

-- | Join two relations.
relmapJoin :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Join two relations.
relJoin :: Ord c => Rel c -> Rel c -> AbOr (Rel c)


-- | Unary relational operators.
module Koshucode.Baala.Minimal.Unary
ropConsReldee :: RopCons c
ropConsReldum :: RopCons c
ropConsSource :: RopCons c
ropConsId :: RopCons c
relmapId :: RopUse c -> Relmap c

-- | Identity mapping, i.e., do nothing.
relId :: AbMap (Rel c)
ropConsEmpty :: RopCons c
relmapEmpty :: RopUse c -> Relmap c

-- | Throw away all tuples in a relation.
relEmpty :: AbMap (Rel c)
ropConsCut :: Ord c => RopCons c
relmapCut :: Ord c => RopUse c -> [String] -> Relmap c
relCut :: Ord c => [String] -> AbMap (Rel c)
ropConsPick :: Ord c => RopCons c
relmapPick :: Ord c => RopUse c -> [String] -> Relmap c
relPick :: Ord c => [String] -> AbMap (Rel c)
ropConsRename :: RopCons c
relmapRename :: RopUse c -> [(String, String)] -> Relmap c

-- | Change terms names
relRename :: [(String, String)] -> AbMap (Rel c)


-- | Minimal implementations of relmaps
module Koshucode.Baala.Minimal.Implement

-- | Minimal implementations of relmaps.
minimalRops :: Ord c => [Rop c]


-- | Minimal relational operators
module Koshucode.Baala.Minimal

module Koshucode.Baala.Vanilla.Relmap.Binary
relopMaybe :: RopCons VContent
relmapMaybe :: (Ord c, CNil c) => RopUse c -> Relmap c

-- | like SQL's left join
relMaybe :: (Ord c, CNil c) => Rel c -> AbMap (Rel c)
relopMaybeBoth :: RopCons VContent

-- | like SQL's full join
relmapMaybeBoth :: (Ord c, CNil c) => RopUse c -> Relmap c
relopHang :: RopCons VContent
relmapHang :: (Ord c, CRel c) => RopUse c -> String -> Relmap c

-- | Hanging relation, like grouping.
relHang :: (Ord c, CRel c) => String -> Rel c -> AbMap (Rel c)


module Koshucode.Baala.Vanilla.Relmap.Calc
relopAdd :: RopCons VContent
relmapAdd :: RopUse VContent -> [Named (PosCox VContent)] -> Relmap VContent
relAdd :: [Named (PosCox VContent)] -> Rel VContent -> AbOr (Rel VContent)
relopHold :: RopCons VContent
relmapHold :: RopUse VContent -> Bool -> (PosCox VContent) -> Relmap VContent
relHold :: (CContent c, Show c) => Bool -> (PosCox c) -> AbMap (Rel c)

module Koshucode.Baala.Vanilla.Relmap.Naming
relopPrefix :: RopCons VContent
relmapPrefix :: RopUse c -> String -> [String] -> Relmap c

-- | Add prefix to terms.
relPrefix :: String -> [String] -> AbMap (Rel c)
relopUnprefix :: RopCons VContent
relmapUnprefix :: RopUse c -> String -> Relmap c

-- | Remove prefix
relUnprefix :: String -> AbMap (Rel c)
relopPrefixChange :: RopCons VContent
relmapPrefixChange :: RopUse c -> String -> String -> Relmap c

-- | Change prefix
relPrefixChange :: String -> String -> AbMap (Rel c)

module Koshucode.Baala.Vanilla.Relmap.Operand

-- | <a>OpPattern</a> for relational operations.
data VanillaOperand
LikeId :: VanillaOperand

-- | Boolean expression
LikeHold :: VanillaOperand

-- | List of new term and expression
LikeVal :: VanillaOperand

-- | Relmap and maybe shared terms
LikeMeet :: VanillaOperand

-- | Prefix. <tt>-prefix</tt>, <tt>-term</tt>
LikePrefix :: VanillaOperand

-- | Relsign and list of terms
LikeSource :: VanillaOperand

-- | Prefix. <tt>-prefix</tt>
LikeUnprefix :: VanillaOperand

-- | Prefix. <tt>-new</tt>, <tt>-old</tt>
LikePrefixChange :: VanillaOperand

-- | Size. <tt>-term</tt>
LikeSize :: VanillaOperand
likePrefix :: RopParser'
likeUnprefix :: RopParser'
likePrefixChange :: RopParser'
likeSize :: RopParser'
instance Show VanillaOperand
instance Eq VanillaOperand
instance Enum VanillaOperand
instance OpPattern VanillaOperand

module Koshucode.Baala.Vanilla.Relmap.Unary
relopSize :: RopCons VContent
relmapSize :: CInt c => RopUse c -> String -> Relmap c

-- | Change terms names
relSize :: CInt c => String -> AbMap (Rel c)
relopConf :: RopCons VContent
relmapConf :: CText c => RopUse c -> String -> Relmap c

-- | Change terms names
relConf :: CText c => String -> AbMap (Rel c)
relopEnclose :: RopCons VContent
relmapEnclose :: CRel c => RopUse c -> String -> Relmap c

-- | Enclose the current relation in a term.
relEnclose :: CRel c => String -> AbMap (Rel c)
relopRank :: RopCons VContent
relmapRank :: (CInt c, Ord c) => RopUse c -> String -> [String] -> Relmap c
relRank :: (CInt c, Ord c) => String -> [String] -> AbMap (Rel c)

-- | Keep leading tuples.
limit :: Ord c => RopUse c -> Int -> String -> Relmap c
relopTypename :: CContent c => RopCons c
relmapTypename :: CContent c => RopUse c -> String -> String -> Relmap c

-- | Get typename.
relTypename :: CContent c => String -> String -> AbMap (Rel c)
relopRange :: RopCons VContent
relmapRange :: CInt c => RopUse c -> String -> Int -> Int -> Relmap c

module Koshucode.Baala.Vanilla.Relmap.Implement

-- | Implementation of relational operators.
vanillaRops :: [Rop VContent]


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Vanilla.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter

module Koshucode.Baala.Vanilla
