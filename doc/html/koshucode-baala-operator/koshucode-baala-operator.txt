-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relational operators in Koshucode
--   
--   An impelemntation of relational operators. Operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-operator
@version 0.39.0.0

module Koshucode.Baala.Vanilla.Order
data OrderCap v
Asc :: v -> OrderCap v
Desc :: v -> OrderCap v
orders :: String -> [OrderCap [Char]]
sortByName :: (Ord v, Eq n) => [OrderCap n] -> [n] -> Map [[v]]
instance Show v => Show (OrderCap v)
instance Eq v => Eq (OrderCap v)
instance Ord v => Ord (OrderCap v)


-- | Content formula.
module Koshucode.Baala.Vanilla.Type

-- | Vanilla type
data VContent

-- | Boolean type
VBool :: Bool -> VContent

-- | String type
VText :: String -> VContent

-- | Decimal number type
VDec :: Decimal -> VContent

-- | Sign of no ordinary type
VNil :: VContent

-- | List type (objective collection)
VList :: [VContent] -> VContent

-- | Set type (informative collection)
VSet :: [VContent] -> VContent

-- | Termset type (set of terms)
VTermset :: [Named VContent] -> VContent

-- | Relation type
VRel :: (Rel VContent) -> VContent
type VCop = CopEagerF VContent
isMember :: VContent -> VContent -> Bool
instance Show VContent
instance CRel VContent
instance CTermset VContent
instance CSet VContent
instance CNil VContent
instance CList VContent
instance CText VContent
instance CDec VContent
instance CBool VContent
instance Pretty VContent
instance CContent VContent
instance PrimContent VContent
instance Ord VContent
instance Eq VContent


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Arith
copsArith :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.List
copsList :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Literal
copsLiteral :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Logic
copsLogic :: [Named (Cop VContent)]


-- | Content operators.
module Koshucode.Baala.Vanilla.Cop.Order
copsOrder :: [Named (Cop VContent)]


-- | Content formula.
module Koshucode.Baala.Vanilla.Cop
vanillaContent :: RopUse VContent -> TokenTree -> AbortTokens (PosCox VContent)
vanillaNamedContent :: RopUse VContent -> Named TokenTree -> AbortTokens (Named (PosCox VContent))
vanillaNamedContents :: RopUse VContent -> [Named TokenTree] -> AbortTokens [Named (PosCox VContent)]


-- | Parsing list of terms.
module Koshucode.Baala.Builtin.Term

-- | Extract a list of term names.
--   
--   <pre>
--   &gt;&gt;&gt; termnames . B.tt $ "/a /b /c"
--   Right ["/a", "/b", "/c"]
--   </pre>
termnames :: [TokenTree] -> AbortTokens [Termname]

-- | Extract a list of name-and-name pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termnamePairs . B.tt $ "/a /x /b /y"
--   Right [("/a", "/x"), ("/b", "/y")]
--   </pre>
termnamePairs :: [TokenTree] -> AbortTokens [(Termname, Termname)]

-- | Extract a list of name-and-tree pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termTreePairs . B.tt $ "/a 'A3 /b 10 /c"
--   Right [ ("/a", TreeL (TWord 3 1 "A3"))
--         , ("/b", TreeL (TWord 7 0 "10"))
--         , ("/c", TreeB 1 []) ]
--   </pre>
termTreePairs :: [TokenTree] -> AbortTokens [Named TokenTree]

module Koshucode.Baala.Builtin.Operator

-- | Make implementations of relation-mapping operators.
ropList :: String -> [(String, RopCons c, RopOperand)] -> [Rop c]

-- | Built-in relation-mapping operator.
builtinRops :: [Rop c]


-- | Extract suboperand
module Koshucode.Baala.Builtin.Get

-- | Abortable <a>head</a>
getHead :: [a] -> AbortTokens a
getSingleton :: [a] -> AbortTokens a
type RopGet c b = RopUse c -> String -> AbortTokens b
getTree :: RopGet c TokenTree
getTrees :: RopGet c [TokenTree]

-- | Get word from named operand.
--   
--   <pre>
--   consXxx :: RopCons c
--   consXxx use = do
--     sign &lt;- getWord use "-sign"
--     ...
--   </pre>
getWord :: RopGet c String
getInt :: RopGet c Int

-- | Get a term name from named operand.
getTerm :: RopGet c Termname

-- | Get list of term names from named operand.
getTerms :: RopGet c [Termname]
getTermPair :: RopGet c (Termname, Termname)

-- | Get list of term-name pairs from named operand.
getTermPairs :: RopGet c [(Termname, Termname)]
getTermTrees :: RopGet c [Named TokenTree]

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord c) =&gt; RopCons c
--   consMeet use = do
--     m &lt;- getRelmap use
--     Right $ relmapMeet use m
--   </pre>
getRelmap :: RopUse c -> AbortTokens (Relmap c)

-- | Get relmaps from operator use.
getRelmaps :: RopUse c -> AbortTokens [Relmap c]


-- | Builtin relational operator.
module Koshucode.Baala.Builtin

module Koshucode.Baala.Minimal.Origin
ropConsSource :: RopCons c
ropConsId :: RopCons c

-- | Identity mapping, i.e., do nothing.
relmapId :: RopUse c -> Relmap c
ropConsEmpty :: RopCons c
relmapEmpty :: RopUse c -> Relmap c
ropConsContents :: RopCons c
relmapContents :: RopUse c -> Termname -> Relmap c
ropConsReldee :: RopCons c
ropConsReldum :: RopCons c


-- | Restrict by relmap
module Koshucode.Baala.Minimal.Restrict
ropConsSome :: Ord c => RopCons c
relmapSome :: Ord c => RopUse c -> Map (Relmap c)
ropConsNone :: Ord c => RopCons c
relmapNone :: Ord c => RopUse c -> Map (Relmap c)

module Koshucode.Baala.Minimal.Term
ropConsPick :: Ord c => RopCons c
relmapPick :: Ord c => RopUse c -> [Termname] -> Relmap c
ropConsCut :: Ord c => RopCons c
relmapCut :: Ord c => RopUse c -> [Termname] -> Relmap c
ropConsRename :: RopCons c
relmapRename :: RopUse c -> [(Termname, Termname)] -> Relmap c


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Minimal.Tropashko
ropConsMeet :: Ord c => RopCons c

-- | Meet two relations.
relmapMeet :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Meet two relations.
relfyMeet :: Ord c => Relfy c -> Relhead -> Ab (Relfy c)
ropConsJoin :: Ord c => RopCons c

-- | Join two relations.
relmapJoin :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Join two relations.
relfyJoin :: Relfy c -> Relhead -> Ab (Relfy c)


-- | Minimal implementations of relmap operators.
module Koshucode.Baala.Minimal.Operator

-- | Minimal implementations of relmap operators.
minimalRops :: Ord c => [Rop c]


-- | Minimal relational operators
module Koshucode.Baala.Minimal


module Koshucode.Baala.Vanilla.Relmap.Calc
ropConsAdd :: RopCons VContent
relmapAdd :: RopUse VContent -> [Named (PosCox VContent)] -> Relmap VContent
relfyAdd :: [Named (PosCox VContent)] -> Relhead -> Ab (Relfy VContent)
ropConsHold :: RopCons VContent
relmapHold :: RopUse VContent -> Bool -> (PosCox VContent) -> Relmap VContent
relfyHold :: (CContent c, Show c) => Bool -> (PosCox c) -> Relhead -> Ab (Relfy c)

module Koshucode.Baala.Vanilla.Relmap.Naming
ropConsPrefix :: RopCons VContent
relmapPrefix :: RopUse c -> String -> [String] -> Relmap c

-- | Add prefix to specified terms.
relfyPrefix :: String -> [String] -> Relhead -> Ab (Relfy c)
ropConsUnprefix :: RopCons VContent
relmapUnprefix :: RopUse c -> String -> Relmap c

-- | Remove prefix
relfyUnprefix :: String -> Relhead -> Ab (Relfy c)
ropConsPrefixChange :: RopCons VContent
relmapPrefixChange :: RopUse c -> String -> String -> Relmap c

-- | Change prefix
relfyPrefixChange :: String -> String -> Relhead -> Ab (Relfy c)

module Koshucode.Baala.Vanilla.Relmap.Binary
ropConsMaybe :: RopCons VContent
relmapMaybe :: (Ord c, CNil c) => RopUse c -> Map (Relmap c)
relfyMaybe :: (Ord c, CNil c) => Relfy c -> Relhead -> Ab (Relfy c)
ropConsFull :: RopCons VContent

-- | like SQL's full join
relmapFull :: (Ord c, CNil c) => RopUse c -> Relmap c -> Relmap c -> Relmap c
relfyFull :: (Ord c, CNil c) => Relfy c -> Relfy c -> Relhead -> Ab (Relfy c)
ropConsGroup :: RopCons VContent
relmapGroup :: (Ord c, CRel c) => RopUse c -> String -> Map (Relmap c)

-- | Grouping relation.
relfyGroup :: (Ord c, CRel c) => String -> Relfy c -> Relhead -> Ab (Relfy c)

module Koshucode.Baala.Vanilla.Relmap.Unary
ropConsSize :: RopCons VContent
relmapSize :: CDec c => RopUse c -> Termname -> Relmap c

-- | Cardinality
relfySize :: CDec c => Termname -> Ab (Relfy c)
ropConsEnclose :: RopCons VContent
relmapEnclose :: CRel c => RopUse c -> Termname -> Relmap c

-- | Enclose the current relation in a term.
relfyEnclose :: CRel c => Termname -> Relhead -> Ab (Relfy c)
ropConsRank :: RopCons VContent
relmapRank :: (CDec c, Ord c) => RopUse c -> Termname -> [Termname] -> Relmap c
relfyRank :: (Ord c, CDec c) => Termname -> [Termname] -> Relhead -> Ab (Relfy c)
ropConsTypename :: CContent c => RopCons c
relmapTypename :: CContent c => RopUse c -> Termname -> Termname -> Relmap c

-- | Get typename.
relfyTypename :: CText c => Termname -> Termname -> Relhead -> Ab (Relfy c)
ropConsRange :: RopCons VContent
relmapRange :: CDec c => RopUse c -> Termname -> Int -> Int -> Relmap c
ropConsDuplicate :: Ord c => RopCons c
relmapDuplicate :: Ord c => RopUse c -> [Termname] -> Relmap c
ropConsMember :: RopCons VContent
relmapMember :: RopUse VContent -> Termname -> Termname -> Relmap VContent
relfyMember :: Termname -> Termname -> Relhead -> Ab (Relfy VContent)
ropConsRdf :: RopCons VContent


-- | Vanilla relational operators.
module Koshucode.Baala.Vanilla.Relmap.Operator

-- | Implementation of relational operators.
vanillaRops :: [Rop VContent]


-- | Content formula.
module Koshucode.Baala.Vanilla.Relmap


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Vanilla.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter

module Koshucode.Baala.Vanilla
