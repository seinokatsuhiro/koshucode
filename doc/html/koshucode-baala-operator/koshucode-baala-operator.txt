-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relation-mapping operators in Koshucode
--   
--   An impelemntation of relation-mapping operators. Operators are used in
--   the <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-operator
@version 0.102.0.0

module Koshucode.Baala.Op.Builtin.Define

-- | Constructor, usage, and attribute sorter
type RopDefine c = (RopCons c, RopUsage, RopAttr)

-- | Make implementations of relmap operators.
ropList :: String -> [RopDefine c] -> [Rop c]
def :: RopCons c -> RopUsage -> String -> RopDefine c

module Koshucode.Baala.Op.Message

-- | check-term failed
checkTerm :: String -> [TermName] -> Head -> Ab a

-- | Different headings
diffHead :: [Head] -> Ab a

-- | Duplicate term name
dupTerm :: [TermName] -> Head -> Ab a

-- | Dump content expression
dumpCox :: Show c => c -> Ab a

-- | Dump relation
dumpRel :: (Write c, CRel c) => Rel c -> Ab a

-- | Dump token trees
dumpTrees :: [TTree] -> Ab a

-- | Attribute not found
noAttr :: String -> Ab a

-- | Not implemented
notImpl :: Ab a

-- | Not a nested relation
notNestRel :: [TermName] -> Head -> Ab a

-- | Odd attribute
oddAttr :: Ab a

-- | Require Boolean
reqBool :: Ab a

-- | Require relation
reqRel :: Ab a

-- | Require collection type
reqCollection :: Ab a

-- | Require data interpretation
reqInterp :: Ab a

-- | Require new term names
reqNewTerm :: [TermName] -> Head -> Ab a

-- | Require unary function
reqUnaryFn :: Ab a

-- | Unexpected term names
unexpTermName :: Ab a


-- | Built-in relmap operator.
module Koshucode.Baala.Op.Builtin.Rop

-- | Built-in relmap operator.
--   
--   <ul>
--   <li><i><i>r</i> <tt>|</tt> <i>s</i></i> Append relmaps</li>
--   <li><i><tt>id</tt></i> Identity relmap</li>
--   </ul>
ropsBuiltin :: [Rop c]
consId :: RopCons c
relmapId :: Intmed c -> Relmap c

-- | Placeholder for unimplemented operator.
consXxx :: RopCons c


-- | Parsing list of terms.
module Koshucode.Baala.Op.Builtin.Term

-- | Extract a term name.
termName :: TTree -> Ab TermName

-- | Extract a list of term names.
--   
--   <pre>
--   &gt;&gt;&gt; termNames B.&lt;=&lt; B.tt $ "/a /b /c"
--   Right ["a", "b", "c"]
--   </pre>
termNames :: [TTree] -> Ab [TermName]
termNamesCo :: [TTree] -> Ab (Bool, [TermName])

-- | Extract a list of name-and-name pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termNamePairs . B.tt $ "/a /x /b /y"
--   Right [("/a", "/x"), ("/b", "/y")]
--   </pre>
termNamePairs :: [TTree] -> Ab [TermName2]
picker :: Head -> [TermName] -> Map [c]


-- | Attribute getters: Extract attribute from use of relmap.
module Koshucode.Baala.Op.Builtin.Get
type RopGet c a = Intmed c -> String -> Ab a
getOption :: a -> RopGet c a -> RopGet c a
getMaybe :: RopGet c a -> RopGet c (Maybe a)

-- | Get <tt>True</tt> when attribute is given, <tt>False</tt> otherwise.
getSwitch :: Intmed c -> String -> Ab Bool

-- | Get word from named attribute.
--   
--   <pre>
--   consXxx :: RopCons c
--   consXxx med = do
--     sign &lt;- getWord med "-sign"
--     ...
--   </pre>
getWord :: RopGet c String
getTree :: RopGet c TTree
getTrees :: RopGet c [TTree]
getWordTrees :: RopGet c [Named TTree]
getTreesByColon :: RopGet c [[TTree]]

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord c) =&gt; RopCons c
--   consMeet med = do
--     m &lt;- getRelmap med
--     Right $ relmapMeet med m
--   </pre>
getRelmap :: Intmed c -> String -> Ab (Relmap c)

-- | Get relmaps from operator use.
getRelmaps :: Intmed c -> Ab [Relmap c]
getOptRelmap :: Relmap c -> Intmed c -> String -> Ab (Relmap c)

-- | Get a term name from named attribute.
getTerm :: RopGet c TermName
getTermOpt :: RopGet c (Maybe TermName)

-- | Get list of term names from named attribute.
getTerms :: RopGet c [TermName]

-- | Get term names and complement sign (<tt>~</tt>) .
getTermsCo :: RopGet c (Bool, [TermName])

-- | Get list of term-name pairs from named attribute.
getTermPairs :: RopGet c [TermName2]
getTermTrees :: RopGet c [Named TTree]

module Koshucode.Baala.Op.DepRank

-- | Dependent ranking data.
data DepRank a
DepRank :: [a] -> (DepRankMap a) -> DepRank a
type DepRankMap a = Map a ([a], Maybe Int)

-- | Construct dependent ranking data.
depRankFromPairs :: Ord a => [(a, a)] -> DepRank a

-- | Get dependent ranking.
depRankList :: DepRank a -> [(a, Int)]

-- | Update dependent rank for all elements.
depRankUpdateAll :: Ord a => Map (DepRank a)

-- | Update dependent rank for an element.
depRankUpdate :: Ord a => a -> Map (DepRank a)
instance Show a => Show (DepRank a)
instance Eq a => Eq (DepRank a)
instance Ord a => Ord (DepRank a)


-- | Builtin relmap operator.
module Koshucode.Baala.Op.Builtin

module Koshucode.Baala.Op.Gadget

-- | Gadgets
--   
--   <ul>
--   <li><i><tt>contents</tt></i> Make nary relation of all contetnts.</li>
--   <li><i>@number /N [ -order /P ... \</i> <tt>] Add numbering term
--   </tt>/N<tt> ordered by </tt>/P@ ...</li>
--   <li><i>@rank /N -order /P ... [ -dense \</i> <tt>] Add term
--   </tt>/N<tt> for ranking ordered by </tt>/P@ ...</li>
--   <li><i><tt>size /N</tt></i> Calculate cardinality of input
--   relation.</li>
--   </ul>
ropsGadget :: CContent c => [Rop c]
consContents :: Ord c => RopCons c
relmapContents :: Ord c => Intmed c -> TermName -> Relmap c
consDepRank :: (Ord c, CDec c) => RopCons c
relmapDepRank :: (Ord c, CDec c) => Intmed c -> TermName3 -> Relmap c
consSize :: CDec c => RopCons c
relmapSize :: CDec c => Intmed c -> TermName -> Relmap c
relkitSize :: CDec c => TermName -> RelkitFlow c
consDumpTree :: CDec c => RopCons c

module Koshucode.Baala.Op.Meta

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>koshu-cop /N</tt></i> Retrieve list of content
--   operators.</li>
--   <li><i>@koshu-cop-infix /N [ -height /N \</i> [ -dir /N ]@] Retrieve
--   list of infix specifications.</li>
--   <li><i><tt>koshu-rop /N</tt></i> Retrieve list of relmap
--   operators.</li>
--   <li><i><tt>koshu-version /N</tt></i> Get version number of the koshu
--   calculator.</li>
--   </ul>
ropsMeta :: CContent c => [Rop c]
consKoshuCop :: CContent c => RopCons c
relkitKoshuCop :: CContent c => TermName -> RelkitHook c
consKoshuCopInfix :: CContent c => RopCons c
relkitKoshuCopInfix :: CContent c => (TermName, Maybe TermName, Maybe TermName) -> RelkitHook c
consKoshuSource :: CContent c => RopCons c
relmapKoshuSource :: CContent c => Intmed c -> (TermName, Maybe TermName, Maybe TermName) -> Relmap c
consKoshuRop :: CContent c => RopCons c
relkitKoshuRop :: CContent c => (Maybe TermName, Maybe TermName, Maybe TermName) -> RelkitHook c
consKoshuProxy :: CContent c => RopCons c
relkitKoshuProxy :: CContent c => (Maybe TermName, Maybe TermName) -> RelkitHook c
consKoshuVersion :: CContent c => RopCons c
relkitKoshuVersion :: CContent c => TermName -> RelkitHook c

module Koshucode.Baala.Op.Resource

-- | Relmap operators about resources.
--   
--   <ul>
--   <li><i><tt>koshu-res-rop /N /N</tt></i> Derived relmap operators in
--   the current resource.</li>
--   <li><i><tt>koshu-res-sink /N /N</tt></i> Judgement patterns of sinks
--   in the current resource.</li>
--   </ul>
ropsResource :: CContent c => [Rop c]
consKoshuResRop :: CContent c => RopCons c
relkitKoshuResRop :: CContent c => (TermName, TermName) -> RelkitHook c
consKoshuResSink :: CContent c => RopCons c
relkitKoshuResSink :: CContent c => (TermName, TermName) -> RelkitHook c
consKoshuResArticle :: CContent c => RopCons c
relkitKoshuResArticle :: CContent c => TermName -> RelkitHook c

module Koshucode.Baala.Op.Source

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>dee</tt></i> Nullary full relation.</li>
--   <li><i><tt>dum</tt></i> Nullary empty relation.</li>
--   <li><i><tt>empty</tt></i> Make empty relation.</li>
--   <li><i><tt>source</tt></i> Read relation from data source.</li>
--   </ul>
ropsSource :: CContent c => [Rop c]
consDee :: RopCons c
consDum :: RopCons c
consEmpty :: RopCons c
relmapEmpty :: Intmed c -> [TermName] -> Relmap c
consSource :: RopCons c
consSourceTerm :: RopCons c
relmapSourceTerm :: Intmed c -> String -> Map (Relmap c)

module Koshucode.Baala.Op.Term

-- | Relmap operators for manipulating term names.
--   
--   <ul>
--   <li><i><tt>cut</tt></i> Project relation to unspecified terms.</li>
--   <li><i><tt>cut-term</tt></i> Project relation to terms not in relmap
--   output.</li>
--   <li><i><tt>pick</tt></i> Project relation to specified terms.</li>
--   <li><i><tt>pick-term</tt></i> Project relation to terms in relmap
--   output.</li>
--   <li><i><tt>rename</tt></i> Change term name.</li>
--   <li><i><tt>move</tt></i> Change heading.</li>
--   </ul>
ropsTerm :: Ord c => [Rop c]
consPick :: RopCons c
relmapPick :: Intmed c -> [TermName] -> Relmap c
relkitPick :: [TermName] -> RelkitFlow c
consCut :: RopCons c
relmapCut :: Intmed c -> [TermName] -> Relmap c
relkitCut :: [TermName] -> RelkitFlow c
consPickTerm :: RopCons c
relmapPickTerm :: Intmed c -> Relmap c -> Relmap c
relkitPickTerm :: RelkitBinary c
consCutTerm :: RopCons c
relmapCutTerm :: Intmed c -> Relmap c -> Relmap c
relkitCutTerm :: RelkitBinary c
consMove :: RopCons c
relmapMove :: Intmed c -> ([TermName], [TermName]) -> Relmap c
relkitMove :: ([TermName], [TermName]) -> RelkitFlow c
consRename :: RopCons c
relmapRename :: Intmed c -> [TermName2] -> Relmap c

module Koshucode.Baala.Op.Peripheral

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>member /N /N</tt></i> Membership of set or list.</li>
--   <li><i><tt>rdf P /S /O</tt></i> Retrieve relation from RDF-like
--   judgements.</li>
--   </ul>
ropsPeripheral :: CContent c => [Rop c]
consMember :: (Ord c, CSet c, CList c, CText c) => RopCons c
relmapMember :: (Ord c, CSet c, CList c, CText c) => Intmed c -> TermName2 -> Relmap c
relkitMember :: (Ord c, CSet c, CList c, CText c) => TermName2 -> RelkitFlow c
consRdf :: RopCons c
consAssn :: CAssn c => RopCons c
relmapAssn :: CAssn c => Intmed c -> ([TermName], TermName) -> Relmap c
relkitAssn :: CAssn c => ([TermName], TermName) -> RelkitFlow c
consUnassn :: CAssn c => RopCons c
relmapUnassn :: CAssn c => Intmed c -> (TermName, [TermName]) -> Relmap c
relkitUnassn :: CAssn c => (TermName, [TermName]) -> RelkitFlow c
consTermName :: CTerm c => RopCons c
relmapTermName :: CTerm c => Intmed c -> TermName -> Relmap c
relkitTermName :: CTerm c => TermName -> RelkitFlow c
relmapToday :: CTime c => Intmed c -> (TermName, Time) -> Relmap c
relkitToday :: CTime c => (TermName, Time) -> Maybe Head -> Ab (Relkit c)

module Koshucode.Baala.Op.TermGadget

-- | Relmap operators for manipulating term names.
--   
--   <ul>
--   <li><i><tt>prefix /P /N ...</tt></i> Add prefix <tt>/P</tt> to terms
--   <tt>/N</tt> ...</li>
--   <li><i><tt>prefix-change /P /Q</tt></i> Change prefix from <tt>/P</tt>
--   to <tt>/Q</tt>.</li>
--   <li><i><tt>unprefix /P</tt></i> Remove prefix <tt>/P</tt> from term
--   name.</li>
--   <li><i><tt>wipe</tt></i> Cut working terms.</li>
--   </ul>
ropsTermGadget :: Ord c => [Rop c]
consPrefix :: RopCons c
relmapPrefix :: Intmed c -> String -> [String] -> Relmap c

-- | Add prefix to specified terms.
relkitPrefix :: String -> [String] -> RelkitFlow c
consUnprefix :: RopCons c
relmapUnprefix :: Intmed c -> String -> Relmap c

-- | Remove prefix
relkitUnprefix :: String -> RelkitFlow c
consPrefixChange :: RopCons c
relmapPrefixChange :: Intmed c -> (String, String) -> Relmap c

-- | Change prefix
relkitPrefixChange :: (String, String) -> RelkitFlow c
consWipe :: RopCons c
relmapWipe :: Intmed c -> Relmap c
relkitWipe :: RelkitFlow c


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Op.Lattice.Tropashko
consMeet :: Ord c => RopCons c

-- | Meet two relations.
relmapMeet :: Ord c => Intmed c -> Relmap c -> Relmap c

-- | Meet two relations.
relkitMeet :: Ord c => RelkitBinary c
consJoin :: Ord c => RopCons c

-- | Join two relations.
relmapJoin :: Ord c => Intmed c -> Relmap c -> Relmap c
relmapJoinList :: Ord c => Intmed c -> [Relmap c] -> Relmap c

-- | Join two relations.
relkitJoin :: RelkitBinary c


-- | Restrict by relmap
module Koshucode.Baala.Op.Lattice.Restrict
consSome :: Ord c => RopCons c
relmapSome :: Ord c => Intmed c -> Map (Relmap c)
relkitSome :: Ord c => RelkitBinary c
consNone :: Ord c => RopCons c
relmapNone :: Ord c => Intmed c -> Map (Relmap c)
relkitNone :: Ord c => RelkitBinary c
consSub :: Ord c => RopCons c
relmapSub :: Ord c => Intmed c -> Map (Relmap c)
relkitSub :: Ord c => RelkitBinary c
consCompose :: Ord c => RopCons c
relmapCompose :: Ord c => Intmed c -> Map (Relmap c)
relkitCompose :: Ord c => RelkitBinary c


-- | Relmap operators on relational lattice.
module Koshucode.Baala.Op.Lattice.Rop

-- | Lattice implementations of relmap operators.
--   
--   <ul>
--   <li><i><tt>join</tt></i> Join two relations.</li>
--   <li><i><tt>meet</tt></i> Meet two relations.</li>
--   <li><i><tt>none</tt></i> Restriction by relmaps.</li>
--   <li><i><tt>some</tt></i> Restriction by relmaps.</li>
--   <li><i><tt>sub</tt></i> Restriction to subrelation.</li>
--   </ul>
ropsLattice :: (Ord c, CRel c) => [Rop c]


-- | Lattice relmap operators.
module Koshucode.Baala.Op.Lattice

module Koshucode.Baala.Op.Check

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i>@check-term [ -just /P ... | -has /P ... | -but /N ... \</i> @]
--   Check occurences of terms for input relation.</li>
--   <li><i><tt>duplicate /P ...</tt></i> Pass duplicate tuples on
--   <tt>/P</tt> ...</li>
--   </ul>
ropsCheck :: CContent c => [Rop c]

module Koshucode.Baala.Op.Control

-- | Implementation of relational operators.
ropsControl :: CContent c => [Rop c]
consIf :: Ord c => RopCons c
relmapIf :: Ord c => Intmed c -> [Relmap c] -> Relmap c
relkitIf :: Ord c => RelkitConfl c
consWhen :: Ord c => RopCons c
consUnless :: Ord c => RopCons c
consFix :: Ord c => RopCons c
consFixJoin :: Ord c => RopCons c
consEqual :: Ord c => RopCons c
relmapEqual :: Ord c => Intmed c -> Map (Relmap c)
relkitEqual :: Ord c => RelkitBinary c

module Koshucode.Baala.Op.Nest.Flow
consDown :: CRel c => RopCons c
relmapDown :: CRel c => Intmed c -> TermName -> Relmap c
relkitDown :: CRel c => TermName -> RelkitFlow c
consUp :: CRel c => RopCons c
relmapUp :: CRel c => Intmed c -> TermName -> Relmap c
relkitUp :: CRel c => TermName -> RelkitFlow c
consChunk :: (Ord c, CRel c) => RopCons c
relmapChunk :: (Ord c, CRel c) => Intmed c -> [TermName] -> [TermName] -> Relmap c
relkitChunk :: (Ord c, CRel c) => [TermName] -> [TermName] -> RelkitFlow c

module Koshucode.Baala.Op.Nest.Confl
consCopy :: RopCons c
consFor :: CRel c => RopCons c
relmapFor :: CRel c => Intmed c -> TermName -> Map (Relmap c)
relkitFor :: CRel c => TermName -> RelkitBinary c
consGroup :: (Ord c, CRel c) => RopCons c
relmapGroup :: (Ord c, CRel c) => Intmed c -> TermName -> Map (Relmap c)
relkitGroup :: (Ord c, CRel c) => TermName -> RelkitBinary c
consSlice :: CRel c => RopCons c
relmapSlice :: CRel c => Intmed c -> TermName -> Map (Relmap c)
relkitSlice :: CRel c => TermName -> RelkitBinary c
consSliceUp :: CRel c => RopCons c
relmapSliceUp :: CRel c => Intmed c -> Map (Relmap c)
relkitSliceUp :: CRel c => RelkitBinary c


-- | Derived operators for nested relations.
module Koshucode.Baala.Op.Nest.Deriv
consGroupBy :: (Ord c, CRel c) => RopCons c
consJoinUp :: Ord c => RopCons c
relmapJoinUp :: Ord c => Intmed c -> [TermName] -> Relmap c
consHang :: (Ord c, CRel c) => RopCons c
consNest :: (Ord c, CRel c) => RopCons c
relmapNest :: (Ord c, CRel c) => Intmed c -> (Bool, [TermName], TermName) -> Relmap c
consUnnest :: (Ord c, CRel c) => RopCons c
relmapUnnest :: (Ord c, CRel c) => Intmed c -> TermName -> Relmap c


-- | Relational operators for nested relations.
module Koshucode.Baala.Op.Nest.Rop

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i>@chunk /N ... [-order /P ...\</i> @] Split input relation into
--   some chunks.</li>
--   <li><i><tt>copy N R</tt></i> Naming input relation as <tt>N</tt> in
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>down /N</tt></i> Enclose input relation in a term
--   <tt>/N</tt>.</li>
--   <li><i><tt>for /P R</tt></i> Convert nested relation <tt>/P</tt> by
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>group /N R</tt></i> Group tuples in <tt>R</tt> by input
--   relation.</li>
--   <li><i><tt>group-by /N R</tt></i> Group input relation by output of
--   <tt>R</tt>.</li>
--   <li><i><tt>hang /N -on /P ...</tt></i> Hang nested relation
--   <tt>/N</tt> on <tt>/P</tt> ....</li>
--   <li><i><tt>join-up /P ...</tt></i> Join <tt>/P</tt> ... and up the
--   result relation.</li>
--   <li><i><tt>nest /P ... -to /N</tt></i> Nest terms <tt>/P</tt> ... into
--   nested relation.</li>
--   <li><i><tt>unnest /P</tt></i> Unnest nested relation <tt>/P</tt>.</li>
--   <li><i>@slice /N [R\</i> <tt>] Add nested relation as output of relmap
--   </tt>R@.</li>
--   <li><i><tt>slice-up R</tt></i> Slice, nested map, and lift up.</li>
--   <li><i><tt>up /P</tt></i> Lift up nested relation.</li>
--   </ul>
ropsNest :: CContent c => [Rop c]


-- | Relmap operators for nested relations.
module Koshucode.Baala.Op.Nest


-- | Operators in Koshucode.
module Koshucode.Baala.Op
