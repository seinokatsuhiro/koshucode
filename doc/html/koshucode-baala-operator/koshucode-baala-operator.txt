-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Relational operators in Koshucode
--   
--   An impelemntation of relational operators. Operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-operator
@version 0.62.0.0


-- | Parsing list of terms.
module Koshucode.Baala.Op.Builtin.Term

-- | Extract a term name.
termName :: TokenTree -> Ab TermName

-- | Extract a list of term names.
--   
--   <pre>
--   &gt;&gt;&gt; termNames B.&lt;=&lt; B.tt $ "/a /b /c"
--   Right ["a", "b", "c"]
--   </pre>
termNames :: [TokenTree] -> Ab [TermName]
termNamesCo :: [TokenTree] -> Ab (Bool, [TermName])

-- | Extract a list of name-and-name pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termNamePairs . B.tt $ "/a /x /b /y"
--   Right [("/a", "/x"), ("/b", "/y")]
--   </pre>
termNamePairs :: [TokenTree] -> Ab [TermName2]

-- | Extract a list of name-and-tree pairs.
--   
--   <pre>
--   &gt;&gt;&gt; termTreePairs B.&lt;=&lt; B.tt $ "/a 'A3 /b 10 /c"
--   Right [ ("a", TreeL (TText 3 1 "A3"))
--         , ("b", TreeL (TText 7 0 "10"))
--         , ("c", TreeB 1 []) ]
--   </pre>
termTreePairs :: [TokenTree] -> Ab [Named TokenTree]


-- | Built-in relmap operator.
module Koshucode.Baala.Op.Builtin.Rop

-- | Built-in relmap operator.
--   
--   <ul>
--   <li><i><i>r</i> <tt>|</tt> <i>s</i></i> Append relmaps</li>
--   <li><i><tt>id</tt></i> Identity relmap</li>
--   </ul>
ropsBuiltin :: [Rop c]

-- | Make implementations of relation-mapping operators.
ropList :: String -> [(String, RopCons c, RoaSpec)] -> [Rop c]
consId :: RopCons c
relmapId :: RopUse c -> Relmap c

module Koshucode.Baala.Op.Message

-- | check-term failed
checkTerm :: String -> [TermName] -> Relhead -> Ab a

-- | Different headings
diffHead :: [Relhead] -> Ab a

-- | Duplicate term name
dupTerm :: [TermName] -> Relhead -> Ab a

-- | Dump relation
dumpRel :: (Write c, CRel c) => Rel c -> Ab a

-- | Attribute not found
noAttr :: Ab a

-- | Not a nested relation
notNestRel :: [TermName] -> Relhead -> Ab a

-- | Odd attribute
oddAttr :: Ab a

-- | Require Boolean
reqBool :: Ab a

-- | Require relation
reqRel :: Ab a

-- | Require collection type
reqCollection :: Ab a

-- | Require new term names
reqNewTerm :: [TermName] -> Relhead -> Ab a

-- | Unexpected term names
unexpTermName :: Ab a


-- | Extract attribute from use of relmap
module Koshucode.Baala.Op.Builtin.Get
type RopGet c b = RopUse c -> String -> Ab b
getMaybe :: RopGet c b -> RopGet c (Maybe b)
getOption :: b -> RopGet c b -> RopGet c b
getTree :: RopGet c TokenTree
getTrees :: RopGet c [TokenTree]
getWordTrees :: RopGet c [Named TokenTree]

-- | Get a relmap from operator use.
--   
--   <pre>
--   consMeet :: (Ord c) =&gt; RopCons c
--   consMeet u = do
--     m &lt;- getRelmap u
--     Right $ relmapMeet u m
--   </pre>
getRelmap :: RopUse c -> Ab (Relmap c)

-- | Get relmaps from operator use.
getRelmaps :: RopUse c -> Ab [Relmap c]
getRelmapOption :: RopUse c -> Relmap c -> Ab (Relmap c)

-- | Get a term name from named attribute.
getTerm :: RopGet c TermName

-- | Get list of term names from named attribute.
getTerms :: RopGet c [TermName]
getTermsCo :: RopGet c (Bool, [TermName])

-- | Get list of term-name pairs from named attribute.
getTermPairs :: RopGet c [TermName2]
getWithTerms :: RopGet c [Terminal String]
getTermTrees :: RopGet c [Named TokenTree]
getSwitch :: RopUse c -> String -> Ab Bool

-- | Get word from named attribute.
--   
--   <pre>
--   consXxx :: RopCons c
--   consXxx u = do
--     sign &lt;- getWord u "-sign"
--     ...
--   </pre>
getWord :: RopGet c String
getInt :: RopGet c Int


-- | Content operators.
module Koshucode.Baala.Op.Content.Arith
copsArith :: (CDec c, CList c, CText c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.List
copsList :: CContent c => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.Logic
copsLogic :: (CBool c, CNil c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Content.Order
copsOrder :: (CBool c, Eq c, Ord c) => [Cop c]


-- | Content formula.
module Koshucode.Baala.Op.Type

-- | Vanilla type
data VContent

-- | Boolean type
VBool :: Bool -> VContent

-- | String type
VText :: String -> VContent

-- | Decimal number type
VDec :: Decimal -> VContent

-- | Sign of no ordinary type
VNil :: VContent

-- | List type (objective collection)
VList :: [VContent] -> VContent

-- | Set type (informative collection)
VSet :: [VContent] -> VContent

-- | Assn type (set of terms)
VAssn :: [Named VContent] -> VContent

-- | Relation type
VRel :: (Rel VContent) -> VContent
type VCop = CopFun VContent
instance Show VContent
instance CRel VContent
instance CAssn VContent
instance CSet VContent
instance CNil VContent
instance CList VContent
instance CText VContent
instance CDec VContent
instance CBool VContent
instance Write VContent
instance CContent VContent
instance PrimContent VContent
instance Ord VContent
instance Eq VContent


-- | Builtin relmap operator.
module Koshucode.Baala.Op.Builtin

module Koshucode.Baala.Op.Check

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>check-term [ -just /P ... | -has /P ... | -but /N ...
--   ]</tt></i> Check occurences of terms for input relation.</li>
--   <li><i><tt>duplicate /P ...</tt></i> Pass duplicate tuples on
--   <tt>/P</tt> ...</li>
--   </ul>
ropsCheck :: CContent c => [Rop c]

module Koshucode.Baala.Op.Cox

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>add /N E ...</tt></i> Add terms of name <tt>/N</tt> and
--   content <tt>E</tt> ...</li>
--   <li><i><tt>keep E</tt></i> Keep tuples <tt>E</tt> equals true.</li>
--   <li><i><tt>omit E</tt></i> Omit tuples <tt>E</tt> equals true.</li>
--   </ul>
ropsCox :: CContent c => [Rop c]
consAdd :: CContent c => RopCons c
relmapAdd :: (CList c, CRel c, Write c) => RopUse c -> ([Cop c], [NamedCox c], [NamedCox c]) -> Relmap c
consSubst :: CContent c => RopCons c
relmapSubst :: (CList c, CRel c, Write c) => RopUse c -> ([Cop c], [NamedCox c], [NamedCox c]) -> Relmap c
consFilter :: CContent c => Bool -> RopCons c
relmapFilter :: (CList c, CRel c, CBool c, Write c) => RopUse c -> (Bool, [Cop c], [NamedCox c], Cox c) -> Relmap c
relkitFilter :: (CList c, CRel c, CBool c, Write c) => (Bool, [Cop c], [NamedCox c], Cox c) -> RelkitFlow c
consRange :: CContent c => RopCons c
relmapRange :: CContent c => RopUse c -> (TermName, [Cop c], Cox c, Cox c) -> Relmap c
consSplit :: CContent c => RopCons c
relmapSplit :: (CList c, CRel c, Write c, CBool c) => RopUse c -> ([Cop c], [NamedCox c], [NamedCox c]) -> Relmap c
relkitSplit :: (CList c, CRel c, Write c, CBool c) => ([Cop c], [NamedCox c], [NamedCox c]) -> RelkitFlow c

module Koshucode.Baala.Op.Gadget

-- | Gadgets
--   
--   <ul>
--   <li><i><tt>contents</tt></i> Make nary relation of all contetnts.</li>
--   <li><i><tt>number /N [ -order /P ... ]</tt></i> Add numbering term
--   <tt>/N</tt> ordered by <tt>/P</tt> ...</li>
--   <li><i><tt>rank /N -order /P ... [ -dense ]</tt></i> Add term
--   <tt>/N</tt> for ranking ordered by <tt>/P</tt> ...</li>
--   <li><i><tt>size /N</tt></i> Calculate cardinality of input
--   relation.</li>
--   </ul>
ropsGadget :: CContent c => [Rop c]
consEmpty :: RopCons c
relmapEmpty :: RopUse c -> Relmap c
consContents :: Ord c => RopCons c
relmapContents :: Ord c => RopUse c -> TermName -> Relmap c
consSize :: CDec c => RopCons c
relmapSize :: CDec c => RopUse c -> TermName -> Relmap c
relkitSize :: CDec c => TermName -> RelkitFlow c
consNumber :: (Ord c, CDec c) => RopCons c
relmapNumber :: (CDec c, Ord c) => RopUse c -> (TermName, [TermName], Int) -> Relmap c
relkitNumber :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c
consRank :: (Ord c, CDec c) => RopCons c
relmapGapRank :: (CDec c, Ord c) => RopUse c -> (TermName, [TermName], Int) -> Relmap c
relkitGapRank :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c
relmapDenseRank :: (CDec c, Ord c) => RopUse c -> (TermName, [TermName], Int) -> Relmap c
relkitDenseRank :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c

module Koshucode.Baala.Op.Meta

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>koshu-cop /N</tt></i> Retrieve list of content
--   operators.</li>
--   <li><i><tt>koshu-cop-infix /N [ -height /N ][ -dir /N ]</tt></i>
--   Retrieve list of infix specifications.</li>
--   <li><i><tt>koshu-rop /N</tt></i> Retrieve list of relmap
--   operators.</li>
--   <li><i><tt>koshu-version /N</tt></i> Get version number of the koshu
--   calculator.</li>
--   </ul>
ropsMeta :: CContent c => [Rop c]
consKoshuCop :: CContent c => RopCons c
relkitKoshuCop :: CContent c => TermName -> RelkitGlobal c
consKoshuCopInfix :: CContent c => RopCons c
relkitKoshuCopInfix :: CContent c => (TermName, Maybe TermName, Maybe TermName) -> RelkitGlobal c
consKoshuRop :: CContent c => RopCons c
relkitKoshuRop :: CContent c => (Maybe TermName, Maybe TermName, Maybe TermName) -> RelkitGlobal c
consKoshuVersion :: CContent c => RopCons c
relkitKoshuVersion :: CContent c => TermName -> Global c -> Maybe Relhead -> Ab (Relkit c)

module Koshucode.Baala.Op.Source

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>dee</tt></i> Nullary full relation.</li>
--   <li><i><tt>dum</tt></i> Nullary empty relation.</li>
--   <li><i><tt>source</tt></i> Read relation from data source.</li>
--   </ul>
ropsSource :: CContent c => [Rop c]
consConst :: CContent c => RopCons c
relmapConst :: RopUse c -> Rel c -> Relmap c
relkitConst :: Rel c -> RelkitFlow c
consDee :: RopCons c
consDum :: RopCons c
consSource :: RopCons c
consSourceTerm :: RopCons c
relmapSourceTerm :: RopUse c -> String -> Map (Relmap c)

module Koshucode.Baala.Op.Term

-- | Relmap operators for manipulating term names.
--   
--   <ul>
--   <li><i><tt>cut</tt></i> Project relation to unspecified terms.</li>
--   <li><i><tt>cut-term</tt></i> Project relation to terms not in relmap
--   output.</li>
--   <li><i><tt>pick</tt></i> Project relation to specified terms.</li>
--   <li><i><tt>pick-term</tt></i> Project relation to terms in relmap
--   output.</li>
--   <li><i><tt>rename</tt></i> Change term name.</li>
--   <li><i><tt>move</tt></i> Change heading.</li>
--   <li><i><tt>prefix /P /N ...</tt></i> Add prefix <tt>/P</tt> to terms
--   <tt>/N</tt> ...</li>
--   <li><i><tt>prefix-change /P /Q</tt></i> Change prefix from <tt>/P</tt>
--   to <tt>/Q</tt>.</li>
--   <li><i><tt>unprefix /P</tt></i> Remove prefix <tt>/P</tt> from term
--   name.</li>
--   </ul>
ropsTerm :: Ord c => [Rop c]
consPick :: RopCons c
relmapPick :: RopUse c -> [TermName] -> Relmap c
relkitPick :: [TermName] -> RelkitFlow c
consCut :: RopCons c
relmapCut :: RopUse c -> [TermName] -> Relmap c
relkitCut :: [TermName] -> RelkitFlow c
consPickTerm :: RopCons c
relmapPickTerm :: RopUse c -> Relmap c -> Relmap c
relkitPickTerm :: RelkitBinary c
consCutTerm :: RopCons c
relmapCutTerm :: RopUse c -> Relmap c -> Relmap c
relkitCutTerm :: RelkitBinary c
consMove :: RopCons c
relmapMove :: RopUse c -> ([TermName], [TermName]) -> Relmap c
relkitMove :: ([TermName], [TermName]) -> RelkitFlow c
consRename :: RopCons c
relmapRename :: RopUse c -> [TermName2] -> Relmap c
relkitRename :: [TermName2] -> RelkitFlow c
consPrefix :: RopCons c
relmapPrefix :: RopUse c -> String -> [String] -> Relmap c

-- | Add prefix to specified terms.
relkitPrefix :: String -> [String] -> RelkitFlow c
consUnprefix :: RopCons c
relmapUnprefix :: RopUse c -> String -> Relmap c

-- | Remove prefix
relkitUnprefix :: String -> RelkitFlow c
consPrefixChange :: RopCons c
relmapPrefixChange :: RopUse c -> (String, String) -> Relmap c

-- | Change prefix
relkitPrefixChange :: (String, String) -> RelkitFlow c

module Koshucode.Baala.Op.Peripheral

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>member /N /N</tt></i> Membership of set or list.</li>
--   <li><i><tt>rdf P /S /O</tt></i> Retrieve relation from RDF-like
--   judgements.</li>
--   </ul>
ropsPeripheral :: CContent c => [Rop c]
consMember :: (Ord c, CSet c, CList c, CText c) => RopCons c
relmapMember :: (Ord c, CSet c, CList c, CText c) => RopUse c -> TermName2 -> Relmap c
relkitMember :: (Ord c, CSet c, CList c, CText c) => TermName2 -> RelkitFlow c
consRdf :: RopCons c
consAssn :: CAssn c => RopCons c
relmapAssn :: CAssn c => RopUse c -> ([TermName], TermName) -> Relmap c
relkitAssn :: CAssn c => ([TermName], TermName) -> RelkitFlow c
consUnassn :: CAssn c => RopCons c
relmapUnassn :: CAssn c => RopUse c -> (TermName, [TermName]) -> Relmap c
relkitUnassn :: CAssn c => (TermName, [TermName]) -> RelkitFlow c

-- | Get typename.
consTypename :: CContent c => RopCons c


-- | Fundamental operators in relational algebra.
--   
--   Tropashko's relational lattice is a kind of relational algebra.
--   Relational algebra is an algebraic formulation for relational model.
--   In constrast to Codd's original relational algebra, Tropashko lattice
--   is in more conventional and strict ways. The lattice has fundamental
--   operators from which other operators are derived.
module Koshucode.Baala.Op.Lattice.Tropashko
consMeet :: Ord c => RopCons c

-- | Meet two relations.
relmapMeet :: Ord c => RopUse c -> Relmap c -> Relmap c

-- | Meet two relations.
relkitMeet :: Ord c => RelkitBinary c
consJoin :: Ord c => RopCons c

-- | Join two relations.
relmapJoin :: Ord c => RopUse c -> Relmap c -> Relmap c
relmapJoinList :: Ord c => RopUse c -> [Relmap c] -> Relmap c

-- | Join two relations.
relkitJoin :: RelkitBinary c

module Koshucode.Baala.Op.Nil

-- | Relmap operators that handles nils.
--   
--   <ul>
--   <li><i><tt>both R</tt></i></li>
--   <li><i><tt>maybe R</tt></i> Meet input and given relation. It keeps
--   input tuples of which counterparts are totally negated.</li>
--   </ul>
ropsNil :: (Ord c, CRel c, CNil c) => [Rop c]
consBoth :: (Ord c, CRel c, CNil c) => RopCons c
relmapBoth :: (Ord c, CRel c, CNil c) => RopUse c -> Map (Relmap c)
consMaybe :: (Ord c, CNil c) => RopCons c
relmapMaybe :: (Ord c, CNil c) => RopUse c -> Map (Relmap c)
relkitMaybe :: (Ord c, CNil c) => RelkitBinary c


-- | Restrict by relmap
module Koshucode.Baala.Op.Lattice.Restrict
consSome :: Ord c => RopCons c
relmapSome :: Ord c => RopUse c -> Map (Relmap c)
relkitSome :: Ord c => RelkitBinary c
consNone :: Ord c => RopCons c
relmapNone :: Ord c => RopUse c -> Map (Relmap c)
relkitNone :: Ord c => RelkitBinary c
consSub :: Ord c => RopCons c
relmapSub :: Ord c => RopUse c -> Map (Relmap c)
relkitSub :: Ord c => RelkitBinary c
consCompose :: Ord c => RopCons c
relmapCompose :: Ord c => RopUse c -> Map (Relmap c)
relkitCompose :: Ord c => RelkitBinary c


-- | Relmap operators on relational lattice.
module Koshucode.Baala.Op.Lattice.Rop

-- | Lattice implementations of relmap operators.
--   
--   <ul>
--   <li><i><tt>join</tt></i> Join two relations.</li>
--   <li><i><tt>meet</tt></i> Meet two relations.</li>
--   <li><i><tt>none</tt></i> Restriction by relmaps.</li>
--   <li><i><tt>some</tt></i> Restriction by relmaps.</li>
--   <li><i><tt>sub</tt></i> Restriction to subrelation.</li>
--   </ul>
ropsLattice :: (Ord c, CRel c) => [Rop c]


-- | Lattice relmap operators.
module Koshucode.Baala.Op.Lattice

module Koshucode.Baala.Op.Control

-- | Implementation of relational operators.
ropsControl :: CContent c => [Rop c]
consIf :: Ord c => RopCons c
relmapIf :: Ord c => RopUse c -> [Relmap c] -> Relmap c
relkitIf :: Ord c => RelkitConfl c
consWhen :: Ord c => RopCons c
consUnless :: Ord c => RopCons c
consFix :: Ord c => RopCons c
consFixJoin :: Ord c => RopCons c
consRepeat :: Ord c => RopCons c
consEqual :: Ord c => RopCons c
relmapEqual :: Ord c => RopUse c -> Map (Relmap c)
relkitEqual :: Ord c => RelkitBinary c

module Koshucode.Baala.Op.Nest.Flow
consDown :: CRel c => RopCons c
relmapDown :: CRel c => RopUse c -> TermName -> Relmap c
relkitDown :: CRel c => TermName -> RelkitFlow c
consUp :: CRel c => RopCons c
relmapUp :: CRel c => RopUse c -> TermName -> Relmap c
relkitUp :: CRel c => TermName -> RelkitFlow c
consJoinUp :: Ord c => RopCons c
relmapJoinUp :: Ord c => RopUse c -> [Terminal String] -> Relmap c
consChunk :: (Ord c, CRel c) => RopCons c
relmapChunk :: (Ord c, CRel c) => RopUse c -> [TermName] -> [TermName] -> Relmap c
relkitChunk :: (Ord c, CRel c) => [TermName] -> [TermName] -> RelkitFlow c

module Koshucode.Baala.Op.Nest.Confl
consCopy :: RopCons c
consFor :: CRel c => RopCons c
relmapFor :: CRel c => RopUse c -> [Terminal String] -> TermName -> Map (Relmap c)
relkitFor :: CRel c => TermName -> RelkitBinary c
consGroup :: (Ord c, CRel c) => RopCons c
relmapGroup :: (Ord c, CRel c) => RopUse c -> TermName -> Map (Relmap c)
relkitGroup :: (Ord c, CRel c) => TermName -> RelkitBinary c
consGroupBy :: (Ord c, CRel c) => RopCons c
consSlice :: CRel c => RopCons c
relmapSlice :: CRel c => RopUse c -> [Terminal String] -> TermName -> Map (Relmap c)
relkitSlice :: CRel c => TermName -> RelkitBinary c
consSliceUp :: CRel c => RopCons c
relmapSliceUp :: CRel c => RopUse c -> [Terminal String] -> Map (Relmap c)
relkitSliceUp :: CRel c => RelkitBinary c
consNest :: (Ord c, CRel c) => RopCons c
relmapNest :: (Ord c, CRel c) => RopUse c -> (Bool, [TermName], TermName) -> Relmap c
consUnnest :: (Ord c, CRel c) => RopCons c
relmapUnnest :: (Ord c, CRel c) => RopUse c -> TermName -> Relmap c


-- | Relational operators for nested relations.
module Koshucode.Baala.Op.Nest.Rop

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>copy N R</tt></i> Naming input relation as <tt>N</tt> in
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>down /N</tt></i> Enclose input relation in a term
--   <tt>/N</tt>.</li>
--   <li><i><tt>for /P R</tt></i> Convert nested relation <tt>/P</tt> by
--   relmap <tt>R</tt>.</li>
--   <li><i><tt>group /N R</tt></i> Group tuples in <tt>R</tt> by input
--   relation.</li>
--   <li><i><tt>slice /N R</tt></i> Add nested relation as output of relmap
--   <tt>R</tt>.</li>
--   <li><i><tt>up /P</tt></i> Lift up nested relation.</li>
--   </ul>
ropsNest :: CContent c => [Rop c]


-- | Relmap operators for nested relations.
module Koshucode.Baala.Op.Nest


-- | Term-content operators.
module Koshucode.Baala.Op.Content.Cops
vanillaGlobal :: CContent c => Global c
vanillaRops :: CContent c => [Rop c]

-- | Term-content operators and its height table.
vanillaCops :: CContent c => ([Cop c], [Named InfixHeight])


-- | Term-content operators.
module Koshucode.Baala.Op.Content


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Op.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter


-- | Operators in Koshucode.
module Koshucode.Baala.Op
