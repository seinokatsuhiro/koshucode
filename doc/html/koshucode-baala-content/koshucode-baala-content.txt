-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Term-content operators in Koshucode
--   
--   An impelemntation of term-content operators and related
--   relation-mapping operators. These operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-content
@version 0.118.0.0


-- | Conversion geographic point from the plane rectangular coordinates
--   <tt>/n</tt> <tt>/x</tt> <tt>/y</tt> to the geographic coordinates
--   <tt>/latitude</tt> <tt>/longtitude</tt>. This program is based on the
--   method described in <i>Kazushige KAWASE, 2011,</i> <i>A More Concise
--   Method of Calculation for the Coordinate</i> <i>Conversion between
--   Geographic and Plane Rectangular</i> <i>Coordinates on the
--   Gauss-Krüger Projection,</i> <i>Bulletin of the Geospatial
--   Information Authority of Japan, 121</i>.
module Koshucode.Baala.Op.Cox.GeoDatumJp
type GeoPoint = (Double, Double)
convDegree :: Int -> GeoPoint -> GeoPoint
convRadian :: Int -> GeoPoint -> GeoPoint

module Koshucode.Baala.Op.Cox.Get

-- | Get relmap attribute as single cox.
getCox :: CContent c => RopGet c (Cox c)
getMaybeCox :: CContent c => RopGet c (Maybe (Cox c))
getOptionCox :: CContent c => c -> RopGet c (Cox c)

-- | Get relmap attribute as cox list with term name.
getTermCoxes :: CContent c => RopGet c [NamedCox c]

-- | Get relmap attribute as cox list with name.
getNamedCoxes :: CContent c => RopGet c [NamedCox c]
getWhere :: CContent c => RopGet c (CopSet c)

-- | Get relmap attribute as calculated content.
getContent :: CContent c => RopGet c c

-- | Get relmap attribute as list of calculated contents.
getContents :: CContent c => RopGet c [c]

-- | Get relmap attribute as optional content.
getOptContent :: CContent c => c -> RopGet c c

-- | Get relmap attribute as filler content, i.e., given content or empty.
getFiller :: CContent c => RopGet c c
getInt :: CContent c => RopGet c DecimalInteger

module Koshucode.Baala.Op.Cox.Range

-- | Implementation of relational operators.
ropsCoxRange :: CContent c => [Rop c]
type RangeAttr c = (TermName, CopSet c, Cox c, Cox c)
consRange :: CContent c => RopCons c
relmapRange :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relmapRangeYear :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeYear :: CContent c => RangeAttr c -> RelkitFlow c
relmapRangeMonth :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeMonth :: CContent c => RangeAttr c -> RelkitFlow c
relmapRangeDay :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeDay :: CContent c => RangeAttr c -> RelkitFlow c
relmapRangeHour :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeHour :: CContent c => RangeAttr c -> RelkitFlow c
relmapRangeMinute :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeMinute :: CContent c => RangeAttr c -> RelkitFlow c
relmapRangeSecond :: CContent c => Intmed c -> RangeAttr c -> Relmap c
relkitRangeSecond :: CContent c => RangeAttr c -> RelkitFlow c

module Koshucode.Baala.Op.Cox.Gadget

-- | Implementation of relational operators.
ropsCoxGadget :: CContent c => [Rop c]
consNumber :: (Ord c, CContent c) => RopCons c
relmapNumber :: (CDec c, Ord c) => Intmed c -> (TermName, [TermName], Int) -> Relmap c
relkitNumber :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c
consRank :: (Ord c, CContent c) => RopCons c
relmapGapRank :: (CDec c, Ord c) => Intmed c -> (TermName, [TermName], Int) -> Relmap c
relkitGapRank :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c
relmapDenseRank :: (CDec c, Ord c) => Intmed c -> (TermName, [TermName], Int) -> Relmap c
relkitDenseRank :: (Ord c, CDec c) => (TermName, [TermName], Int) -> RelkitFlow c
consRepeat :: (Ord c, CContent c) => RopCons c

module Koshucode.Baala.Op.Cox.Filter

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>keep E</tt></i> Keep tuples <tt>E</tt> equals true.</li>
--   <li><i><tt>omit E</tt></i> Omit tuples <tt>E</tt> equals true.</li>
--   </ul>
ropsCoxFilter :: CContent c => [Rop c]
consFilter :: CContent c => Bool -> RopCons c
relmapFilter :: (CList c, CRel c, CBool c, Write c) => Intmed c -> (Bool, CopSet c, Cox c) -> Relmap c
relkitFilter :: (CList c, CRel c, CBool c, Write c) => (Bool, CopSet c, Cox c) -> RelkitFlow c
consContain :: CContent c => RopCons c
relmapContain :: Eq c => Intmed c -> c -> Relmap c
relkitContain :: Eq c => c -> RelkitFlow c
consOmitAll :: RopCons c
relmapOmitAll :: Intmed c -> Relmap c

module Koshucode.Baala.Op.Cox.Empty

-- | Relmap operators that handles empties.
--   
--   <ul>
--   <li><i><tt>both R</tt></i></li>
--   <li><i><tt>maybe R</tt></i> Meet input and given relation. It keeps
--   input tuples of which counterparts are totally negated.</li>
--   </ul>
ropsCoxEmpty :: CContent c => [Rop c]
consBoth :: CContent c => RopCons c
relmapBoth :: (Ord c, CRel c) => Intmed c -> c -> Map (Relmap c)
consMaybe :: CContent c => RopCons c
relmapMaybe :: (Ord c, CRel c) => Intmed c -> c -> Map (Relmap c)
relkitMaybe :: (Ord c, CRel c) => c -> RelkitBinary c

module Koshucode.Baala.Op.Cox.Calc

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>add /N E ...</tt></i> Add terms of name <tt>/N</tt> and
--   content <tt>E</tt> ...</li>
--   </ul>
ropsCoxCalc :: CContent c => [Rop c]
consAdd :: CContent c => RopCons c
relmapAdd :: (CList c, CRel c, Write c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
consSubst :: CContent c => RopCons c
relmapSubst :: (CList c, CRel c, Write c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
consFill :: CContent c => RopCons c
relmapFill :: CContent c => Intmed c -> ([TermName], CopSet c, Cox c) -> Relmap c
consReplace :: CContent c => RopCons c
consReplaceAll :: CContent c => RopCons c
relmapReplaceAll :: CContent c => Intmed c -> (CopSet c, Cox c, Cox c) -> Relmap c
consSplit :: CContent c => RopCons c
relmapSplit :: (CList c, CRel c, Write c, CBool c) => Intmed c -> (CopSet c, [NamedCox c]) -> Relmap c
relkitSplit :: (CList c, CRel c, Write c, CBool c) => (CopSet c, [NamedCox c]) -> RelkitFlow c
consUnary :: CContent c => RopCons c
relmapUnary :: CContent c => Intmed c -> (TermName, [c]) -> Relmap c

module Koshucode.Baala.Op.Cox.Accessor

-- | Implementation of relational operators.
ropsCoxAccessor :: CContent c => [Rop c]
relmapClock :: CContent c => Intmed c -> (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> Relmap c
relkitClock :: CContent c => (CopSet c, TermName, (Cox c, Cox c, (MaybeCox c, MaybeCox c, MaybeCox c))) -> RelkitFlow c
relmapClockGet :: CContent c => Intmed c -> (CopSet c, Cox c, [Maybe TermName]) -> Relmap c
relkitClockGet :: CContent c => (CopSet c, Cox c, [Maybe TermName]) -> RelkitFlow c
relmapClockAlter :: CContent c => Intmed c -> (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> Relmap c
relkitClockAlter :: CContent c => (CopSet c, TermName, (MaybeCox c, MaybeCox c, MaybeCox c, MaybeCox c)) -> RelkitFlow c


-- | Helper functions to construct content expressions.
module Koshucode.Baala.Op.Cop.Coxhand

-- | Create a form with named blanks.
f :: [String] -> Map (Cox c)

-- | Shorthand for one-blank form — <tt>f ["#1"]</tt>
f1 :: Map (Cox c)

-- | Shorthand for two-blanks form — <tt>f ["#1", "#2"]</tt>
f2 :: Map (Cox c)

-- | Shorthand for three-blanks form — <tt>f ["#1", "#2", "#3"]</tt>
f3 :: Map (Cox c)

-- | Fill blanks in a named form.
i :: String -> [Cox c] -> Cox c
ib :: BlankName -> [Cox c] -> Cox c

-- | Fill blanks in the given form.
ix :: Cox c -> [Cox c] -> Cox c

-- | Fill two blanks in a named binary form.
bin :: String -> Cox c -> Cox c -> Cox c

-- | Create a named blank in a form.
b :: String -> Cox c

-- | Shorthand for the first blank — <tt>b "#1"</tt>
b1 :: Cox c

-- | Shorthand for the second blank — <tt>b "#2"</tt>
b2 :: Cox c

-- | Shorthand for the third blank — <tt>b "#3"</tt>
b3 :: Cox c


-- | Content operators.
module Koshucode.Baala.Op.Cop.Type
copsType :: CContent c => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Time
copsTime :: (CTime c, CDec c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Order
copsOrder :: (CBool c, Eq c, Ord c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Misc
copsMisc :: (CBool c, CEmpty c, CType c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Logic
copsLogic :: (CBool c, CEmpty c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.List
copsList :: CContent c => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Arith
copsArith :: CContent c => [Cop c]


-- | Vanilla content type.
module Koshucode.Baala.Type.Vanilla
type AboutC = About VContent
type AboutJudgesC = AboutJudges VContent
type GlobalC = Global VContent
type JudgeC = Judge VContent
type ResourceC = Resource VContent
type ResultC = Result VContent
type ResultWriterC = ResultWriter VContent

-- | Vanilla content type
data VContent

-- | Boolean type
VBool :: Bool -> VContent

-- | String type
VText :: String -> VContent

-- | Term name type
VTerm :: String -> VContent

-- | Decimal number type
VDec :: Decimal -> VContent

-- | Clock type
VClock :: Clock -> VContent

-- | Time type
VTime :: Time -> VContent

-- | Sign of no ordinary type
VEmpty :: VContent

-- | Interpretation type
VInterp :: Interp -> VContent

-- | Type for type
VType :: Type -> VContent

-- | List type (objective collection)
VList :: [VContent] -> VContent

-- | Set type (informative collection)
VSet :: [VContent] -> VContent

-- | Assn type (set of terms)
VAssn :: [Named VContent] -> VContent

-- | Relation type
VRel :: (Rel VContent) -> VContent
instance Show VContent
instance CRel VContent
instance CAssn VContent
instance CSet VContent
instance CType VContent
instance CInterp VContent
instance CTerm VContent
instance CEmpty VContent
instance CList VContent
instance CText VContent
instance CTime VContent
instance CClock VContent
instance CDec VContent
instance CBool VContent
instance ToJSON VContent
instance Write VContent
instance CContent VContent
instance CTypeOf VContent
instance Ord VContent
instance Eq VContent


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Op.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter


-- | Term-content operators.
module Koshucode.Baala.Op.Cop


-- | Operators in Koshucode.
module Koshucode.Baala.Op.Cox


-- | Rops and cops.
module Koshucode.Baala.Op.Global

-- | Global with operators.
vanillaGlobal :: CContent c => Global c

-- | Relmap operators
vanillaRops :: CContent c => [Rop c]

-- | Term-content operators.
vanillaCops :: CContent c => [Cop c]
