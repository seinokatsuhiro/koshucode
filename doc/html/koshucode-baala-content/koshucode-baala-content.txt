-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Term-content operators in Koshucode
--   
--   An impelemntation of term-content operators and related
--   relation-mapping operators. These operators are used in the
--   <tt>koshu</tt> calculator that is contained in the
--   <tt>koshucode-baala-calculator</tt> package.
@package koshucode-baala-content
@version 0.67.0.0

module Koshucode.Baala.Op.Cox.Get
ropBase :: RopUse c -> [Cop c]
ropBuild :: CContent c => RopUse c -> TokenTree -> Ab (Cox c)
getCox :: CContent c => RopUse c -> String -> Ab (Cox c)
getContent :: CContent c => RopUse c -> String -> Ab c
getOptContent :: CContent c => c -> RopUse c -> String -> Ab c
getContents :: CContent c => RopUse c -> String -> Ab [c]
getFiller :: CContent c => RopUse c -> String -> Ab c
getTermCoxes :: CContent c => RopUse c -> String -> Ab [NamedCox c]
getNamedCoxes :: CContent c => RopUse c -> String -> Ab [NamedCox c]

module Koshucode.Baala.Op.Cop.Coxhand
a :: String -> [Cox c] -> Cox c
ax :: Cox c -> [Cox c] -> Cox c
f :: [String] -> Map (Cox c)
f1 :: Map (Cox c)
f2 :: Map (Cox c)
f3 :: Map (Cox c)
v :: String -> Cox c
v1 :: Cox c
v2 :: Cox c
v3 :: Cox c

module Koshucode.Baala.Op.Cox.Filter

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>keep E</tt></i> Keep tuples <tt>E</tt> equals true.</li>
--   <li><i><tt>omit E</tt></i> Omit tuples <tt>E</tt> equals true.</li>
--   </ul>
ropsCoxFilter :: CContent c => [Rop c]
consFilter :: CContent c => Bool -> RopCons c
relmapFilter :: (CList c, CRel c, CBool c, Write c) => RopUse c -> (Bool, CopBundle c, Cox c) -> Relmap c
relkitFilter :: (CList c, CRel c, CBool c, Write c) => (Bool, CopBundle c, Cox c) -> RelkitFlow c
consContain :: CContent c => RopCons c
relmapContain :: Eq c => RopUse c -> c -> Relmap c
relkitContain :: Eq c => c -> RelkitFlow c
consOmitAll :: RopCons c
relmapOmitAll :: RopUse c -> Relmap c

module Koshucode.Baala.Op.Cox.Empty

-- | Relmap operators that handles empties.
--   
--   <ul>
--   <li><i><tt>both R</tt></i></li>
--   <li><i><tt>maybe R</tt></i> Meet input and given relation. It keeps
--   input tuples of which counterparts are totally negated.</li>
--   </ul>
ropsCoxEmpty :: CContent c => [Rop c]
consBoth :: CContent c => RopCons c
relmapBoth :: Ord c => RopUse c -> c -> Map (Relmap c)
consMaybe :: CContent c => RopCons c
relmapMaybe :: Ord c => RopUse c -> c -> Map (Relmap c)
relkitMaybe :: Ord c => c -> RelkitBinary c

module Koshucode.Baala.Op.Cox.Calc

-- | Implementation of relational operators.
--   
--   <ul>
--   <li><i><tt>add /N E ...</tt></i> Add terms of name <tt>/N</tt> and
--   content <tt>E</tt> ...</li>
--   </ul>
ropsCoxCalc :: CContent c => [Rop c]
consAdd :: CContent c => RopCons c
relmapAdd :: (CList c, CRel c, Write c) => RopUse c -> (CopBundle c, [NamedCox c]) -> Relmap c
consSubst :: CContent c => RopCons c
relmapSubst :: (CList c, CRel c, Write c) => RopUse c -> (CopBundle c, [NamedCox c]) -> Relmap c
consRange :: CContent c => RopCons c
relmapRange :: CContent c => RopUse c -> (TermName, [Cop c], Cox c, Cox c) -> Relmap c
consFill :: CContent c => RopCons c
relmapFill :: CContent c => RopUse c -> ([TermName], [Cop c], Cox c) -> Relmap c
consReplace :: CContent c => RopCons c
consReplaceAll :: CContent c => RopCons c
relmapReplaceAll :: CContent c => RopUse c -> ([Cop c], Cox c, Cox c) -> Relmap c
consSplit :: CContent c => RopCons c
relmapSplit :: (CList c, CRel c, Write c, CBool c) => RopUse c -> (CopBundle c, [NamedCox c]) -> Relmap c
relkitSplit :: (CList c, CRel c, Write c, CBool c) => (CopBundle c, [NamedCox c]) -> RelkitFlow c
consUnary :: CContent c => RopCons c
relmapUnary :: CContent c => RopUse c -> (TermName, [c]) -> Relmap c


-- | Content operators.
module Koshucode.Baala.Op.Cop.Order
copsOrder :: (CBool c, Eq c, Ord c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Logic
copsLogic :: (CBool c, CEmpty c) => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.List
copsList :: CContent c => [Cop c]


-- | Content operators.
module Koshucode.Baala.Op.Cop.Arith
copsArith :: (CDec c, CList c, CText c) => [Cop c]


-- | Term-content operators.
module Koshucode.Baala.Op.Cop.Cops
vanillaGlobal :: CContent c => Global c
vanillaRops :: CContent c => [Rop c]

-- | Term-content operators and its height table.
vanillaCops :: CContent c => ([Cop c], [Named InfixHeight])


-- | Term-content operators.
module Koshucode.Baala.Op.Cop


-- | Quasiquoter of Koshucode
module Koshucode.Baala.Op.Cox.Quoter

-- | Quasiquoter for <tt>[koshu| ... |]</tt>.
koshu :: QuasiQuoter


-- | Operators in Koshucode.
module Koshucode.Baala.Op.Cox
