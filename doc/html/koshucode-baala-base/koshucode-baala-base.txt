-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A notational system for relational model
--   
--   Koshucode is a notation for people and computers who read, write, and
--   calculate relational data. This library provides functions for
--   handling koshucode on computers.
@package koshucode-baala-base
@version 0.34.0.0

module Koshucode.Baala.Base.Syntax.HashWord
hashWordTable :: [(String, String)]
hashWord :: String -> Maybe String
hashWordInvert :: String -> Maybe String
hashString :: String -> String
hashSplit :: String -> [String]

module Koshucode.Baala.Base.Prelude.Unicode
data GeneralCategoryGroup

-- | Lu Ll Lt Lm Lo
UnicodeLetter :: GeneralCategoryGroup

-- | Mn Mc Me
UnicodeMark :: GeneralCategoryGroup

-- | Nd Nl No
UnicodeNumber :: GeneralCategoryGroup

-- | Pc Pd Ps Pe Pi Pf Po
UnicodePunctuation :: GeneralCategoryGroup

-- | Sm Sc Sk So
UnicodeSymbol :: GeneralCategoryGroup

-- | Zs Zl Zp
UnicodeSeperator :: GeneralCategoryGroup

-- | Cc Cf Cs Co Cn
UnicodeOther :: GeneralCategoryGroup
generalCategoryGroup :: Char -> GeneralCategoryGroup
instance Show GeneralCategoryGroup
instance Eq GeneralCategoryGroup
instance Ord GeneralCategoryGroup
instance Bounded GeneralCategoryGroup

module Koshucode.Baala.Base.Prelude.Pretty
class Pretty a where docv = vcat . map doc doch = hsep . map doc
doc :: Pretty a => a -> Doc
docv, doch :: Pretty a => [a] -> Doc
docTag :: String -> Doc -> Doc
docColonList :: Pretty a => [a] -> [Doc]

-- | Enclose document in <tt>(</tt> and <tt>)</tt>.
docParen :: Doc -> Doc

-- | Enclose document in <tt>[</tt> and <tt>]</tt>.
docBracket :: Doc -> Doc

-- | Enclose document in <tt>{</tt> and <tt>}</tt>.
docBrace :: Doc -> Doc

-- | Enclose document in <tt>&lt;</tt> and <tt>&gt;</tt>.
docAngle :: Doc -> Doc

-- | Enclose document in <tt>&lt;|</tt> and <tt>|&gt;</tt>.
docAngleBar :: Doc -> Doc

-- | Enclose document in <tt>"</tt> and <tt>"</tt>.
docQuote :: Doc -> Doc
instance Pretty Doc


-- | Position in list.
module Koshucode.Baala.Base.Prelude.Position
ap :: ((Int -> v) -> [v] -> a) -> [v] -> a
like :: [Int] -> [Char] -> Bool

-- | Indices of shared elements.
--   
--   <pre>
--   &gt;&gt;&gt; "bdk" `sharedIndex` "abcdefg"
--   [1,3]
--   </pre>
sharedIndex :: Eq a => [a] -> [a] -> [Int]

-- | Pick indexed elements.
--   
--   <pre>
--   &gt;&gt;&gt; indexPick [1,3] "abcdefg"
--   "bd"
--   </pre>
indexPick :: [Int] -> [a] -> [a]

-- | Cut indexed elements
--   
--   <pre>
--   &gt;&gt;&gt; indexCut [1,3] "abcdefg"
--   "acefg"
--   </pre>
indexCut :: [Int] -> [a] -> [a]


-- | Lines.
module Koshucode.Baala.Base.Prelude.Line

-- | Line number.
type LineNumber = Int

-- | Line number and its content.
linesCrlfNumbered :: String -> [(LineNumber, String)]

-- | Split string into lines. The result strings do not contain carriage
--   returns (<tt>\r</tt>) and line feeds (<tt>\n</tt>).
linesCrlf :: String -> [String]


-- | General utilities
module Koshucode.Baala.Base.Prelude.Class

-- | Types that has name
class Name a where names = map name
name :: Name a => a -> String
names :: Name a => [a] -> [String]

-- | Entry in association list.
type Named a = (String, a)
type Map a = a -> a
type Listmap a = forall b. Map [b]
data YesNo a
Yes :: a -> YesNo a
No :: a -> YesNo a
instance Show a => Show (YesNo a)
instance Eq a => Eq (YesNo a)
instance Ord a => Ord (YesNo a)


-- | General utilities
module Koshucode.Baala.Base.Prelude.Utility
mapFst :: (a -> c) -> (a, b) -> (c, b)
mapSnd :: (b -> c) -> (a, b) -> (a, c)
cons1 :: a -> ([a], b) -> ([a], b)
mapmapFst :: (a -> c) -> [(a, b)] -> [(c, b)]
mapmapSnd :: (b -> c) -> [(a, b)] -> [(a, c)]
maybePairs :: [a] -> Maybe [(a, a)]

-- | Remove duplicate elements.
unique :: Ord a => [a] -> [a]
unionUp :: Eq a => [a] -> [a] -> [a]

-- | Singleton list
singleton :: a -> [a]
divideBy :: Eq a => a -> [a] -> [[a]]
divideByP :: Eq a => (a -> Bool) -> [a] -> [[a]]

-- | Add spaces.
--   
--   <pre>
--   &gt;&gt;&gt; padRight 10 "abc"
--   "abc       "
--   </pre>
padRight :: Int -> Map String

-- | Add spaces.
--   
--   <pre>
--   &gt;&gt;&gt; padLeft 10 "abc"
--   "       abc"
--   </pre>
padLeft :: Int -> Map String

-- | Gather what is gotten by splitter.
gather :: ([a] -> (b, [a])) -> [a] -> [b]
gatherWith :: (c -> [a] -> (b, [a])) -> [c] -> [a] -> [b]

-- | Gather (key,value) to a Map key [value]
gatherToMap :: Ord k => [(k, v)] -> Map k [v]
lookupSatisfy :: a -> [(a -> Bool, b)] -> Maybe b
lookupMap :: Ord k => k -> Map k a -> Maybe a

module Koshucode.Baala.Base.Data.Comment
data CommentDoc
CommentDoc :: [CommentSec] -> CommentDoc
data CommentSec
CommentSec :: String -> [String] -> CommentSec
class Texts a
texts :: Texts a => a -> [String]
emacsModeComment :: String
instance Show CommentSec
instance Eq CommentSec
instance Ord CommentSec
instance Show CommentDoc
instance Eq CommentDoc
instance Ord CommentDoc
instance Texts CommentSec
instance Texts CommentDoc

module Koshucode.Baala.Base.Prelude


-- | Judgements: a symbolic representations of affirmed or denied
--   statements.
module Koshucode.Baala.Base.Data.Judge

-- | Judgement on type <tt>c</tt>.
--   
--   Judgement (or judge for short) is divided into three parts: logical
--   quality, sign of relation, and argument. <a>Bool</a> value of logical
--   quality corresponds to affirmed or denied judge. <a>String</a> value
--   of sign represents certain sentence pattern that gives intepretation
--   of data. Sentence pattern has placeholders filled by (<a>String</a>,
--   <tt>c</tt>) values of argument. -
data Judge c
Judge :: Bool -> JudgePattern -> [Named c] -> Judge c

-- | Pattern of judgement.
type JudgePattern = String

-- | Affirm judge, i.e., change logical quality to <a>True</a>.
affirmJudge :: Map (Judge c)

-- | Deny judge, i.e., change logical quality to <a>False</a>.
denyJudge :: Map (Judge c)
isAffirmed :: Judge c -> Bool
isDenied :: Judge c -> Bool

-- | Print judges.
putJudges :: (Ord c, Pretty c) => [Judge c] -> IO ()
hPutJudges :: (Ord c, Pretty c) => Handle -> [Judge c] -> IO ()

-- | Sort terms in alphabetical order.
abcJudge :: Ord c => Map (Judge c)
instance Show c => Show (Judge c)
instance Eq c => Eq (Judge c)
instance Ord c => Ord (Judge c)
instance (Ord c, Pretty c) => Pretty (Judge c)
instance Functor Judge


-- | Terms in heading of relation
module Koshucode.Baala.Base.Data.Relterm

-- | Term in heading of relation
data Relterm

-- | For non-relation
Term :: String -> Relterm

-- | For relation
Nest :: String -> [Relterm] -> Relterm
termsIndex :: [Relterm] -> [[String]] -> [[Int]]

-- | Term path to term position
--   
--   <pre>
--   &gt;&gt;&gt; termIndex ["/b"] [Term "/a", Term "/b", Term "/c"]
--   [1]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; termIndex ["/e"] [Term "/a", Term "/b", Term "/c"]
--   [-1]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; termIndex ["/r", "/b"] [Nest "/r" [Term "/a", Term "/b"]]
--   [0, 1]
--   </pre>
termIndex :: [Relterm] -> [String] -> [Int]
instance Show Relterm
instance Eq Relterm
instance Ord Relterm
instance Pretty Relterm
instance Name Relterm


-- | Heading of relations
module Koshucode.Baala.Base.Data.TermPos

-- | Term position
data TermPos
TermPos :: String -> Int -> TermPos

-- | Term name
posName :: TermPos -> String

-- | Position
posIndex :: TermPos -> Int

-- | Indicies
posPoss :: [TermPos] -> [Int]

-- | Pick contents by positions.
csPick :: [TermPos] -> Map [c]

-- | Cut contents by positions.
csCut :: [TermPos] -> Map [c]

-- | Pick an inner part.
termsInner :: [TermPos] -> [[String]]

-- | Pick an outer part.
termsOuter :: [TermPos] -> [[String]]
instance Show TermPos
instance Eq TermPos
instance Ord TermPos
instance Name TermPos


-- | Heading of relations
module Koshucode.Baala.Base.Data.Relhead

-- | Heading of relation as a list of terms
data Relhead
Relhead :: [Relterm] -> Relhead
headTerms :: Relhead -> [Relterm]

-- | Make head from term names.
--   
--   <pre>
--   &gt;&gt;&gt; headFrom ["/a", "/b"]
--   Relhead [Term "/a", Term "/b"]
--   </pre>
headFrom :: [String] -> Relhead

-- | List of term names.
--   
--   <pre>
--   &gt;&gt;&gt; headNames $ headFrom ["/a", "/b"]
--   ["/a", "/b"]
--   </pre>
headNames :: Relhead -> [String]

-- | Number of terms.
--   
--   <pre>
--   &gt;&gt;&gt; headDegree $ headFrom ["/a", "/b"]
--   2
--   </pre>
headDegree :: Relhead -> Int

-- | Reconstruct head.
headChange :: (Map [String]) -> Map Relhead
headTermExist :: Relhead -> [String] -> Bool
headTermCheck :: Relhead -> [YesNo String] -> Bool
headExistTerms :: Relhead -> Map [String]
headNonExistTerms :: Relhead -> Map [String]
headIndex :: Relhead -> [[String]] -> [[Int]]
headIndex1 :: Relhead -> [String] -> [Int]

-- | Positions of given names in a head
posOf :: Relhead -> [[String]] -> [TermPos]

-- | Positions of given (sub)head in a head
posFrom :: Relhead -> Relhead -> [TermPos]

-- | Identity of <a>mappend</a>
mempty :: Monoid a => a

-- | An associative operation
mappend :: Monoid a => a -> a -> a
instance Show Relhead
instance Eq Relhead
instance Ord Relhead
instance Pretty Relhead
instance Monoid Relhead


-- | Type for relations
module Koshucode.Baala.Base.Data.Rel

-- | Relations on type c. Heading of relation and body of relation as a
--   list of tuples.
data Rel c
Rel :: Relhead -> (Relbody c) -> Rel c

-- | List of positional args.
type Relbody c = [[c]]

-- | Relational constant that has no terms and no tuples.
reldum :: Rel c

-- | Relational constant that has no terms and the empty tuple.
reldee :: Rel c
instance Show c => Show (Rel c)
instance Eq c => Eq (Rel c)
instance Ord c => Ord (Rel c)
instance Pretty c => Pretty (Rel c)


-- | This module provides a container for tokens. No tokens in Koshucode
--   are in a extent of multiple lines. <a>CodeLine</a> includes whole
--   tokens in a line. You can represent tokenized source code as a list of
--   <a>CodeLine</a>.
module Koshucode.Baala.Base.Syntax.CodeLine

-- | Tokens per line.
data CodeLine a
CodeLine :: LineNumber -> String -> [a] -> CodeLine a

-- | Line number, from 1.
codeLineNumber :: CodeLine a -> LineNumber

-- | Line content without newline.
codeLineContent :: CodeLine a -> String

-- | Tokens in the line.
codeLineTokens :: CodeLine a -> [a]

-- | Type of function that splits a next token from string. Tokens can
--   includes <a>TokenNumber</a>.
type NextToken a = TokenNumber -> String -> (a, String)

-- | Token number, from 1.
type TokenNumber = Int

-- | Split source text into <a>CodeLine</a> list.
--   
--   <ol>
--   <li>Split source text into lines by line delimiters (carriage return
--   <tt>\r</tt> or line feed <tt>\n</tt>).</li>
--   <li>Numbering lines from 1. Internally, this is represented as a list
--   of pairs <tt>(</tt><a>LineNumber</a><tt>,</tt>
--   <a>String</a><tt>)</tt>.</li>
--   <li>Tokenize each lines, and put tokens together in
--   <a>CodeLine</a>.</li>
--   </ol>
codeLines :: NextToken a -> String -> [CodeLine a]
instance Typeable1 CodeLine
instance Show a => Show (CodeLine a)
instance Eq a => Eq (CodeLine a)
instance Ord a => Ord (CodeLine a)
instance Data a => Data (CodeLine a)
instance Pretty (CodeLine a)

module Koshucode.Baala.Base.Syntax.Tree

-- | Tree of leaf and branch.
data Tree a

-- | Leaf. Terminal of tree.
TreeL :: a -> Tree a

-- | Branch. Paren-type and subtrees.
TreeB :: Int -> [Tree a] -> Tree a

-- | Convert a list of elements to a single tree.
tree :: Show a => ParenType a -> [a] -> Tree a

-- | Convert a list of elements to trees.
trees :: Show a => ParenType a -> [a] -> [Tree a]

-- | Convert tree to list of tokens.
untree :: TypeParen a -> Tree a -> [a]

-- | Convert tree to list of tokens.
untrees :: TypeParen a -> [Tree a] -> [a]

-- | Simplify tree by removing double parens, like <tt>((a))</tt> to
--   <tt>(a)</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; undouble $ TreeB 0 [Tree 0 [TreeL "A", TreeL "B"]]
--   Tree 0 [TreeL "A", TreeL "B"]
--   </pre>
undouble :: Map (Tree a)

-- | Get a paren type.
type ParenType a = a -> Int

-- | Get parens from a type.
type TypeParen a = Int -> (a, a)

-- | Make <a>ParenType</a> and <a>TypeParen</a> functions from a
--   type-open-close table.
--   
--   Make paren/type functions from <tt>()</tt> and <tt>[]</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let (pt, tp) = parenTable [(1,'(',')'), (2,'[',']')]
--   </pre>
--   
--   Get paren types for each chars. Types of open parens are positive
--   integer, and closes are negative.
--   
--   <pre>
--   &gt;&gt;&gt; map pt "ab(cd[ef])g"
--   [0,0,1,0,0,2,0,0,-2,-1,0]
--   </pre>
--   
--   Get an open-close pair of parens from its type.
--   
--   <pre>
--   &gt;&gt;&gt; tp 2
--   ('[', ']')
--   </pre>
parenTable :: Eq a => [(Int, a -> Bool, a -> Bool)] -> ParenType a
instance Typeable1 Tree
instance Show a => Show (Tree a)
instance Eq a => Eq (Tree a)
instance Ord a => Ord (Tree a)
instance Data a => Data (Tree a)
instance Functor Tree


-- | Convert infixed-operator trees into prefixed-operator trees
module Koshucode.Baala.Base.Syntax.Binary

-- | Direction and height for binary splitting.
--   
--   <ul>
--   <li><i><tt>Left</tt> <i>H</i></i> Splits first the left-most operator,
--   and operator height is <i>H</i>. For example, if the operator
--   <tt>:</tt> is of <tt>Left 5</tt>, an expression <tt>(a : b : c)</tt>
--   is splitted into <tt>(: a (b : c))</tt> and then <tt>(: a (: b
--   c))</tt>.</li>
--   <li><i><tt>Right</tt> <i>H</i></i> Right-most splitting and height
--   <i>H</i>. For example, if the operator <tt>.</tt> is of <tt>Right
--   3</tt>, an expression <tt>(a . b . c)</tt> is splitted into <tt>(. (a
--   . b) c)</tt> and then <tt>(. (. a b) c)</tt>. An expression <tt>(a . b
--   : c)</tt> is into <tt>(: (a . b) c)</tt>, and then <tt>(: (. a b)
--   c)</tt>. Symbols that is not a binary operator like <tt>b</tt> are of
--   height 0. For that reason, heights of expression <tt>(a . b : c)</tt>
--   are <tt>(0 3 0 5 0)</tt></li>
--   </ul>
type BinaryHeight = Either Int Int

-- | Split branches in a given tree at infixed binary operators
binaryTree :: Show a => (a -> BinaryHeight) -> Tree a -> Tree a

-- | Make the height function from a height table of operators.
heightTable :: Ord a => [(BinaryHeight, [a])] -> (a -> BinaryHeight)
heightTableUnbox :: Ord a => (b -> a) -> [(BinaryHeight, [a])] -> (b -> BinaryHeight)


-- | Tokens
module Koshucode.Baala.Base.Syntax.Token

-- | Termname.
type Termname = String
data Token

-- | Word. <tt>Int</tt> represents quotation level, e.g., 0 for non-quoted,
--   1 for single-quoted, 2 for double-quoted.
TWord :: TokenNumber -> Int -> String -> Token

-- | Termname
TTerm :: TokenNumber -> [Termname] -> Token

-- | Open paren
TOpen :: TokenNumber -> String -> Token

-- | Close paren
TClose :: TokenNumber -> String -> Token

-- | <i>N</i> space characters
TSpace :: TokenNumber -> Int -> Token

-- | Comment text
TComment :: TokenNumber -> String -> Token

-- | Unknown text
TUnknown :: TokenNumber -> String -> Token

-- | Test the token is blank, i.e., <a>TComment</a> or <a>TSpace</a>.
isBlankToken :: Token -> Bool

-- | Test the token is a term, i.e., <a>TTerm</a>.
isTermToken :: Token -> Bool
isOpenTokenOf :: String -> Token -> Bool
isCloseTokenOf :: String -> Token -> Bool

-- | Text of token type, one of <tt>"Word"</tt>, <tt>"Term"</tt>,
--   <tt>"Open"</tt>, <tt>"Close"</tt>, <tt>"Space"</tt>, or
--   <tt>"Comment"</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; tokenTypeText $ TWord 1 0 "flower"
--   "Word"
--   </pre>
tokenTypeText :: Token -> String
tokenContent :: Token -> String
tokenNumber :: Token -> TokenNumber

-- | Remove blank tokens.
sweepToken :: Map [Token]

-- | Skip leading blank tokens.
sweepLeft :: Map [Token]

-- | Divide token list by some word.
divideByToken :: String -> [Token] -> [[Token]]
instance Typeable Token
instance Show Token
instance Eq Token
instance Ord Token
instance Data Token
instance Name Token


-- | Parened tree of tokens
module Koshucode.Baala.Base.Syntax.TokenTree

-- | Tree of tokens.
type TokenTree = Tree Token

-- | Parse tokens into parened trees. Blank tokens and comments are
--   excluded.
--   
--   There are four types of parens -- 1, 2, 3, or 4. Paren type is in
--   <a>TreeB</a> <i>type</i> <i>subtrees</i>.
--   
--   <ol>
--   <li>Round parens <tt>( .. )</tt> for grouping.</li>
--   <li>Squared brackets <tt>[ .. ]</tt> for list.</li>
--   <li>Curely braces <tt>{ .. }</tt> for termset.</li>
--   <li>Curely-bar braces <tt>{| .. |}</tt> for relation.</li>
--   </ol>
tokenTrees :: [Token] -> [TokenTree]
treeTokens :: TokenTree -> [Token]
treesTokens :: [TokenTree] -> [Token]
singleTree :: [TokenTree] -> TokenTree
divideByTokenTree :: String -> [TokenTree] -> [[TokenTree]]


-- | Tokenizer of koshucode.
module Koshucode.Baala.Base.Syntax.Tokenizer
type TokenLine = CodeLine Token
tokenize :: String -> [CodeLine Token]
trimLeft :: Map String

-- | Split string into list of tokens. Result token list does not contain
--   newline characters.
tokens :: String -> [Token]


-- | Syntactic functions
module Koshucode.Baala.Base.Syntax


-- | Abort utility
module Koshucode.Baala.Base.Abort.Utility

-- | Class that represents abort reason.
class AbortReasonClass a where abortSub _ = empty
abortSymbol :: AbortReasonClass a => a -> String
abortTitle :: AbortReasonClass a => a -> String
abortMain :: AbortReasonClass a => a -> Doc
abortSub :: AbortReasonClass a => a -> Doc

-- | Abort reason and source code information.
type AbortType a = (a, [Token], [CodeLine Token])

-- | Either of (1) right result or (2) abort information.
type AbortOrType a b = Either (AbortType a) b

-- | Stop program execution abnormally.
abort :: AbortReasonClass a => AbortType a -> IO ()
abortIO :: AbortReasonClass a => (b -> IO ()) -> AbortOrType a b -> IO ()
addAbort :: AbortReasonClass a => AbortType a -> Map (AbortOrType a b)

-- | Stop on error ''bug in koshucode''
bug :: a


-- | Abort symbol
module Koshucode.Baala.Base.Abort.Reason

-- | Either of (1) right result, or (2) abort reason (without source code
--   information).
type Ab b = Either AbortReason b

-- | Abortable mapping.
type AbMap b = b -> Ab b
type AbMap2 b a = b -> Ab a

-- | Abort reason and source information.
type Abort = AbortType AbortReason
type AbortTokens b = Either (AbortReason, [Token]) b

-- | Either of (1) right result, or (2) abort reason with source.
type AbortOr b = AbortOrType AbortReason b

-- | Lookup association list. This function may abort on AbortLookup.
(<!!>) :: [Named a] -> String -> AbortTokens a

-- | Abort reasons
data AbortReason
AbortHeteroDecimal :: String -> String -> AbortReason
AbortLookup :: String -> AbortReason
AbortMalformedOperand :: String -> AbortReason
AbortMissingTermname :: String -> AbortReason
AbortNotNumber :: String -> AbortReason
AbortNotText :: String -> AbortReason
AbortNoTerms :: [String] -> AbortReason
AbortOddRelation :: AbortReason
AbortReqBoolean :: String -> AbortReason
AbortReqFlatname :: String -> AbortReason
AbortReqNewTerms :: [String] -> AbortReason
AbortReqText :: String -> AbortReason
AbortUndefined :: String -> AbortReason
AbortUnkCop :: String -> AbortReason
AbortUnkCox :: String -> AbortReason
AbortUnkWord :: String -> AbortReason
AbortUnknownClause :: AbortReason
AbortUnknownContent :: String -> AbortReason
AbortUnknownRelmap :: String -> AbortReason
AbortUnknownSymbol :: String -> AbortReason
AbortUnmatchArity :: AbortReason
AbortUnmatchType :: String -> AbortReason
AbortUsage :: String -> [String] -> AbortReason
instance Show AbortReason
instance Eq AbortReason
instance Ord AbortReason
instance AbortReasonClass AbortReason
instance Name AbortReason


-- | Data on value type <tt>c</tt>
module Koshucode.Baala.Base.Data


-- | Abort symbols
module Koshucode.Baala.Base.Abort

module Koshucode.Baala.Base
