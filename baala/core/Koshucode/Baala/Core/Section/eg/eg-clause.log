section  .  .  .  .   [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "section",TSpace 2 1,TWord 3 1 "http",TWord 4 0 ":",TTerm 5 ["/","/example.com","/"],TWord 6 1 ""], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "section 'http://example.com/'", codeLineTokens = [TWord 1 0 "section",TSpace 2 1,TWord 3 1 "http",TWord 4 0 ":",TTerm 5 ["/","/example.com","/"],TWord 6 1 ""]}]}, clauseBody = CUnknown}]

import  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "import",TSpace 2 1,TWord 3 1 "http",TWord 4 0 ":",TTerm 5 ["/","/example.com","/"],TWord 6 1 ""], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "import 'http://example.com/'", codeLineTokens = [TWord 1 0 "import",TSpace 2 1,TWord 3 1 "http",TWord 4 0 ":",TTerm 5 ["/","/example.com","/"],TWord 6 1 ""]}]}, clauseBody = CImport [TWord 1 0 "import",TSpace 2 1,TWord 3 1 "http",TWord 4 0 ":",TTerm 5 ["/","/example.com","/"],TWord 6 1 ""] Nothing}]

export  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "export",TSpace 2 1,TWord 3 0 "aa"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "export aa", codeLineTokens = [TWord 1 0 "export",TSpace 2 1,TWord 3 0 "aa"]}]}, clauseBody = CExport "aa"}]

judge  .  .  .  .  .  [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "|",TWord 2 0 "--",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TTerm 6 ["/x"],TSpace 7 1,TWord 8 0 "0",TSpace 9 1,TTerm 10 ["/y"],TSpace 11 1,TWord 12 0 "0"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "|-- A /x 0 /y 0", codeLineTokens = [TWord 1 0 "|",TWord 2 0 "--",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TTerm 6 ["/x"],TSpace 7 1,TWord 8 0 "0",TSpace 9 1,TTerm 10 ["/y"],TSpace 11 1,TWord 12 0 "0"]}]}, clauseBody = CJudge True "A" [TTerm 6 ["/x"],TWord 8 0 "0",TTerm 10 ["/y"],TWord 12 0 "0"]}]

judge  .  .  .  .  .  [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "|",TWord 2 0 "-X",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TTerm 6 ["/x"],TSpace 7 1,TWord 8 0 "0",TSpace 9 1,TTerm 10 ["/y"],TSpace 11 1,TWord 12 0 "0"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "|-X A /x 0 /y 0", codeLineTokens = [TWord 1 0 "|",TWord 2 0 "-X",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TTerm 6 ["/x"],TSpace 7 1,TWord 8 0 "0",TSpace 9 1,TTerm 10 ["/y"],TSpace 11 1,TWord 12 0 "0"]}]}, clauseBody = CJudge False "A" [TTerm 6 ["/x"],TWord 8 0 "0",TTerm 10 ["/y"],TWord 12 0 "0"]}]

relmap  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "a",TSpace 2 1,TWord 3 0 ":",TSpace 4 1,TWord 5 0 "source",TSpace 6 1,TWord 7 0 "A",TSpace 8 1,TTerm 9 ["/x"],TSpace 10 1,TTerm 11 ["/y"]], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "a : source A /x /y", codeLineTokens = [TWord 1 0 "a",TSpace 2 1,TWord 3 0 ":",TSpace 4 1,TWord 5 0 "source",TSpace 6 1,TWord 7 0 "A",TSpace 8 1,TTerm 9 ["/x"],TSpace 10 1,TTerm 11 ["/y"]]}]}, clauseBody = TRelmap "a" [TWord 5 0 "source",TWord 7 0 "A",TTerm 9 ["/x"],TTerm 11 ["/y"]]}]

relmap  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "a",TSpace 2 1,TWord 3 0 ":",TSpace 4 1,TWord 5 0 "@a"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "a : @a", codeLineTokens = [TWord 1 0 "a",TSpace 2 1,TWord 3 0 ":",TSpace 4 1,TWord 5 0 "@a"]}]}, clauseBody = TRelmap "a" [TWord 5 0 "@a"]}]

assert  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "|",TWord 2 0 "==",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TWord 6 0 ":",TSpace 7 1,TWord 8 0 "a"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "|== A : a", codeLineTokens = [TWord 1 0 "|",TWord 2 0 "==",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TWord 6 0 ":",TSpace 7 1,TWord 8 0 "a"]}]}, clauseBody = TAssert AssertAffirm "A" [("",[])] [TWord 8 0 "a"]}]

assert  .  .  .  .  . [Clause {clauseSource = TokenClause {clauseTokens = [TWord 1 0 "|",TWord 2 0 "=V",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TWord 6 0 ":",TSpace 7 1,TWord 8 0 "a"], clauseLines = [CodeLine {codeLineNumber = 1, codeLineContent = "|=V A : a", codeLineTokens = [TWord 1 0 "|",TWord 2 0 "=V",TSpace 3 1,TWord 4 0 "A",TSpace 5 1,TWord 6 0 ":",TSpace 7 1,TWord 8 0 "a"]}]}, clauseBody = TAssert AssertViolate "A" [("",[])] [TWord 8 0 "a"]}]


